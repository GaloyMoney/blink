#!/usr/bin/env python3
"""
Downloads and installs workspace packages via Pnpm.
"""
import argparse
import os
import shutil
import subprocess
import sys

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--package-dir",
        help="Path to the workspace member package",
    )
    group.add_argument(
        "--root-dir",
        help="Path to the workspace root",
    )
    parser.add_argument(
        "node_modules_out_path",
        help="Path to output `node_modules`",
    )

    args = parser.parse_args()

    # Determine working directory
    if args.root_dir:
        cwd = args.root_dir
    elif args.package_dir and args.package_dir.strip():
        cwd = args.package_dir
    else:
        cwd = None  # Let subprocess use the current directory

    cmd = ["pnpm", "install", "--frozen-lockfile"]

    exit_code = subprocess.call(cmd, cwd=cwd)

    if exit_code == 0:
        # Determine source directory for node_modules
        if cwd and cwd.strip():
            src = os.path.join(cwd, "node_modules")
        else:
            src = "node_modules"

        dest = os.path.join(args.node_modules_out_path, "node_modules")

        # Ensure the source exists
        if not os.path.exists(src):
            print(f"Error: Source directory {src} does not exist", file=sys.stderr)
            sys.exit(1)

        # Ensure the parent directory of the destination exists
        parent_dir = os.path.dirname(dest)
        os.makedirs(parent_dir, exist_ok=True)

        # Remove destination if it exists
        if os.path.exists(dest):
            if os.path.islink(dest):
                os.unlink(dest)
            else:
                shutil.rmtree(dest)

        try:
            # Make the source path absolute before creating the symlink
            src_absolute = os.path.abspath(src)
            # Create a symbolic link instead of copying
            os.symlink(src_absolute, dest, target_is_directory=True)
        except Exception as e:
            print(f"Error creating symlink: {e}", file=sys.stderr)
            sys.exit(1)

    sys.exit(exit_code)

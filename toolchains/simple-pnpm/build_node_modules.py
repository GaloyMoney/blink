#!/usr/bin/env python3
"""
Downloads and installs packages via Pnpm.
"""
import argparse
import os
import shutil
import subprocess
import sys
import time

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--root-dir",
        help="Path to the root",
    )
    parser.add_argument(
        "node_modules_out_path",
        help="Path to output `node_modules`",
    )

    args = parser.parse_args()

    # Set cwd appropriately - use provided root_dir if available, otherwise current directory
    cwd = args.root_dir if args.root_dir and args.root_dir.strip() else None

    cmd = ["pnpm", "install", "--frozen-lockfile"]

    # Use subprocess.Popen with timeout for better control
    print(f"Running command: {' '.join(cmd)}", file=sys.stderr)
    try:
        process = subprocess.Popen(
            cmd,
            cwd=cwd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
        )

        # Set a timeout (adjust as needed)
        timeout = 1800  # 30 minutes
        start_time = time.time()

        # Poll the process with timeout
        while process.poll() is None:
            if time.time() - start_time > timeout:
                process.terminate()
                time.sleep(1)
                if process.poll() is None:
                    process.kill()
                print(f"Error: Command timed out after {timeout} seconds", file=sys.stderr)
                sys.exit(1)
            time.sleep(1)  # Check every second

        # Get output and error
        stdout, stderr = process.communicate()
        exit_code = process.returncode

        # Print output on error
        if exit_code != 0:
            print(f"Command failed with exit code {exit_code}", file=sys.stderr)
            print("STDOUT:", file=sys.stderr)
            print(stdout, file=sys.stderr)
            print("STDERR:", file=sys.stderr)
            print(stderr, file=sys.stderr)
            sys.exit(exit_code)

    except Exception as e:
        print(f"Error running command: {e}", file=sys.stderr)
        sys.exit(1)

    # Process succeeded
    try:
        # If no root_dir was provided, use current directory
        src_dir = args.root_dir if args.root_dir and args.root_dir.strip() else "."
        src = os.path.join(src_dir, "node_modules")
        dest = os.path.join(args.node_modules_out_path, "node_modules")

        # Ensure the source exists
        if not os.path.exists(src):
            print(f"Error: Source directory {src} does not exist", file=sys.stderr)
            sys.exit(1)

        # Ensure the parent directory exists (not the destination itself)
        parent_dir = os.path.dirname(dest)
        os.makedirs(parent_dir, exist_ok=True)

        # Remove destination if it exists
        if os.path.exists(dest):
            if os.path.islink(dest):
                os.unlink(dest)
            else:
                shutil.rmtree(dest)

        # Make the source path absolute before creating the symlink
        src_absolute = os.path.abspath(src)
        print(f"Creating symlink: {src_absolute} -> {dest}", file=sys.stderr)
        os.symlink(src_absolute, dest, target_is_directory=True)
        print("Symlink created successfully", file=sys.stderr)

    except Exception as e:
        print(f"Error during symlink creation: {e}", file=sys.stderr)
        sys.exit(1)

    sys.exit(0)

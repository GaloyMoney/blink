config.define_string_list("test")
config.define_bool("bats")
cfg = config.parse()

CORE_TEST_LABEL = "core"
CONSENT_TEST_LABEL = "consent"
DASHBOARD_TEST_LABEL = "dashboard"
PAY_TEST_LABEL = "pay"
ADMIN_PANEL_TEST_LABEL = "admin-panel"
MAP_TEST_LABEL = "map"
MIGRATE_MONGO_TEST_LABEL = "mongodb-migrate"

TEST_RESOURCES = {
   CORE_TEST_LABEL: "test-api",
   CONSENT_TEST_LABEL: "test-consent",
   DASHBOARD_TEST_LABEL: "test-dashboard",
   PAY_TEST_LABEL: "test-pay",
   ADMIN_PANEL_TEST_LABEL: "test-admin-panel",
   MAP_TEST_LABEL: "test-map",
   MIGRATE_MONGO_TEST_LABEL: "test-mongodb-migrate",
}

is_ci=("ci" in sys.argv) or cfg.get("bats", False)
run_apps=not cfg.get("bats", False)

# From the Tilt docs:
#
# > By default, Tilt will not let you develop against a remote cluster.
#
# The implication appears to be that if Tilt finds a configured Kubernetes setup on your system
# **and** it's a remote cluster, despite the fact that we are not using any Kubernetes features or
# capabilities, it will still try to connect and fail. Instead, we're going to disable this check
# and continue.
#
# - https://docs.tilt.dev/choosing_clusters.html#remote
# - https://docs.tilt.dev/api.html#api.allow_k8s_contexts
allow_k8s_contexts(k8s_context())

def _buck2_dep_inputs(target):
    cmd = [
        "buck2",
        "uquery",
        "\"inputs(deps('{}'))\"".format(target),
    ]
    abs_file_paths = str(local(" ".join(cmd))).splitlines()

    repo_root = str(local("git rev-parse --show-toplevel")).strip()
    rel_file_paths = ["{}/{}".format(repo_root, path) for path in abs_file_paths]

    return rel_file_paths

dashboard_target = "//apps/dashboard:dev"
if is_ci:
  dashboard_target = '//apps/dashboard:dashboard'
local_resource(
    "dashboard",
    labels = ["apps"],
    cmd = "buck2 build {}".format(dashboard_target),
    serve_cmd = ". .envs/dashboard.env && buck2 run {}".format(dashboard_target),
    serve_env = {
      "NEXTAUTH_URL": "http://localhost:3001",
      "NEXTAUTH_SECRET": "secret",
      "PORT": "3001",
    },
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "/",
            port = 3001,
        ),
    ),
    deps = _buck2_dep_inputs(dashboard_target),
    allow_parallel = True,
    auto_init = run_apps,
    resource_deps = [
        "hydra-dashboard",
        "api-keys",
        "svix",
        "svix-pg",
        "add-test-users-with-usernames",
        "fund-user",
        "notifications",
    ],
    links = [
        link("http://localhost:3001", "dashboard"),
    ],
)

pay_target = "//apps/pay:dev"
if is_ci:
  pay_target = '//apps/pay:pay-ci'
pay_env = {
  "PORT": "3002",
  "CORE_GQL_URL_INTRANET": "http://localhost:4455/graphql",
  "NEXT_PUBLIC_CORE_GQL_URL": "http://localhost:4455/graphql",
  "NEXT_PUBLIC_CORE_GQL_WEB_SOCKET_URL": "ws://localhost:4455/graphqlws",
  "NEXT_PUBLIC_PAY_DOMAIN": "localhost:3002",
}
local_resource(
    "pay",
    labels = ["apps"],
    cmd = "buck2 build {}".format(pay_target),
    serve_cmd = "buck2 run {}".format(pay_target),
    env = pay_env,
    serve_env = pay_env,
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "/",
            port = 3002,
        ),
    ),
    deps = _buck2_dep_inputs(pay_target),
    allow_parallel = True,
    resource_deps = [
        "api",
        "api-ws-server"
    ],
    links = [
        link("http://localhost:3002", "pay"),
    ],
)

admin_panel_target = "//apps/admin-panel:dev"
if is_ci:
  admin_panel_target = '//apps/admin-panel:admin-panel'
admin_panel_env = {
    "PORT": "3004",
    "ADMIN_CORE_API" : "http://localhost:4455/admin/graphql",
    "NEXTAUTH_URL" : "http://localhost:3004",
    "NEXTAUTH_SECRET" : "nextAuthSecret",
}
local_resource(
    "admin-panel",
    labels = ["apps"],
    cmd = "buck2 build {}".format(admin_panel_target),
    serve_cmd = "buck2 run {}".format(admin_panel_target),
    env = admin_panel_env,
    serve_env = admin_panel_env,
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "/",
            port = 3004,
        ),
    ),
    deps = _buck2_dep_inputs(admin_panel_target),
    allow_parallel = True,
    resource_deps = [
        "api",
        "apollo-router",
    ],
    links = [
        link("http://localhost:3004", "admin-panel"),
    ],
)

map_target = "//apps/map:dev"
if is_ci:
  map_target = '//apps/map:map'
map_env = {
    "PORT": "3005",
    "CORE_URL" : "http://localhost:4455/graphql",
}
local_resource(
    "map",
    labels = ["apps"],
    cmd = "buck2 build {}".format(map_target),
    serve_cmd = "buck2 run {}".format(map_target),
    env = map_env,
    serve_env = map_env,
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "/",
            port = 3005,
        ),
    ),
    deps = _buck2_dep_inputs(map_target),
    allow_parallel = True,
    resource_deps = [
        "api",
        "apollo-router",
    ],
    links = [
        link("http://localhost:3005", "map"),
    ],
)

local_resource(
  name='hydra-dashboard',
  labels = ['apps'],
  cmd=[
    'buck2',
    'run',
    '//dev:setup-hydra-client',
    '--',
    'dashboard',
    'authorization_code,refresh_token',
    'http://localhost:3001/api/auth/callback/blink',
  ],
  allow_parallel = True,
  auto_init = run_apps,
  resource_deps = [
    "hydra",
    "api",
  ]
)

consent_test_target = "//apps/consent:test-integration"
local_resource(
  "test-consent",
  labels = ["test"],
  auto_init = is_ci and CONSENT_TEST_LABEL in cfg.get("test", []),
  cmd = "buck2 test {}".format(consent_test_target),
  allow_parallel = True,
  resource_deps = [
    "consent",
    "init-test-user",
  ],
)

dashboard_test_target = "//apps/dashboard:test-integration"
local_resource(
  "test-dashboard",
  labels = ["test"],
  auto_init = is_ci and DASHBOARD_TEST_LABEL in cfg.get("test", []),
  cmd = "buck2 test {}".format(dashboard_test_target),
  resource_deps = [
    "consent",
    "dashboard",
    "init-test-user",
  ],
)

pay_test_target = "//apps/pay:test-integration"
local_resource(
  "test-pay",
  labels = ["test"],
  auto_init = is_ci and PAY_TEST_LABEL in cfg.get("test", []),
  cmd = "buck2 test {}".format(pay_test_target),
  resource_deps = [
    "api",
    "pay",
    "add-test-users-with-usernames",
    "fund-user",
  ],
)

admin_panel_test_target = "//apps/admin-panel:test-integration"
local_resource(
  "test-admin-panel",
  labels = ["test"],
  auto_init = is_ci and ADMIN_PANEL_TEST_LABEL in cfg.get("test", []),
  cmd = "buck2 test {}".format(admin_panel_test_target),
  resource_deps = [
    "admin-panel",
  ],
)

map_test_target = "//apps/map:test-integration"
local_resource(
  "test-map",
  labels = ["test"],
  auto_init = is_ci and MAP_TEST_LABEL in cfg.get("test", []),
  cmd = "buck2 test {}".format(map_test_target),
  resource_deps = [
    "map",
  ],
)

local_resource(
  name='init-test-user',
  labels = ['test'],
  cmd='buck2 run //dev:init-test-user',
  allow_parallel = True,
  resource_deps = [
    "oathkeeper",
    "kratos",
    "api",
  ]
)

local_resource(
  name='add-test-users-with-usernames',
  labels = ['test'],
  cmd='buck2 run //dev:add-test-users-with-usernames',
  allow_parallel = True,
  resource_deps = [
    "oathkeeper",
    "kratos",
    "api",
  ]
)

local_resource(
  name='fund-user',
  labels = ['test'],
  cmd='buck2 run //dev:fund-user',
  allow_parallel = True,
  resource_deps = [
    "oathkeeper",
    "kratos",
    "api",
    "init-onchain",
    "init-test-user",
    "api-trigger",
    "stablesats",
    "price",
  ]
)


consent_target = "//apps/consent:dev"
if is_ci:
  consent_target = '//apps/consent:consent'
local_resource(
    "consent",
    labels = ["auth"],
    cmd = "buck2 build {}".format(consent_target),
    serve_cmd = "buck2 run {}".format(consent_target),
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "/",
            port = 3000,
        ),
    ),
    deps = _buck2_dep_inputs(consent_target),
    allow_parallel = True,
    auto_init = run_apps,
    resource_deps = [
        "hydra-consent",
        "apollo-router",
        "hydra",
        "api",
    ],
    links = [
        link("http://localhost:3000", "consent"),
    ],
)

local_resource(
  name='hydra-consent',
  labels = ['auth'],
  cmd=[
    'buck2',
    'run',
    '//dev:setup-hydra-client',
    '--',
    'consent',
    'authorization_code,refresh_token',
    'http://localhost:3000',
  ],
  allow_parallel = True,
  auto_init = run_apps,
  resource_deps = [
    "hydra",
    "api",
  ]
)

env_json = _buck2_dep_inputs("//dev:serve_env")[0]
core_serve_env = read_json(env_json)

callback_target = "//bats/helpers/callback:run"
local_resource(
    "callback",
    labels = ["test"],
    serve_cmd = "buck2 run {}".format(callback_target),
    allow_parallel = True,
    deps = _buck2_dep_inputs(callback_target),
)

api_target = "//core/api:dev"
if is_ci:
  api_target = "//core/api:api"
local_resource(
    "api",
    labels = ["core"],
    cmd = "buck2 build {}".format(api_target),
    serve_cmd = "buck2 run {}".format(api_target),
    serve_env = core_serve_env,
    allow_parallel = True,
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "healthz",
            port = 4012,
        ),
    ),
    deps = _buck2_dep_inputs(api_target),
    resource_deps = [
        "price",
        "init-onchain",
        "init-lightning",
        "lnd1",
        "lnd2",
        "redis",
        "mongodb",
        "oathkeeper",
        "svix",
    ]
)

api_trigger_target = "//core/api-trigger:dev"
if is_ci:
  api_trigger_target = "//core/api-trigger:api-trigger"
local_resource(
    "api-trigger",
    labels = ["core"],
    cmd = "buck2 build {}".format(api_trigger_target),
    serve_cmd = "buck2 run //dev:stoppable-trigger {}".format(api_trigger_target),
    serve_env = core_serve_env,
    allow_parallel = True,
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "healthz",
            port = 8888,
        ),
    ),
    deps = _buck2_dep_inputs(api_trigger_target),
    resource_deps = [
        "price",
        "init-onchain",
        "lnd1",
        "lnd2",
        "redis",
        "mongodb",
        "oathkeeper",
    ]
)

api_exporter_target = "//core/api-exporter:dev"
if is_ci:
  api_exporter_target = "//core/api-exporter:api-exporter"
local_resource(
    "api-exporter",
    labels = ["core"],
    cmd = "buck2 build {}".format(api_exporter_target),
    serve_cmd = "buck2 run {}".format(api_exporter_target),
    serve_env = core_serve_env,
    allow_parallel = True,
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "healthz",
            port = 3003,
        ),
    ),
    deps = _buck2_dep_inputs(api_exporter_target),
    resource_deps = [
        "price",
        "init-onchain",
        "lnd1",
        "lnd2",
        "redis",
        "mongodb",
        "oathkeeper",
    ]
)

api_ws_server_target = "//core/api-ws-server:dev"
if is_ci:
  api_ws_server_target = "//core/api-ws-server:api-ws-server"
local_resource(
    "api-ws-server",
    labels = ["core"],
    cmd = "buck2 build {}".format(api_ws_server_target),
    serve_cmd = "buck2 run {}".format(api_ws_server_target),
    serve_env = core_serve_env,
    allow_parallel = True,
    readiness_probe = probe(
        period_secs  = 5,
        http_get = http_get_action(
            path = "healthz",
            port = 4012,
        ),
    ),
    deps = _buck2_dep_inputs(api_ws_server_target),
    resource_deps = [
        "price",
        "init-onchain",
        "lnd1",
        "lnd2",
        "redis",
        "mongodb",
        "oathkeeper",
    ]
)

notifications_target = "//core/notifications:notifications"
local_resource(
    "notifications",
    labels = ["core"],
    cmd = "buck2 build {}".format(notifications_target),
    serve_cmd = "buck2 run {}".format(notifications_target),
    serve_env = {
      "PG_CON": "postgres://user:password@localhost:5433/pg",
      "NOTIFICATIONS_CONFIG": "./config/notifications/notifications.yml",
      "OTEL_EXPORTER_OTLP_ENDPOINT": "http://localhost:4317",
    },
    deps = _buck2_dep_inputs(notifications_target),
    allow_parallel = True,
    resource_deps = [
       "api",
       "notifications-pg"
    ]
)

local_resource(
  name='init-onchain',
  labels = ['bitcoin'],
  cmd='buck2 run //dev:init-onchain',
  allow_parallel = True,
  resource_deps = [
    "bitcoind",
    "bria",
  ]
)

local_resource(
  name='init-lightning',
  labels = ['bitcoin'],
  cmd='buck2 run //dev:init-lightning',
  allow_parallel = True,
  resource_deps = [
    "init-onchain",
    "lnd1",
    "lnd-outside-1",
    "lnd-outside-2",
  ]
)

api_keys_target = "//core/api-keys:api-keys"
local_resource(
    "api-keys",
    labels = ["auth"],
    cmd = "buck2 build {}".format(api_keys_target),
    serve_cmd = "buck2 run {}".format(api_keys_target),
    serve_env = {
      "PG_CON": "postgres://user:password@localhost:5431/pg",
      "API_KEYS_CONFIG": "../core/api-keys/api-keys.yml",
      "OTEL_EXPORTER_OTLP_ENDPOINT": "http://localhost:4317",
    },
    deps = _buck2_dep_inputs(api_keys_target),
    allow_parallel = True,
    resource_deps = [
       "api",
       "api-keys-pg"
    ]
)

docker_groups = {
    "auth": [
        "api-keys-pg",
        "oathkeeper",
        "hydra",
        "hydra-migrate",
        "hydra-pg",
        "kratos",
        "kratos-pg",
    ],
    "core": [
        "apollo-router",
        "mongodb",
        "notifications-pg",
        "oathkeeper",
        "redis",
        "stablesats",
        "svix-pg",
        "svix",
    ],
    "bitcoin": [
        "lnd1",
        "lnd2",
        "bria",
        "bria-pg",
        "bitcoind",
    ],
    "integration": [
        "lnd-outside-1",
        "lnd-outside-2",
    ],
    "price": [
      "price",
      "price-history",
      "price-history-migrate",
      "price-history-pg"
    ],
    "tracing": [
      "otel-agent",
    ],
}

to_run = cfg.get("to-run", [])
if to_run != []:
    enabled_resources = []
    for svc in to_run:
        enabled_resources.append(svc)
    config.set_enabled_resources(enabled_resources)

to_test = cfg.get("test", [])
if to_test != []:
    enabled_resources = []
    for label in to_test:
        svc = TEST_RESOURCES.get(label)
        if svc:
            enabled_resources.append(svc)
    config.set_enabled_resources(enabled_resources)

docker_compose("./docker-compose.deps.yml", project_name = "galoy-dev")

for service in docker_groups["bitcoin"]:
    dc_resource(service, labels = ["bitcoin"])
for service in docker_groups["tracing"]:
    dc_resource(service, labels = ["tracing"])
for service in docker_groups["core"]:
    dc_resource(service, labels = ["core"])
for service in docker_groups["auth"]:
    dc_resource(service, labels = ["auth"])
for service in docker_groups["price"]:
    dc_resource(service, labels = ["price"])
for service in docker_groups["integration"]:
    dc_resource(service, labels = ["integration"])

api_test_target = "//core/api:test-integration"
local_resource(
  "test-api",
  labels = ["test"],
  auto_init = is_ci and CORE_TEST_LABEL in cfg.get("test", []),
  cmd = "buck2 test {}".format(api_test_target),
  resource_deps = [res for sublist in docker_groups.values() for res in sublist] + ["notifications"]
)

local_resource(
  "test-mongodb-migrate",
  labels = ["test"],
  auto_init = is_ci and MIGRATE_MONGO_TEST_LABEL in cfg.get("test", []),
  cmd='buck2 run //core/api:mongodb-migrate',
  allow_parallel = True,
  resource_deps = [
    "mongodb",
  ]
)

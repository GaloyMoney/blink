apiVersion: vendir.k14s.io/v1alpha1
kind: Config

directories:
  - path: vendor
    contents:
      - path: dev
        git:
          url: https://github.com/GaloyMoney/galoy.git
          ref: main
        includePaths:
          - dev/**/*
        excludePaths:
          - dev/bin/**/*
        newRootPath: dev
      - path: envs
        git:
          url: https://github.com/GaloyMoney/galoy.git
          ref: main
        includePaths:
          - .envrc
          - .env
          - .env.ci
      - path: test
        git:
          url: https://github.com/GaloyMoney/galoy.git
          ref: main
        includePaths:
          - test/bats/helpers/**/*
          - test/bats/gql/**/*
        newRootPath: test
      - path: docker
        inline:
          paths:
            docker-compose.yml: |
              version: "3"
              services:
                bats-deps:
                  image: busybox
                  depends_on:
                    - apollo-router
                    - redis
                    - mongodb
                    - oathkeeper
                    - kratos
                    - price
                    - bitcoind
                    - lnd1
                    - lnd2
                    - lnd-outside-1
                galoy:
                  image: us.gcr.io/galoy-org/galoy-app:edge
                  command:
                    - "-r"
                    - "/app/lib/services/tracing.js"
                    - "lib/servers/graphql-main-server.js"
                  env_file: ${HOST_PROJECT_PATH:-.}/.env.ci
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}/dev/galoy.yml:/var/yaml/custom.yaml
                apollo-router:
                  image: ghcr.io/apollographql/router:v1.25.0
                  environment:
                    - APOLLO_ROUTER_SUPERGRAPH_PATH=/repo/dev/apollo-federation/supergraph.graphql
                    - APOLLO_ROUTER_CONFIG_PATH=/repo/dev/apollo-federation/router.yaml
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}:/repo
                otel-agent:
                  image: otel/opentelemetry-collector-contrib:0.79.0
                  command: ["--config=/etc/otel-agent-config.yaml"]
                  environment:
                    - HONEYCOMB_DATASET=${HONEYCOMB_DATASET}
                    - HONEYCOMB_API_KEY=${HONEYCOMB_API_KEY}
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}/dev/otel-agent-config.yaml:/etc/otel-agent-config.yaml
                price:
                  image: us.gcr.io/galoy-org/price:edge
                price-history:
                  image: us.gcr.io/galoy-org/price-history:edge
                  command: ./scripts/run-servers-dev.sh
                  environment:
                    - DB_HOST=postgres-price-history
                    - DB_PORT=5432
                    - DB_USER=galoy-price-usr
                    - DB_PWD=galoy-price-pwd
                    - DB_DB=galoy-price-history
                    - DB_POOL_MIN=1
                    - DB_POOL_MAX=5
                    - DB_DEBUG=false
                  depends_on:
                    - postgres-price-history
                    - price-history-migrate
                price-history-migrate:
                  image: us.gcr.io/galoy-org/price-history-migrate:edge
                  environment:
                    - DB_HOST=postgres-price-history
                    - DB_PORT=5432
                    - DB_USER=galoy-price-usr
                    - DB_PWD=galoy-price-pwd
                    - DB_DB=galoy-price-history
                    - DB_POOL_MIN=1
                    - DB_POOL_MAX=5
                    - DB_DEBUG=false
                  depends_on: [postgres-price-history]
                redis:
                  image: redis:7.0.8
                  environment:
                    - ALLOW_EMPTY_PASSWORD=yes
                    - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
                mongodb:
                  image: mongo:${MONGODB_VERSION:-6.0.5}
                  environment:
                    - MONGO_INITDB_DATABASE=galoy
                postgres-price-history:
                  image: postgres:14.1
                  environment:
                    - POSTGRES_USER=galoy-price-usr
                    - POSTGRES_PASSWORD=galoy-price-pwd
                    - POSTGRES_DB=galoy-price-history
                bitcoind:
                  image: lncm/bitcoind:v24.0.1
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}/dev/bitcoind/bitcoin.conf:/data/.bitcoin/bitcoin.conf
                lnd1:
                  image: lightninglabs/lnd:v0.16.2-beta
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/lnd.conf:/root/.lnd/lnd.conf
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/tls.key:/root/.lnd/tls.key
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/tls.cert:/root/.lnd/tls.cert
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd1.wallet.db:/root/.lnd/wallet.db
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd1.macaroons.db:/root/.lnd/macaroons.db
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd1.admin.macaroon:/root/.lnd/admin.macaroon
                  depends_on: [bitcoind]
                  entrypoint: ["/bin/sh", "-c"]
                  command:
                    - |
                      mkdir -p /root/.lnd/data/chain/bitcoin/regtest/
                      cp /root/.lnd/wallet.db /root/.lnd/data/chain/bitcoin/regtest/wallet.db
                      cp /root/.lnd/macaroons.db /root/.lnd/data/chain/bitcoin/regtest/macaroons.db
                      cp /root/.lnd/admin.macaroon /root/.lnd/data/chain/bitcoin/regtest/admin.macaroon
                      /bin/lnd
                lnd2:
                  image: lightninglabs/lnd:v0.16.2-beta
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/lnd.conf:/root/.lnd/lnd.conf
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/tls.key:/root/.lnd/tls.key
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/tls.cert:/root/.lnd/tls.cert
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd2.wallet.db:/root/.lnd/wallet.db
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd2.macaroons.db:/root/.lnd/macaroons.db
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd2.admin.macaroon:/root/.lnd/admin.macaroon
                  depends_on: [bitcoind]
                  entrypoint: ["/bin/sh", "-c"]
                  command:
                    - |
                      mkdir -p /root/.lnd/data/chain/bitcoin/regtest/
                      cp /root/.lnd/wallet.db /root/.lnd/data/chain/bitcoin/regtest/wallet.db
                      cp /root/.lnd/macaroons.db /root/.lnd/data/chain/bitcoin/regtest/macaroons.db
                      cp /root/.lnd/admin.macaroon /root/.lnd/data/chain/bitcoin/regtest/admin.macaroon
                      /bin/lnd
                lnd-outside-1:
                  image: lightninglabs/lnd:v0.16.2-beta
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/lnd.conf:/root/.lnd/lnd.conf
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/tls.key:/root/.lnd/tls.key
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/tls.cert:/root/.lnd/tls.cert
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd-outside-1.wallet.db:/root/.lnd/wallet.db
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd-outside-1.macaroons.db:/root/.lnd/macaroons.db
                    - ${HOST_PROJECT_PATH:-.}/dev/lnd/regtest/lnd-outside-1.admin.macaroon:/root/.lnd/admin.macaroon
                  entrypoint: ["/bin/sh", "-c"]
                  command:
                    - |
                      mkdir -p /root/.lnd/data/chain/bitcoin/regtest/
                      cp /root/.lnd/wallet.db /root/.lnd/data/chain/bitcoin/regtest/wallet.db
                      cp /root/.lnd/macaroons.db /root/.lnd/data/chain/bitcoin/regtest/macaroons.db
                      cp /root/.lnd/admin.macaroon /root/.lnd/data/chain/bitcoin/regtest/admin.macaroon
                      /bin/lnd
                  depends_on: [bitcoind]
                bats-tests:
                  image: us.gcr.io/galoy-org/nodejs-concourse
                  depends_on:
                    - bats-deps
                  command: ["make", "execute-bats-from-within-container"]
                  working_dir: /repo
                  env_file:
                    - ${TMP_ENV_CI:-.env.ci}
                  environment:
                    - GALOY_ENDPOINT=oathkeeper:4455
                    - HOST_PROJECT_PATH=${PWD}
                    - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
                  volumes:
                    - ${HOST_PROJECT_PATH:-.}:/repo
                    - /var/run/docker.sock:/var/run/docker.sock
                oathkeeper:
                  image: oryd/oathkeeper:v0.40.4-distroless
                  command: serve -c /home/ory/oathkeeper.yml --sqa-opt-out
                  volumes:
                    - type: bind
                      source: ${HOST_PROJECT_PATH:-.}/dev/ory
                      target: /home/ory
                kratos:
                  image: oryd/kratos:v1.0.0
                  entrypoint: sh -c
                  command: '"kratos migrate sql up -y -e && kratos serve -c /home/ory/kratos.yml --watch-courier --sqa-opt-out"'
                  environment:
                    DSN: postgres://dbuser:secret@kratos-pg:5432/default?sslmode=disable
                  links:
                    - kratos-pg:kratos-pg
                  volumes:
                    - type: bind
                      source: ${HOST_PROJECT_PATH:-.}/dev/ory
                      target: /home/ory
                kratos-pg:
                  image: postgres:14.1
                  expose:
                    - "5432"
                  environment:
                    - POSTGRES_USER=dbuser
                    - POSTGRES_PASSWORD=secret
                    - POSTGRES_DB=default

            docker-compose.override.yml: |
              version: "3"
              services:
                galoy:
                  ports:
                    - "4012:4012"
                    - "4001:4001"
                apollo-router:
                  ports:
                    - "4004:4004"
                  extra_hosts:
                    - "bats-tests:host-gateway"
                otel-agent:
                  ports:
                    - "4318:4318" # http receiver
                price:
                  ports:
                    - "50051:50051"
                    - "9464:9464"
                price-history:
                  ports:
                    - "50052:50052"
                redis:
                  ports:
                    - "6379:6379"
                mongodb:
                  environment:
                    - MONGODB_ADVERTISED_HOSTNAME=127.0.0.1
                  ports:
                    - "27017:27017"
                postgres-price-history:
                  ports:
                    - "5432:5432"
                bitcoind:
                  ports:
                    - "18443:18443"
                lnd1:
                  ports:
                    - "10009:10009"
                lnd2:
                  ports:
                    - "10010:10009"
                lnd-outside-1:
                  ports:
                    - "10012:10009"
                oathkeeper:
                  extra_hosts:
                    - "bats-tests:host-gateway"
                  ports:
                    - "4002:4455"
                    - "4456:4456"
                kratos:
                  extra_hosts:
                    - "bats-tests:host-gateway"
                  ports:
                    - "4433:4433" # public
                    - "4434:4434" # admin
                # bats-tests:
                  # ports:
                    # - "4012:4012"
                    # - "4001:4001"
                    # - "4000:4000"
                kratos-pg:
                  ports:
                    - "5433:5432"

            docker-compose.router.yml: |
              version: "3"
              services:
                bats-deps:
                  image: busybox
                  depends_on:
                    - apollo-router
                apollo-router:
                  image: ghcr.io/apollographql/router:v1.25.0
                  environment:
                    - APOLLO_ROUTER_SUPERGRAPH_PATH=/repo/dev/apollo-federation/supergraph.graphql
                    - APOLLO_ROUTER_CONFIG_PATH=/repo/dev/apollo-federation/vendor/galoy/dev/apollo-federation/router.yaml
                  volumes:
                    - ./:/repo
                bats-tests-subgraph:
                    image: us.gcr.io/galoy-org/nodejs-concourse
                    depends_on:
                      - bats-deps
                    command: ["make", "execute-bats-from-within-container"]
                    working_dir: /repo
                    env_file:
                      - ${TMP_ENV_CI:-.env.ci}
                    environment:
                      - HOST_PROJECT_PATH=${PWD}
                      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}

            docker-compose.override.router.yml: |
              version: "3"
              services:
                apollo-router:
                  ports:
                    - "5004:4004"
                  extra_hosts:
                    - "bats-tests-subgraph:host-gateway"
                bats-tests-subgraph:
                  ports:
                    - "4010:4010"
                    - "4022:4002"

            run.sh: |
              #!/bin/sh
              #!/bin/zsh
              #!/bin/bash

              cp docker/docker-compose.yml .
              cp docker/docker-compose.override.yml .
              cp envs/* .
              cp envs/.env.ci .
              cp envs/.envrc .
              cp envs/.env .
              direnv allow
              docker compose --project-name galoy-stack up -d

// source: services/price/v1/price_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForFutureSellRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForFutureSellResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForFutureSellRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForFutureSellResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest', null, global);
goog.exportSymbol('proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.displayName = 'proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.displayName = 'proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.displayName = 'proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.displayName = 'proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.displayName = 'proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.displayName = 'proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForFutureSellRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.displayName = 'proto.services.price.v1.GetCentsFromSatsForFutureSellRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsFromSatsForFutureSellResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.displayName = 'proto.services.price.v1.GetCentsFromSatsForFutureSellResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.displayName = 'proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.displayName = 'proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.displayName = 'proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.displayName = 'proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.displayName = 'proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.displayName = 'proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForFutureSellRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.displayName = 'proto.services.price.v1.GetSatsFromCentsForFutureSellRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetSatsFromCentsForFutureSellResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.displayName = 'proto.services.price.v1.GetSatsFromCentsForFutureSellResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.displayName = 'proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.displayName = 'proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest;
  return proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest} returns this
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyRequest.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse;
  return proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse} returns this
 */
proto.services.price.v1.GetCentsFromSatsForImmediateBuyResponse.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest;
  return proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest} returns this
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellRequest.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse;
  return proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse} returns this
 */
proto.services.price.v1.GetCentsFromSatsForImmediateSellResponse.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeInSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest;
  return proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeInSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimeInSeconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest} returns this
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 time_in_seconds = 2;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.prototype.getTimeInSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest} returns this
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyRequest.prototype.setTimeInSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse;
  return proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse} returns this
 */
proto.services.price.v1.GetCentsFromSatsForFutureBuyResponse.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureSellRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeInSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureSellRequest}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForFutureSellRequest;
  return proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureSellRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureSellRequest}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeInSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureSellRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimeInSeconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureSellRequest} returns this
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 time_in_seconds = 2;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.prototype.getTimeInSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureSellRequest} returns this
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellRequest.prototype.setTimeInSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureSellResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureSellResponse}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsFromSatsForFutureSellResponse;
  return proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureSellResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureSellResponse}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsFromSatsForFutureSellResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsFromSatsForFutureSellResponse} returns this
 */
proto.services.price.v1.GetCentsFromSatsForFutureSellResponse.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest;
  return proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest} returns this
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyRequest.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse;
  return proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse} returns this
 */
proto.services.price.v1.GetSatsFromCentsForImmediateBuyResponse.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest;
  return proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest} returns this
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellRequest.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse;
  return proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse} returns this
 */
proto.services.price.v1.GetSatsFromCentsForImmediateSellResponse.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeInSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest;
  return proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeInSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimeInSeconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest} returns this
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 time_in_seconds = 2;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.prototype.getTimeInSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest} returns this
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyRequest.prototype.setTimeInSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse;
  return proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse} returns this
 */
proto.services.price.v1.GetSatsFromCentsForFutureBuyResponse.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureSellRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeInSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureSellRequest}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForFutureSellRequest;
  return proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureSellRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureSellRequest}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInCents(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeInSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureSellRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInCents();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimeInSeconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.prototype.getAmountInCents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureSellRequest} returns this
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.prototype.setAmountInCents = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 time_in_seconds = 2;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.prototype.getTimeInSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureSellRequest} returns this
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellRequest.prototype.setTimeInSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureSellResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureSellResponse}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetSatsFromCentsForFutureSellResponse;
  return proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureSellResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureSellResponse}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountInSatoshis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetSatsFromCentsForFutureSellResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountInSatoshis();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.prototype.getAmountInSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetSatsFromCentsForFutureSellResponse} returns this
 */
proto.services.price.v1.GetSatsFromCentsForFutureSellResponse.prototype.setAmountInSatoshis = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest;
  return proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ratioInCentsPerSatoshis: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse;
  return proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRatioInCentsPerSatoshis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRatioInCentsPerSatoshis();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double ratio_in_cents_per_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.prototype.getRatioInCentsPerSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse} returns this
 */
proto.services.price.v1.GetCentsPerSatsExchangeMidRateResponse.prototype.setRatioInCentsPerSatoshis = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


goog.object.extend(exports, proto.services.price.v1);

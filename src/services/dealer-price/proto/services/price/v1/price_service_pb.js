// source: services/price/v1/price_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf")
var goog = jspb
var global = Function("return this")()

goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest",
  null,
  global,
)
goog.exportSymbol(
  "proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse",
  null,
  global,
)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.displayName =
    "proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.displayName =
    "proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse =
  function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null)
  }
goog.inherits(
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.displayName =
    "proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.displayName =
    "proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.displayName =
    "proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse"
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInSatoshis(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInSatoshis()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.prototype.getAmountInSatoshis =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyRequest.prototype.setAmountInSatoshis =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          amountInCents: jspb.Message.getFieldWithDefault(msg, 1, 0),
        }

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg =
      new proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInCents(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInCents()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_cents = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.prototype.getAmountInCents =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsRequest.prototype.setAmountInCents =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInUsd: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInUsd(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInUsd()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_usd = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.prototype.getAmountInUsd =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellRequest.prototype.setAmountInUsd =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
        }

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg =
      new proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInSatoshis(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInSatoshis()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.prototype.getAmountInSatoshis =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisRequest.prototype.setAmountInSatoshis =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
        timeInSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest()
  return proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInSatoshis(value)
          break
        case 2:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setTimeInSeconds(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInSatoshis()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
    f = message.getTimeInSeconds()
    if (f !== 0) {
      writer.writeUint64(2, f)
    }
  }

/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.prototype.getAmountInSatoshis =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest} returns this
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.prototype.setAmountInSatoshis =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

/**
 * optional uint64 time_in_seconds = 2;
 * @return {number}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.prototype.getTimeInSeconds =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest} returns this
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyRequest.prototype.setTimeInSeconds =
  function (value) {
    return jspb.Message.setProto3IntField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInUsd: jspb.Message.getFieldWithDefault(msg, 1, 0),
        timeInSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest()
  return proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInUsd(value)
          break
        case 2:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setTimeInSeconds(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInUsd()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
    f = message.getTimeInSeconds()
    if (f !== 0) {
      writer.writeUint64(2, f)
    }
  }

/**
 * optional uint64 amount_in_usd = 1;
 * @return {number}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.prototype.getAmountInUsd =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest} returns this
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.prototype.setAmountInUsd =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

/**
 * optional uint64 time_in_seconds = 2;
 * @return {number}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.prototype.getTimeInSeconds =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest} returns this
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellRequest.prototype.setTimeInSeconds =
  function (value) {
    return jspb.Message.setProto3IntField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInUsd: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInUsd(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInUsd()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_usd = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.prototype.getAmountInUsd =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyResponse.prototype.setAmountInUsd =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
        }

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg =
      new proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInSatoshis(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInSatoshis()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.prototype.getAmountInSatoshis =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdBuyFromCentsResponse.prototype.setAmountInSatoshis =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInSatoshis(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInSatoshis()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.prototype.getAmountInSatoshis =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellResponse.prototype.setAmountInSatoshis =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          amountInUsd: jspb.Message.getFieldWithDefault(msg, 1, 0),
        }

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg =
      new proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse()
    return proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInUsd(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInUsd()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_usd = 1;
 * @return {number}
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.prototype.getAmountInUsd =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse} returns this
 */
proto.services.price.v1.GetExchangeRateForImmediateUsdSellFromSatoshisResponse.prototype.setAmountInUsd =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInUsd: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse()
  return proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInUsd(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInUsd()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_usd = 1;
 * @return {number}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.prototype.getAmountInUsd =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse} returns this
 */
proto.services.price.v1.GetQuoteRateForFutureUsdBuyResponse.prototype.setAmountInUsd =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        amountInSatoshis: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse()
    return proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAmountInSatoshis(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getAmountInSatoshis()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
  }

/**
 * optional uint64 amount_in_satoshis = 1;
 * @return {number}
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.prototype.getAmountInSatoshis =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse} returns this
 */
proto.services.price.v1.GetQuoteRateForFutureUsdSellResponse.prototype.setAmountInSatoshis =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

goog.object.extend(exports, proto.services.price.v1)

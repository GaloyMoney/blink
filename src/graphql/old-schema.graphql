type Transaction {
  id: ID!
  amount: Int!
  description: String!
  fee: Int
  created_at: Int! # TODO create a Date scalar
  # https://www.apollographql.com/docs/graphql-tools/scalars/
  hash: String
  usd: Float #TODO use Int and * 100
  sat: Int
  pending: Boolean
  type: String!
  feeUsd: Float # TODO: move to Int
  addresses: [String]
  username: String
}

type Price {
  id: ID!
  o: Float
}

type Earn {
  """
  the earn reward for the app to display their associated amount
  """
  id: ID!
  value: Int!
  completed: Boolean
}

type Wallet {
  id: ID
  currency: String # enum?
  balance: Int
  transactions: [Transaction]
  csv: String
}

type Balance {
  id: ID
  balance: Int
}

type Wallet2 {
  balances: [Balance]
  csv: String
  transactions: [Transaction]
}

type Contact {
  id: ID #username
  name: String #name can be set by the user
  transactionsCount: Int # number of transactions
}

type Invoice {
  addInvoice(
    value: Int @range(min: 0, policy: THROW)
    memo: String @stringLength(max: 1024, policy: THROW) # TODO: add limit on the mobile app
  ): String @pattern(regexp: "^ln[A-Za-z0-9]+$")

  updatePendingInvoice(
    hash: String!
      @stringLength(min: 64, max: 64, policy: THROW)
      @pattern(regexp: "^[A-Fa-f0-9]+$", policy: THROW)
  ): Boolean

  payInvoice(
    invoice: String! @pattern(regexp: "^ln[A-Za-z0-9]+$", policy: THROW)
    amount: Int @range(min: 0, policy: THROW)
    memo: String @stringLength(max: 1024, policy: THROW) # TODO: add limit on the mobile app
  ): String #FIXME: use a more precise type
  payKeysendUsername(
    amount: Int! @range(min: 0, policy: THROW)
    destination: String!
    username: String! @pattern(regexp: "^[A-Za-z0-9_]+$", policy: THROW)
    memo: String @stringLength(max: 1024, policy: THROW) # TODO: add limit on the mobile app
  ): String #FIXME: use a more precise type
  getFee(
    destination: String
    amount: Int @range(min: 0, policy: THROW)
    invoice: String @pattern(regexp: "^ln[A-Za-z0-9]+$", policy: THROW)
  ): Int # sats
}

type OnChain {
  getNewAddress: String

  pay(
    address: String! @pattern(regexp: "^[A-Za-z0-9]+$", policy: THROW)
    amount: Int! @range(min: 0, policy: THROW)
    memo: String @stringLength(max: 1024, policy: THROW) # TODO: add limit on the mobile app
  ): Success

  payAll(
    address: String! @pattern(regexp: "^[A-Za-z0-9]+$", policy: THROW)
    memo: String @stringLength(max: 1024, policy: THROW) # TODO: add limit on the mobile app
  ): Success

  getFee(
    address: String! @pattern(regexp: "^[A-Za-z0-9]+$", policy: THROW)
    amount: Int @range(min: 0, policy: THROW)
  ): Int # sats
}

type LastOnChainAddress {
  id: ID
}

type OnchainTransaction {
  tx: String
}

type User {
  id: ID
  username: String @pattern(regexp: "^[A-Za-z0-9_]+$")
  level: Int!
  phone: String
  contacts: [Contact]
  language: String
  title: String
  created_at: String
  coordinate: Coordinate
  status: AccountStatus
  twoFAEnabled: Boolean
}

type Success {
  success: Boolean
}

type Token {
  token: String
}

type BuildParameter {
  id: ID
  commitHash: String
  buildTime: String
  helmRevision: Int
  minBuildNumberAndroid: Int
  minBuildNumberIos: Int
  lastBuildNumberAndroid: Int
  lastBuildNumberIos: Int
}

type NodeStats {
  id: ID # nodePublicKey
  peersCount: Int
  channelsCount: Int
}

type Coordinate {
  latitude: Float
  longitude: Float
}

type Marker {
  id: ID
  title: String
  coordinate: Coordinate
  username: String
}

type Query {
  prices(length: Int): [Price]
  wallet: [Wallet]
  wallet2: [Wallet2]
  earnList: [Earn]
  me: User
  maps: [Marker]
  buildParameters(
    appVersion: String
    # @deprecated
    buildVersion: String
    # @deprecated
    os: String # @deprecated
  ): BuildParameter
  nodeStats: NodeStats @deprecated
  nodesStats: [NodeStats]

  getLastOnChainAddress: LastOnChainAddress

  usernameExists(
    username: String!
      @pattern(regexp: "^[A-Za-z0-9_]+$", policy: THROW)
      @stringLength(min: 3, max: 50, policy: THROW)
  ): Boolean

  noauthUpdatePendingInvoice(
    username: String!
      @pattern(regexp: "^[A-Za-z0-9_]+$", policy: THROW)
      @stringLength(min: 3, max: 50, policy: THROW)
    hash: String!
      @stringLength(min: 64, max: 64, policy: THROW)
      @pattern(regexp: "^[A-Fa-f0-9]+$", policy: THROW)
  ): Boolean

  getLimits: Limits
  getWalletFees: WalletFees
}

type WalletFees {
  deposit: Float
}

type Limits {
  withdrawal: Int
  onUs: Int
}

type UpdateUser {
  setLanguage(language: String): Boolean
  # @deprecated

  setUsername(
    username: String!
      @pattern(regexp: "^[A-Za-z0-9_]+$", policy: THROW)
      @stringLength(min: 3, max: 50, policy: THROW)
  ): Boolean
  # @deprecated

  updateLanguage(language: String!): User
  updateUsername(
    username: String!
      @pattern(regexp: "^[A-Za-z0-9_]+$", policy: THROW)
      @stringLength(min: 3, max: 50, policy: THROW)
  ): User
}

type UpdateContact {
  setName(
    username: String
      @pattern(regexp: "^[A-Za-z0-9_]+$", policy: THROW)
      @stringLength(min: 3, max: 50, policy: THROW)
    name: String @stringLength(min: 3, max: 50, policy: THROW) # TODO: integrate constraint in the mobile app
  ): Boolean
}

enum AccountStatus {
  active
  locked
}

type twoFASecret {
  secret: String
  uri: String
}

type Mutation {
  requestPhoneCode(phone: String @pattern(regexp: "^\\+[0-9]+$", policy: THROW)): Success

  login(
    phone: String @pattern(regexp: "^\\+[0-9]+$", policy: THROW)
    code: Int @range(min: 100000, max: 999999)
    currency: String # @deprecated(reason: "currency is no longer user. to be remove after mobile update")
  ): Token

  noauthAddInvoice(
    username: String!
      @pattern(regexp: "^[A-Za-z0-9_]+$", policy: THROW)
      @stringLength(min: 3, max: 50, policy: THROW)
    value: Int @range(min: 0, policy: THROW)
  ): String

  onchain: OnChain

  invoice: Invoice

  earnCompleted(ids: [ID]): [Earn]

  updateUser: UpdateUser

  updateContact: UpdateContact

  addDeviceToken(deviceToken: String): Success # to refactor with User?
  testMessage: Success # FIXME remove test
  generate2fa: twoFASecret

  save2fa(secret: String, token: String): Boolean

  delete2fa(token: String): Boolean
}

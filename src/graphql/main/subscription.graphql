interface Account {
  csvTransactions(walletIds: [WalletId!]!): String!
  defaultWalletId: WalletId!
  id: ID!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
    walletIds: [WalletId]
  ): TransactionConnection
  wallets: [Wallet!]!
}

"""
A wallet belonging to an account which contains a BTC balance and a list of transactions.
"""
type BTCWallet implements Wallet {
  accountId: ID!

  """
  A balance stored in BTC.
  """
  balance: SignedAmount!
  id: ID!

  """
  An unconfirmed incoming onchain balance.
  """
  pendingIncomingBalance: SignedAmount!

  """
  A list of BTC transactions associated with this wallet.
  """
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  transactionsByAddress(
    """
    Returns the items that include this address.
    """
    address: OnChainAddress!

    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  walletCurrency: WalletCurrency!
}

type ConsumerAccount implements Account {
  """
  return CSV stream, base64 encoded, of the list of transactions in the wallet
  """
  csvTransactions(walletIds: [WalletId!]!): String!
  defaultWalletId: WalletId!
  id: ID!

  """
  A list of all transactions associated with walletIds optionally passed.
  """
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
    walletIds: [WalletId]
  ): TransactionConnection
  wallets: [Wallet!]!
}

"""
An alias name that a user can set for a wallet (with which they have transactions)
"""
scalar ContactAlias

interface Error {
  code: String
  message: String!
  path: [String]
}

enum ExchangeCurrencyUnit {
  BTCSAT
  USDCENT
}

type GraphQLApplicationError implements Error {
  code: String
  message: String!
  path: [String]
}

union InitiationVia = InitiationViaIntraLedger | InitiationViaLn | InitiationViaOnChain

type InitiationViaIntraLedger {
  counterPartyUsername: Username
  counterPartyWalletId: WalletId
}

type InitiationViaLn {
  paymentHash: PaymentHash!
}

type InitiationViaOnChain {
  address: OnChainAddress!
}

type IntraLedgerUpdate {
  amount: SatAmount!
  displayCurrencyPerSat: Float!
  txNotificationType: TxNotificationType!
  usdPerSat: Float! @deprecated(reason: "updated over displayCurrencyPerSat")
  walletId: WalletId!
}

enum InvoicePaymentStatus {
  PAID
  PENDING
}

scalar Language

input LnInvoicePaymentStatusInput {
  paymentRequest: LnPaymentRequest!
}

type LnInvoicePaymentStatusPayload {
  errors: [Error!]!
  status: InvoicePaymentStatus
}

scalar LnPaymentPreImage

"""
BOLT11 lightning invoice payment request with the amount included
"""
scalar LnPaymentRequest

scalar LnPaymentSecret

type LnUpdate {
  paymentHash: PaymentHash!
  status: InvoicePaymentStatus!
  walletId: WalletId!
}

"""
Text field in a lightning payment transaction
"""
scalar Memo

type MyUpdatesPayload {
  errors: [Error!]!
  me: User
  update: UserUpdate
}

"""
An address for an on-chain bitcoin destination
"""
scalar OnChainAddress

scalar OnChainTxHash

type OnChainUpdate {
  amount: SatAmount!
  displayCurrencyPerSat: Float!
  txHash: OnChainTxHash!
  txNotificationType: TxNotificationType!
  usdPerSat: Float! @deprecated(reason: "updated over displayCurrencyPerSat")
  walletId: WalletId!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

scalar PaymentHash

"""
Phone number which includes country code
"""
scalar Phone

"""
Price amount expressed in base/offset. To calculate, use: `base / 10^offset`
"""
type Price {
  base: SafeInt!
  currencyUnit: ExchangeCurrencyUnit!
  formattedAmount: String!
  offset: Int!
}

input PriceInput {
  amount: SatAmount!
  amountCurrencyUnit: ExchangeCurrencyUnit!
  priceCurrencyUnit: ExchangeCurrencyUnit!
}

type PricePayload {
  errors: [Error!]!
  price: Price
}

type Query {
  _: String
}

type QuizQuestion {
  """
  The earn reward in Satoshis for the quiz question
  """
  earnAmount: SatAmount!
  id: ID!
}

"""
Non-fractional signed whole numeric value between -(2^53) + 1 and 2^53 - 1
"""
scalar SafeInt

"""
(Positive) Satoshi amount
"""
scalar SatAmount

union SettlementVia = SettlementViaIntraLedger | SettlementViaLn | SettlementViaOnChain

type SettlementViaIntraLedger {
  """
  Settlement destination: Could be null if the payee does not have a username
  """
  counterPartyUsername: Username
  counterPartyWalletId: WalletId
}

type SettlementViaLn {
  paymentSecret: LnPaymentSecret
    @deprecated(
      reason: "Shifting property to 'preImage' to improve granularity of the LnPaymentSecret type"
    )
  preImage: LnPaymentPreImage
}

type SettlementViaOnChain {
  transactionHash: OnChainTxHash!
}

"""
An amount (of a currency) that can be negative (e.g. in a transaction)
"""
scalar SignedAmount

type Subscription {
  lnInvoicePaymentStatus(
    input: LnInvoicePaymentStatusInput!
  ): LnInvoicePaymentStatusPayload!
  myUpdates: MyUpdatesPayload!
  price(input: PriceInput!): PricePayload!
}

"""
Timestamp field, serialized as Unix time (the number of seconds since the Unix epoch)
"""
scalar Timestamp

"""
Give details about an individual transaction.
Galoy have a smart routing system which is automatically
settling intraledger when both the payer and payee use the same wallet
therefore it's possible the transactions is being initiated onchain
or with lightning but settled intraledger.
"""
type Transaction {
  createdAt: Timestamp!
  direction: TxDirection!
  id: ID!

  """
  From which protocol the payment has been initiated.
  """
  initiationVia: InitiationVia!
  memo: Memo

  """
  Amount of the settlement currency sent or received.
  """
  settlementAmount: SignedAmount!

  """
  Wallet currency for transaction.
  """
  settlementCurrency: WalletCurrency!
  settlementFee: SignedAmount!

  """
  Price in USDCENT/SETTLEMENTUNIT at time of settlement.
  """
  settlementPrice: Price!

  """
  To which protocol the payment has settled on.
  """
  settlementVia: SettlementVia!
  status: TxStatus!
}

"""
A connection to a list of items.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: Transaction!
}

enum TxDirection {
  RECEIVE
  SEND
}

enum TxNotificationType {
  IntraLedgerPayment
  IntraLedgerReceipt
  LnInvoicePaid
  OnchainPayment
  OnchainReceipt
  OnchainReceiptPending
}

enum TxStatus {
  FAILURE
  PENDING
  SUCCESS
}

"""
A wallet belonging to an account which contains a USD balance and a list of transactions.
"""
type UsdWallet implements Wallet {
  accountId: ID!
  balance: SignedAmount!
  id: ID!

  """
  An unconfirmed incoming onchain balance.
  """
  pendingIncomingBalance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  transactionsByAddress(
    """
    Returns the items that include this address.
    """
    address: OnChainAddress!

    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  walletCurrency: WalletCurrency!
}

type User {
  """
  Get single contact details.
  Can include the transactions associated with the contact.
  """
  contactByUsername(username: Username!): UserContact!
    @deprecated(reason: "will be moved to Accounts")

  """
  Get full list of contacts.
  Can include the transactions associated with each contact.
  """
  contacts: [UserContact!]! @deprecated(reason: "will be moved to account")
  createdAt: Timestamp!
  defaultAccount: Account!
  id: ID!

  """
  Preferred language for user.
  When value is 'default' the intent is to use preferred language from OS settings.
  """
  language: Language!

  """
  Phone number with international calling code.
  """
  phone: Phone

  """
  List the quiz questions the user may have completed.
  """
  quizQuestions: [UserQuizQuestion!]! @deprecated(reason: "will be moved to Accounts")
  twoFAEnabled: Boolean

  """
  Optional immutable user friendly identifier.
  """
  username: Username @deprecated(reason: "will be moved to @Handle in Account and Wallet")
}

type UserContact {
  """
  Alias the user can set for this contact.
  Only the user can see the alias attached to their contact.
  """
  alias: ContactAlias
  id: Username!

  """
  Paginated list of transactions sent to/from this contact.
  """
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  transactionsCount: Int!

  """
  Actual identifier of the contact.
  """
  username: Username!
}

type UserQuizQuestion {
  completed: Boolean!
  question: QuizQuestion!
}

union UserUpdate = IntraLedgerUpdate | LnUpdate | OnChainUpdate | Price

"""
Unique identifier of a user
"""
scalar Username

"""
A generic wallet which stores value in one of our supported currencies.
"""
interface Wallet {
  accountId: ID!
  balance: SignedAmount!
  id: ID!
  pendingIncomingBalance: SignedAmount!

  """
  Transactions are ordered anti-chronologically,
  ie: the newest transaction will be first
  """
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection

  """
  Transactions are ordered anti-chronologically,
  ie: the newest transaction will be first
  """
  transactionsByAddress(
    """
    Returns the items that include this address.
    """
    address: OnChainAddress!

    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
  walletCurrency: WalletCurrency!
}

enum WalletCurrency {
  BTC
  USD
}

"""
Unique identifier of a wallet
"""
scalar WalletId

// this file is autogenerated by codegen
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An Opaque Bearer token */
  AuthToken: { input: any; output: any; }
  /** (Positive) Cent amount (1/100 of a dollar) */
  CentAmount: { input: any; output: any; }
  /** An alias name that a user can set for a wallet (with which they have transactions) */
  ContactAlias: { input: any; output: any; }
  /** A CCA2 country code (ex US, FR, etc) */
  CountryCode: { input: any; output: any; }
  /** Display currency of an account */
  DisplayCurrency: { input: any; output: any; }
  /** Email address */
  EmailAddress: { input: any; output: any; }
  /** An id to be passed between registrationInitiate and registrationValidate for confirming email */
  EmailRegistrationId: { input: any; output: any; }
  EndpointId: { input: any; output: any; }
  /** Url that will be fetched on events for the account */
  EndpointUrl: { input: any; output: any; }
  /** Feedback shared with our user */
  Feedback: { input: any; output: any; }
  /** Hex-encoded string of 32 bytes */
  Hex32Bytes: { input: any; output: any; }
  Language: { input: any; output: any; }
  LnPaymentPreImage: { input: any; output: any; }
  /** BOLT11 lightning invoice payment request with the amount included */
  LnPaymentRequest: { input: any; output: any; }
  LnPaymentSecret: { input: any; output: any; }
  /** Text field in a lightning payment transaction */
  Memo: { input: any; output: any; }
  /** (Positive) amount of minutes */
  Minutes: { input: any; output: any; }
  NotificationCategory: { input: any; output: any; }
  /** An address for an on-chain bitcoin destination */
  OnChainAddress: { input: any; output: any; }
  OnChainTxHash: { input: any; output: any; }
  /** An authentication code valid for a single use */
  OneTimeAuthCode: { input: any; output: any; }
  PaymentHash: { input: any; output: any; }
  /** Phone number which includes country code */
  Phone: { input: any; output: any; }
  /** Non-fractional signed whole numeric value between -(2^53) + 1 and 2^53 - 1 */
  SafeInt: { input: any; output: any; }
  /** (Positive) Satoshi amount */
  SatAmount: { input: any; output: any; }
  /** (Positive) amount of seconds */
  Seconds: { input: any; output: any; }
  /** An amount (of a currency) that can be negative (e.g. in a transaction) */
  SignedAmount: { input: any; output: any; }
  /** A string amount (of a currency) that can be negative (e.g. in a transaction) */
  SignedDisplayMajorAmount: { input: any; output: any; }
  /** Timestamp field, serialized as Unix time (the number of seconds since the Unix epoch) */
  Timestamp: { input: any; output: any; }
  /** A time-based one-time password */
  TotpCode: { input: any; output: any; }
  /** An id to be passed between set and verify for confirming totp */
  TotpRegistrationId: { input: any; output: any; }
  /** A secret to generate time-based one-time password */
  TotpSecret: { input: any; output: any; }
  /** Unique identifier of a user */
  Username: { input: any; output: any; }
  /** Unique identifier of a wallet */
  WalletId: { input: any; output: any; }
};

export type Account = {
  callbackEndpoints: Array<CallbackEndpoint>;
  csvTransactions: Scalars['String']['output'];
  defaultWallet: PublicWallet;
  /** @deprecated Shifting property to 'defaultWallet.id' */
  defaultWalletId: Scalars['WalletId']['output'];
  displayCurrency: Scalars['DisplayCurrency']['output'];
  id: Scalars['ID']['output'];
  invoices?: Maybe<InvoiceConnection>;
  level: AccountLevel;
  limits: AccountLimits;
  notificationSettings: NotificationSettings;
  pendingIncomingTransactions: Array<Transaction>;
  realtimePrice: RealtimePrice;
  transactions?: Maybe<TransactionConnection>;
  walletById: Wallet;
  wallets: Array<Wallet>;
};


export type AccountCsvTransactionsArgs = {
  walletIds: Array<Scalars['WalletId']['input']>;
};


export type AccountInvoicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  walletIds?: InputMaybe<Array<InputMaybe<Scalars['WalletId']['input']>>>;
};


export type AccountPendingIncomingTransactionsArgs = {
  walletIds?: InputMaybe<Array<InputMaybe<Scalars['WalletId']['input']>>>;
};


export type AccountTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  walletIds?: InputMaybe<Array<InputMaybe<Scalars['WalletId']['input']>>>;
};


export type AccountWalletByIdArgs = {
  walletId: Scalars['WalletId']['input'];
};

export type AccountDeletePayload = {
  __typename?: 'AccountDeletePayload';
  errors: Array<Error>;
  success: Scalars['Boolean']['output'];
};

export type AccountDisableNotificationCategoryInput = {
  category: Scalars['NotificationCategory']['input'];
  channel?: InputMaybe<NotificationChannel>;
};

export type AccountDisableNotificationChannelInput = {
  channel: NotificationChannel;
};

export type AccountEnableNotificationCategoryInput = {
  category: Scalars['NotificationCategory']['input'];
  channel?: InputMaybe<NotificationChannel>;
};

export type AccountEnableNotificationChannelInput = {
  channel: NotificationChannel;
};

export enum AccountLevel {
  One = 'ONE',
  Two = 'TWO',
  Zero = 'ZERO'
}

export type AccountLimit = {
  /** The rolling time interval in seconds that the limits would apply for. */
  interval?: Maybe<Scalars['Seconds']['output']>;
  /** The amount of cents remaining below the limit for the current 24 hour period. */
  remainingLimit?: Maybe<Scalars['CentAmount']['output']>;
  /** The current maximum limit for a given 24 hour period. */
  totalLimit: Scalars['CentAmount']['output'];
};

export type AccountLimits = {
  __typename?: 'AccountLimits';
  /** Limits for converting between currencies among a account's own wallets. */
  convert: Array<AccountLimit>;
  /** Limits for sending to other internal accounts. */
  internalSend: Array<AccountLimit>;
  /** Limits for withdrawing to external onchain or lightning destinations. */
  withdrawal: Array<AccountLimit>;
};

export type AccountUpdateDefaultWalletIdInput = {
  walletId: Scalars['WalletId']['input'];
};

export type AccountUpdateDefaultWalletIdPayload = {
  __typename?: 'AccountUpdateDefaultWalletIdPayload';
  account?: Maybe<ConsumerAccount>;
  errors: Array<Error>;
};

export type AccountUpdateDisplayCurrencyInput = {
  currency: Scalars['DisplayCurrency']['input'];
};

export type AccountUpdateDisplayCurrencyPayload = {
  __typename?: 'AccountUpdateDisplayCurrencyPayload';
  account?: Maybe<ConsumerAccount>;
  errors: Array<Error>;
};

export type AccountUpdateNotificationSettingsPayload = {
  __typename?: 'AccountUpdateNotificationSettingsPayload';
  account?: Maybe<ConsumerAccount>;
  errors: Array<Error>;
};

export type AuthTokenPayload = {
  __typename?: 'AuthTokenPayload';
  authToken?: Maybe<Scalars['AuthToken']['output']>;
  errors: Array<Error>;
  totpRequired?: Maybe<Scalars['Boolean']['output']>;
};

export type Authorization = {
  __typename?: 'Authorization';
  scopes: Array<Scope>;
};

/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWallet = Wallet & {
  __typename?: 'BTCWallet';
  accountId: Scalars['ID']['output'];
  /** A balance stored in BTC. */
  balance: Scalars['SignedAmount']['output'];
  id: Scalars['ID']['output'];
  invoiceByPaymentHash: Invoice;
  /** A list of all invoices associated with walletIds optionally passed. */
  invoices?: Maybe<InvoiceConnection>;
  /** An unconfirmed incoming onchain balance. */
  pendingIncomingBalance: Scalars['SignedAmount']['output'];
  pendingIncomingTransactions: Array<Transaction>;
  pendingIncomingTransactionsByAddress: Array<Transaction>;
  transactionById: Transaction;
  /** A list of BTC transactions associated with this wallet. */
  transactions?: Maybe<TransactionConnection>;
  transactionsByAddress?: Maybe<TransactionConnection>;
  transactionsByPaymentHash: Array<Transaction>;
  transactionsByPaymentRequest: Array<Transaction>;
  walletCurrency: WalletCurrency;
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletInvoiceByPaymentHashArgs = {
  paymentHash: Scalars['PaymentHash']['input'];
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletInvoicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletPendingIncomingTransactionsByAddressArgs = {
  address: Scalars['OnChainAddress']['input'];
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletTransactionByIdArgs = {
  transactionId: Scalars['ID']['input'];
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletTransactionsByAddressArgs = {
  address: Scalars['OnChainAddress']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletTransactionsByPaymentHashArgs = {
  paymentHash: Scalars['PaymentHash']['input'];
};


/** A wallet belonging to an account which contains a BTC balance and a list of transactions. */
export type BtcWalletTransactionsByPaymentRequestArgs = {
  paymentRequest: Scalars['LnPaymentRequest']['input'];
};

export type BuildInformation = {
  __typename?: 'BuildInformation';
  commitHash?: Maybe<Scalars['String']['output']>;
  helmRevision?: Maybe<Scalars['Int']['output']>;
};

export type CallbackEndpoint = {
  __typename?: 'CallbackEndpoint';
  id: Scalars['EndpointId']['output'];
  url: Scalars['EndpointUrl']['output'];
};

export type CallbackEndpointAddInput = {
  /** callback endpoint to be called */
  url: Scalars['EndpointUrl']['input'];
};

export type CallbackEndpointAddPayload = {
  __typename?: 'CallbackEndpointAddPayload';
  errors: Array<Error>;
  id?: Maybe<Scalars['EndpointId']['output']>;
};

export type CallbackEndpointDeleteInput = {
  id: Scalars['EndpointId']['input'];
};

export type CaptchaCreateChallengePayload = {
  __typename?: 'CaptchaCreateChallengePayload';
  errors: Array<Error>;
  result?: Maybe<CaptchaCreateChallengeResult>;
};

export type CaptchaCreateChallengeResult = {
  __typename?: 'CaptchaCreateChallengeResult';
  challengeCode: Scalars['String']['output'];
  failbackMode: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  newCaptcha: Scalars['Boolean']['output'];
};

export type CaptchaRequestAuthCodeInput = {
  challengeCode: Scalars['String']['input'];
  channel?: InputMaybe<PhoneCodeChannelType>;
  phone: Scalars['Phone']['input'];
  secCode: Scalars['String']['input'];
  validationCode: Scalars['String']['input'];
};

export type CentAmountPayload = {
  __typename?: 'CentAmountPayload';
  amount?: Maybe<Scalars['CentAmount']['output']>;
  errors: Array<Error>;
};

export type ConsumerAccount = Account & {
  __typename?: 'ConsumerAccount';
  callbackEndpoints: Array<CallbackEndpoint>;
  /** return CSV stream, base64 encoded, of the list of transactions in the wallet */
  csvTransactions: Scalars['String']['output'];
  defaultWallet: PublicWallet;
  defaultWalletId: Scalars['WalletId']['output'];
  displayCurrency: Scalars['DisplayCurrency']['output'];
  id: Scalars['ID']['output'];
  /** A list of all invoices associated with walletIds optionally passed. */
  invoices?: Maybe<InvoiceConnection>;
  level: AccountLevel;
  limits: AccountLimits;
  notificationSettings: NotificationSettings;
  pendingIncomingTransactions: Array<Transaction>;
  /** List the quiz questions of the consumer account */
  quiz: Array<Quiz>;
  realtimePrice: RealtimePrice;
  /** A list of all transactions associated with walletIds optionally passed. */
  transactions?: Maybe<TransactionConnection>;
  walletById: Wallet;
  wallets: Array<Wallet>;
};


export type ConsumerAccountCsvTransactionsArgs = {
  walletIds: Array<Scalars['WalletId']['input']>;
};


export type ConsumerAccountInvoicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  walletIds?: InputMaybe<Array<InputMaybe<Scalars['WalletId']['input']>>>;
};


export type ConsumerAccountPendingIncomingTransactionsArgs = {
  walletIds?: InputMaybe<Array<InputMaybe<Scalars['WalletId']['input']>>>;
};


export type ConsumerAccountTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  walletIds?: InputMaybe<Array<InputMaybe<Scalars['WalletId']['input']>>>;
};


export type ConsumerAccountWalletByIdArgs = {
  walletId: Scalars['WalletId']['input'];
};

export type Coordinates = {
  __typename?: 'Coordinates';
  latitude: Scalars['Float']['output'];
  longitude: Scalars['Float']['output'];
};

export type Country = {
  __typename?: 'Country';
  id: Scalars['CountryCode']['output'];
  supportedAuthChannels: Array<PhoneCodeChannelType>;
};

export type CreateWithdrawLinkInput = {
  commissionPercentage?: InputMaybe<Scalars['Float']['input']>;
  voucherAmountInCents: Scalars['Float']['input'];
  walletId: Scalars['ID']['input'];
};

export type Currency = {
  __typename?: 'Currency';
  flag: Scalars['String']['output'];
  fractionDigits: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  symbol: Scalars['String']['output'];
};

export type CurrencyConversionEstimation = {
  __typename?: 'CurrencyConversionEstimation';
  /** Amount in satoshis. */
  btcSatAmount: Scalars['SatAmount']['output'];
  id: Scalars['ID']['output'];
  /** Unix timestamp (number of seconds elapsed since January 1, 1970 00:00:00 UTC) */
  timestamp: Scalars['Timestamp']['output'];
  /** Amount in USD cents. */
  usdCentAmount: Scalars['CentAmount']['output'];
};

export type DepositFeesInformation = {
  __typename?: 'DepositFeesInformation';
  minBankFee: Scalars['String']['output'];
  /** below this amount minBankFee will be charged */
  minBankFeeThreshold: Scalars['String']['output'];
  /** ratio to charge as basis points above minBankFeeThreshold amount */
  ratio: Scalars['String']['output'];
};

export type DeviceNotificationTokenCreateInput = {
  deviceToken: Scalars['String']['input'];
};

export type Email = {
  __typename?: 'Email';
  address?: Maybe<Scalars['EmailAddress']['output']>;
  verified?: Maybe<Scalars['Boolean']['output']>;
};

export type Error = {
  code?: Maybe<Scalars['String']['output']>;
  message: Scalars['String']['output'];
  path?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export enum ExchangeCurrencyUnit {
  Btcsat = 'BTCSAT',
  Usdcent = 'USDCENT'
}

export type FeedbackSubmitInput = {
  feedback: Scalars['Feedback']['input'];
};

export type FeesInformation = {
  __typename?: 'FeesInformation';
  deposit: DepositFeesInformation;
};

/** Provides global settings for the application which might have an impact for the user. */
export type Globals = {
  __typename?: 'Globals';
  buildInformation: BuildInformation;
  feesInformation: FeesInformation;
  /** The domain name for lightning addresses accepted by this Galoy instance */
  lightningAddressDomain: Scalars['String']['output'];
  lightningAddressDomainAliases: Array<Scalars['String']['output']>;
  /** Which network (mainnet, testnet, regtest, signet) this instance is running on. */
  network: Network;
  /**
   * A list of public keys for the running lightning nodes.
   * This can be used to know if an invoice belongs to one of our nodes.
   */
  nodesIds: Array<Scalars['String']['output']>;
  /** A list of countries and their supported auth channels */
  supportedCountries: Array<Country>;
};

export type GraphQlApplicationError = Error & {
  __typename?: 'GraphQLApplicationError';
  code?: Maybe<Scalars['String']['output']>;
  message: Scalars['String']['output'];
  path?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type InitiationVia = InitiationViaIntraLedger | InitiationViaLn | InitiationViaOnChain;

export type InitiationViaIntraLedger = {
  __typename?: 'InitiationViaIntraLedger';
  counterPartyUsername?: Maybe<Scalars['Username']['output']>;
  counterPartyWalletId?: Maybe<Scalars['WalletId']['output']>;
};

export type InitiationViaLn = {
  __typename?: 'InitiationViaLn';
  paymentHash: Scalars['PaymentHash']['output'];
  /** Bolt11 invoice */
  paymentRequest: Scalars['LnPaymentRequest']['output'];
};

export type InitiationViaOnChain = {
  __typename?: 'InitiationViaOnChain';
  address: Scalars['OnChainAddress']['output'];
};

export type IntraLedgerPaymentSendInput = {
  /** Amount in satoshis. */
  amount: Scalars['SatAmount']['input'];
  /** Optional memo to be attached to the payment. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  recipientWalletId: Scalars['WalletId']['input'];
  /** The wallet ID of the sender. */
  walletId: Scalars['WalletId']['input'];
};

export type IntraLedgerUpdate = {
  __typename?: 'IntraLedgerUpdate';
  /** @deprecated Deprecated in favor of transaction */
  amount: Scalars['SatAmount']['output'];
  /** @deprecated Deprecated in favor of transaction */
  displayCurrencyPerSat: Scalars['Float']['output'];
  transaction: Transaction;
  txNotificationType: TxNotificationType;
  /** @deprecated updated over displayCurrencyPerSat */
  usdPerSat: Scalars['Float']['output'];
  /** @deprecated Deprecated in favor of transaction */
  walletId: Scalars['WalletId']['output'];
};

export type IntraLedgerUsdPaymentSendInput = {
  /** Amount in cents. */
  amount: Scalars['CentAmount']['input'];
  /** Optional memo to be attached to the payment. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  recipientWalletId: Scalars['WalletId']['input'];
  /** The wallet ID of the sender. */
  walletId: Scalars['WalletId']['input'];
};

/** A lightning invoice. */
export type Invoice = {
  createdAt: Scalars['Timestamp']['output'];
  /** The payment hash of the lightning invoice. */
  paymentHash: Scalars['PaymentHash']['output'];
  /** The bolt11 invoice to be paid. */
  paymentRequest: Scalars['LnPaymentRequest']['output'];
  /** The payment secret of the lightning invoice. This is not the preimage of the payment hash. */
  paymentSecret: Scalars['LnPaymentSecret']['output'];
  /** The payment status of the invoice. */
  paymentStatus: InvoicePaymentStatus;
};

/** A connection to a list of items. */
export type InvoiceConnection = {
  __typename?: 'InvoiceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<InvoiceEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type InvoiceEdge = {
  __typename?: 'InvoiceEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Invoice;
};

export enum InvoicePaymentStatus {
  Expired = 'EXPIRED',
  Paid = 'PAID',
  Pending = 'PENDING'
}

export type LnAddressPaymentSendInput = {
  /** Amount in satoshis. */
  amount: Scalars['SatAmount']['input'];
  /** Lightning address to send to. */
  lnAddress: Scalars['String']['input'];
  /** Wallet ID to send bitcoin from. */
  walletId: Scalars['WalletId']['input'];
};

export type LnInvoice = Invoice & {
  __typename?: 'LnInvoice';
  createdAt: Scalars['Timestamp']['output'];
  paymentHash: Scalars['PaymentHash']['output'];
  paymentRequest: Scalars['LnPaymentRequest']['output'];
  paymentSecret: Scalars['LnPaymentSecret']['output'];
  paymentStatus: InvoicePaymentStatus;
  satoshis: Scalars['SatAmount']['output'];
};

export type LnInvoiceCancelInput = {
  paymentHash: Scalars['PaymentHash']['input'];
  /** Wallet ID for a wallet associated with the current account. */
  walletId: Scalars['WalletId']['input'];
};

export type LnInvoiceCreateInput = {
  /** Amount in satoshis. */
  amount: Scalars['SatAmount']['input'];
  /** Optional invoice expiration time in minutes. */
  expiresIn?: InputMaybe<Scalars['Minutes']['input']>;
  /** Optional memo for the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Wallet ID for a BTC wallet belonging to the current account. */
  walletId: Scalars['WalletId']['input'];
};

export type LnInvoiceCreateOnBehalfOfRecipientInput = {
  /** Amount in satoshis. */
  amount: Scalars['SatAmount']['input'];
  descriptionHash?: InputMaybe<Scalars['Hex32Bytes']['input']>;
  /** Optional invoice expiration time in minutes. */
  expiresIn?: InputMaybe<Scalars['Minutes']['input']>;
  /** Optional memo for the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Wallet ID for a BTC wallet which belongs to any account. */
  recipientWalletId: Scalars['WalletId']['input'];
};

export type LnInvoiceFeeProbeInput = {
  paymentRequest: Scalars['LnPaymentRequest']['input'];
  walletId: Scalars['WalletId']['input'];
};

export type LnInvoicePayload = {
  __typename?: 'LnInvoicePayload';
  errors: Array<Error>;
  invoice?: Maybe<LnInvoice>;
};

export type LnInvoicePaymentInput = {
  /** Optional memo to associate with the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Payment request representing the invoice which is being paid. */
  paymentRequest: Scalars['LnPaymentRequest']['input'];
  /** Wallet ID with sufficient balance to cover amount of invoice.  Must belong to the account of the current user. */
  walletId: Scalars['WalletId']['input'];
};

export type LnInvoicePaymentStatus = {
  __typename?: 'LnInvoicePaymentStatus';
  paymentHash?: Maybe<Scalars['PaymentHash']['output']>;
  paymentRequest?: Maybe<Scalars['LnPaymentRequest']['output']>;
  status?: Maybe<InvoicePaymentStatus>;
};

export type LnInvoicePaymentStatusByHashInput = {
  paymentHash: Scalars['PaymentHash']['input'];
};

export type LnInvoicePaymentStatusByPaymentRequestInput = {
  paymentRequest: Scalars['LnPaymentRequest']['input'];
};

export type LnInvoicePaymentStatusInput = {
  paymentRequest: Scalars['LnPaymentRequest']['input'];
};

export type LnInvoicePaymentStatusPayload = {
  __typename?: 'LnInvoicePaymentStatusPayload';
  errors: Array<Error>;
  paymentHash?: Maybe<Scalars['PaymentHash']['output']>;
  paymentRequest?: Maybe<Scalars['LnPaymentRequest']['output']>;
  status?: Maybe<InvoicePaymentStatus>;
};

export type LnNoAmountInvoice = Invoice & {
  __typename?: 'LnNoAmountInvoice';
  createdAt: Scalars['Timestamp']['output'];
  paymentHash: Scalars['PaymentHash']['output'];
  paymentRequest: Scalars['LnPaymentRequest']['output'];
  paymentSecret: Scalars['LnPaymentSecret']['output'];
  paymentStatus: InvoicePaymentStatus;
};

export type LnNoAmountInvoiceCreateInput = {
  /** Optional invoice expiration time in minutes. */
  expiresIn?: InputMaybe<Scalars['Minutes']['input']>;
  /** Optional memo for the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** ID for either a USD or BTC wallet belonging to the account of the current user. */
  walletId: Scalars['WalletId']['input'];
};

export type LnNoAmountInvoiceCreateOnBehalfOfRecipientInput = {
  /** Optional invoice expiration time in minutes. */
  expiresIn?: InputMaybe<Scalars['Minutes']['input']>;
  /** Optional memo for the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** ID for either a USD or BTC wallet which belongs to the account of any user. */
  recipientWalletId: Scalars['WalletId']['input'];
};

export type LnNoAmountInvoiceFeeProbeInput = {
  amount: Scalars['SatAmount']['input'];
  paymentRequest: Scalars['LnPaymentRequest']['input'];
  walletId: Scalars['WalletId']['input'];
};

export type LnNoAmountInvoicePayload = {
  __typename?: 'LnNoAmountInvoicePayload';
  errors: Array<Error>;
  invoice?: Maybe<LnNoAmountInvoice>;
};

export type LnNoAmountInvoicePaymentInput = {
  /** Amount to pay in satoshis. */
  amount: Scalars['SatAmount']['input'];
  /** Optional memo to associate with the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Payment request representing the invoice which is being paid. */
  paymentRequest: Scalars['LnPaymentRequest']['input'];
  /** Wallet ID with sufficient balance to cover amount defined in mutation request.  Must belong to the account of the current user. */
  walletId: Scalars['WalletId']['input'];
};

export type LnNoAmountUsdInvoiceFeeProbeInput = {
  amount: Scalars['CentAmount']['input'];
  paymentRequest: Scalars['LnPaymentRequest']['input'];
  walletId: Scalars['WalletId']['input'];
};

export type LnNoAmountUsdInvoicePaymentInput = {
  /** Amount to pay in USD cents. */
  amount: Scalars['CentAmount']['input'];
  /** Optional memo to associate with the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Payment request representing the invoice which is being paid. */
  paymentRequest: Scalars['LnPaymentRequest']['input'];
  /** Wallet ID with sufficient balance to cover amount defined in mutation request.  Must belong to the account of the current user. */
  walletId: Scalars['WalletId']['input'];
};

export type LnUpdate = {
  __typename?: 'LnUpdate';
  /** @deprecated Deprecated in favor of transaction */
  paymentHash: Scalars['PaymentHash']['output'];
  status: InvoicePaymentStatus;
  transaction: Transaction;
  /** @deprecated Deprecated in favor of transaction */
  walletId: Scalars['WalletId']['output'];
};

export type LnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientInput = {
  /** Amount in satoshis. */
  amount: Scalars['SatAmount']['input'];
  descriptionHash?: InputMaybe<Scalars['Hex32Bytes']['input']>;
  /** Optional invoice expiration time in minutes. */
  expiresIn?: InputMaybe<Scalars['Minutes']['input']>;
  /** Optional memo for the lightning invoice. Acts as a note to the recipient. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Wallet ID for a USD wallet which belongs to the account of any user. */
  recipientWalletId: Scalars['WalletId']['input'];
};

export type LnUsdInvoiceCreateInput = {
  /** Amount in USD cents. */
  amount: Scalars['CentAmount']['input'];
  /** Optional invoice expiration time in minutes. */
  expiresIn?: InputMaybe<Scalars['Minutes']['input']>;
  /** Optional memo for the lightning invoice. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Wallet ID for a USD wallet belonging to the current user. */
  walletId: Scalars['WalletId']['input'];
};

export type LnUsdInvoiceCreateOnBehalfOfRecipientInput = {
  /** Amount in USD cents. */
  amount: Scalars['CentAmount']['input'];
  descriptionHash?: InputMaybe<Scalars['Hex32Bytes']['input']>;
  /** Optional invoice expiration time in minutes. */
  expiresIn?: InputMaybe<Scalars['Minutes']['input']>;
  /** Optional memo for the lightning invoice. Acts as a note to the recipient. */
  memo?: InputMaybe<Scalars['Memo']['input']>;
  /** Wallet ID for a USD wallet which belongs to the account of any user. */
  recipientWalletId: Scalars['WalletId']['input'];
};

export type LnUsdInvoiceFeeProbeInput = {
  paymentRequest: Scalars['LnPaymentRequest']['input'];
  walletId: Scalars['WalletId']['input'];
};

export type LnurlPaymentSendInput = {
  /** Amount in satoshis. */
  amount: Scalars['SatAmount']['input'];
  /** Lnurl string to send to. */
  lnurl: Scalars['String']['input'];
  /** Wallet ID to send bitcoin from. */
  walletId: Scalars['WalletId']['input'];
};

export type MapInfo = {
  __typename?: 'MapInfo';
  coordinates: Coordinates;
  title: Scalars['String']['output'];
};

export type MapMarker = {
  __typename?: 'MapMarker';
  mapInfo: MapInfo;
  username: Scalars['Username']['output'];
};

export type Merchant = {
  __typename?: 'Merchant';
  /** GPS coordinates for the merchant that can be used to place the related business on a map */
  coordinates: Coordinates;
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  /** The username of the merchant */
  username: Scalars['Username']['output'];
  /** Whether the merchant has been validated */
  validated: Scalars['Boolean']['output'];
};

export type MerchantMapSuggestInput = {
  latitude: Scalars['Float']['input'];
  longitude: Scalars['Float']['input'];
  title: Scalars['String']['input'];
  username: Scalars['Username']['input'];
};

export type MerchantPayload = {
  __typename?: 'MerchantPayload';
  errors: Array<Error>;
  merchant?: Maybe<Merchant>;
};

export type MobileVersions = {
  __typename?: 'MobileVersions';
  currentSupported: Scalars['Int']['output'];
  minSupported: Scalars['Int']['output'];
  platform: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  accountDelete: AccountDeletePayload;
  accountDisableNotificationCategory: AccountUpdateNotificationSettingsPayload;
  accountDisableNotificationChannel: AccountUpdateNotificationSettingsPayload;
  accountEnableNotificationCategory: AccountUpdateNotificationSettingsPayload;
  accountEnableNotificationChannel: AccountUpdateNotificationSettingsPayload;
  accountUpdateDefaultWalletId: AccountUpdateDefaultWalletIdPayload;
  accountUpdateDisplayCurrency: AccountUpdateDisplayCurrencyPayload;
  callbackEndpointAdd: CallbackEndpointAddPayload;
  callbackEndpointDelete: SuccessPayload;
  captchaCreateChallenge: CaptchaCreateChallengePayload;
  captchaRequestAuthCode: SuccessPayload;
  createWithdrawLink: WithdrawLinkWithSecret;
  deviceNotificationTokenCreate: SuccessPayload;
  feedbackSubmit: SuccessPayload;
  /**
   * Actions a payment which is internal to the ledger e.g. it does
   * not use onchain/lightning. Returns payment status (success,
   * failed, pending, already_paid).
   */
  intraLedgerPaymentSend: PaymentSendPayload;
  /**
   * Actions a payment which is internal to the ledger e.g. it does
   * not use onchain/lightning. Returns payment status (success,
   * failed, pending, already_paid).
   */
  intraLedgerUsdPaymentSend: PaymentSendPayload;
  /** Sends a payment to a lightning address. */
  lnAddressPaymentSend: PaymentSendPayload;
  /** Cancel an unpaid lightning invoice for an associated wallet. */
  lnInvoiceCancel: SuccessPayload;
  /**
   * Returns a lightning invoice for an associated wallet.
   * When invoice is paid the value will be credited to a BTC wallet.
   * Expires after 'expiresIn' or 24 hours.
   */
  lnInvoiceCreate: LnInvoicePayload;
  /**
   * Returns a lightning invoice for an associated wallet.
   * When invoice is paid the value will be credited to a BTC wallet.
   * Expires after 'expiresIn' or 24 hours.
   */
  lnInvoiceCreateOnBehalfOfRecipient: LnInvoicePayload;
  lnInvoiceFeeProbe: SatAmountPayload;
  /**
   * Pay a lightning invoice using a balance from a wallet which is owned by the account of the current user.
   * Provided wallet can be USD or BTC and must have sufficient balance to cover amount in lightning invoice.
   * Returns payment status (success, failed, pending, already_paid).
   */
  lnInvoicePaymentSend: PaymentSendPayload;
  /**
   * Returns a lightning invoice for an associated wallet.
   * Can be used to receive any supported currency value (currently USD or BTC).
   * Expires after 'expiresIn' or 24 hours for BTC invoices or 5 minutes for USD invoices.
   */
  lnNoAmountInvoiceCreate: LnNoAmountInvoicePayload;
  /**
   * Returns a lightning invoice for an associated wallet.
   * Can be used to receive any supported currency value (currently USD or BTC).
   * Expires after 'expiresIn' or 24 hours for BTC invoices or 5 minutes for USD invoices.
   */
  lnNoAmountInvoiceCreateOnBehalfOfRecipient: LnNoAmountInvoicePayload;
  lnNoAmountInvoiceFeeProbe: SatAmountPayload;
  /**
   * Pay a lightning invoice using a balance from a wallet which is owned by the account of the current user.
   * Provided wallet must be BTC and must have sufficient balance to cover amount specified in mutation request.
   * Returns payment status (success, failed, pending, already_paid).
   */
  lnNoAmountInvoicePaymentSend: PaymentSendPayload;
  lnNoAmountUsdInvoiceFeeProbe: CentAmountPayload;
  /**
   * Pay a lightning invoice using a balance from a wallet which is owned by the account of the current user.
   * Provided wallet must be USD and have sufficient balance to cover amount specified in mutation request.
   * Returns payment status (success, failed, pending, already_paid).
   */
  lnNoAmountUsdInvoicePaymentSend: PaymentSendPayload;
  /**
   * Returns a lightning invoice denominated in satoshis for an associated wallet.
   * When invoice is paid the equivalent value at invoice creation will be credited to a USD wallet.
   * Expires after 'expiresIn' or 5 minutes (short expiry time because there is a USD/BTC exchange rate
   *   associated with the amount).
   */
  lnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipient: LnInvoicePayload;
  /**
   * Returns a lightning invoice denominated in satoshis for an associated wallet.
   * When invoice is paid the equivalent value at invoice creation will be credited to a USD wallet.
   * Expires after 'expiresIn' or 5 minutes (short expiry time because there is a USD/BTC exchange rate
   * associated with the amount).
   */
  lnUsdInvoiceCreate: LnInvoicePayload;
  /**
   * Returns a lightning invoice denominated in satoshis for an associated wallet.
   * When invoice is paid the equivalent value at invoice creation will be credited to a USD wallet.
   * Expires after 'expiresIn' or 5 minutes (short expiry time because there is a USD/BTC exchange rate
   *   associated with the amount).
   */
  lnUsdInvoiceCreateOnBehalfOfRecipient: LnInvoicePayload;
  lnUsdInvoiceFeeProbe: SatAmountPayload;
  /** Sends a payment to a lightning address. */
  lnurlPaymentSend: PaymentSendPayload;
  merchantMapSuggest: MerchantPayload;
  onChainAddressCreate: OnChainAddressPayload;
  onChainAddressCurrent: OnChainAddressPayload;
  onChainPaymentSend: PaymentSendPayload;
  onChainPaymentSendAll: PaymentSendPayload;
  onChainUsdPaymentSend: PaymentSendPayload;
  onChainUsdPaymentSendAsBtcDenominated: PaymentSendPayload;
  quizClaim: QuizClaimPayload;
  redeemWithdrawLinkOnChain: RedeemWithdrawLinkOnChainResult;
  supportChatMessageAdd: SupportChatMessageAddPayload;
  /** @deprecated will be moved to AccountContact */
  userContactUpdateAlias: UserContactUpdateAliasPayload;
  userEmailDelete: UserEmailDeletePayload;
  userEmailRegistrationInitiate: UserEmailRegistrationInitiatePayload;
  userEmailRegistrationValidate: UserEmailRegistrationValidatePayload;
  userLogin: AuthTokenPayload;
  userLoginUpgrade: UpgradePayload;
  userLogout: SuccessPayload;
  userPhoneDelete: UserPhoneDeletePayload;
  userPhoneRegistrationInitiate: SuccessPayload;
  userPhoneRegistrationValidate: UserPhoneRegistrationValidatePayload;
  userTotpDelete: UserTotpDeletePayload;
  userTotpRegistrationInitiate: UserTotpRegistrationInitiatePayload;
  userTotpRegistrationValidate: UserTotpRegistrationValidatePayload;
  userUpdateLanguage: UserUpdateLanguagePayload;
  /** @deprecated Username will be moved to @Handle in Accounts. Also SetUsername naming should be used instead of UpdateUsername to reflect the idempotency of Handles */
  userUpdateUsername: UserUpdateUsernamePayload;
};


export type MutationAccountDisableNotificationCategoryArgs = {
  input: AccountDisableNotificationCategoryInput;
};


export type MutationAccountDisableNotificationChannelArgs = {
  input: AccountDisableNotificationChannelInput;
};


export type MutationAccountEnableNotificationCategoryArgs = {
  input: AccountEnableNotificationCategoryInput;
};


export type MutationAccountEnableNotificationChannelArgs = {
  input: AccountEnableNotificationChannelInput;
};


export type MutationAccountUpdateDefaultWalletIdArgs = {
  input: AccountUpdateDefaultWalletIdInput;
};


export type MutationAccountUpdateDisplayCurrencyArgs = {
  input: AccountUpdateDisplayCurrencyInput;
};


export type MutationCallbackEndpointAddArgs = {
  input: CallbackEndpointAddInput;
};


export type MutationCallbackEndpointDeleteArgs = {
  input: CallbackEndpointDeleteInput;
};


export type MutationCaptchaRequestAuthCodeArgs = {
  input: CaptchaRequestAuthCodeInput;
};


export type MutationCreateWithdrawLinkArgs = {
  input: CreateWithdrawLinkInput;
};


export type MutationDeviceNotificationTokenCreateArgs = {
  input: DeviceNotificationTokenCreateInput;
};


export type MutationFeedbackSubmitArgs = {
  input: FeedbackSubmitInput;
};


export type MutationIntraLedgerPaymentSendArgs = {
  input: IntraLedgerPaymentSendInput;
};


export type MutationIntraLedgerUsdPaymentSendArgs = {
  input: IntraLedgerUsdPaymentSendInput;
};


export type MutationLnAddressPaymentSendArgs = {
  input: LnAddressPaymentSendInput;
};


export type MutationLnInvoiceCancelArgs = {
  input: LnInvoiceCancelInput;
};


export type MutationLnInvoiceCreateArgs = {
  input: LnInvoiceCreateInput;
};


export type MutationLnInvoiceCreateOnBehalfOfRecipientArgs = {
  input: LnInvoiceCreateOnBehalfOfRecipientInput;
};


export type MutationLnInvoiceFeeProbeArgs = {
  input: LnInvoiceFeeProbeInput;
};


export type MutationLnInvoicePaymentSendArgs = {
  input: LnInvoicePaymentInput;
};


export type MutationLnNoAmountInvoiceCreateArgs = {
  input: LnNoAmountInvoiceCreateInput;
};


export type MutationLnNoAmountInvoiceCreateOnBehalfOfRecipientArgs = {
  input: LnNoAmountInvoiceCreateOnBehalfOfRecipientInput;
};


export type MutationLnNoAmountInvoiceFeeProbeArgs = {
  input: LnNoAmountInvoiceFeeProbeInput;
};


export type MutationLnNoAmountInvoicePaymentSendArgs = {
  input: LnNoAmountInvoicePaymentInput;
};


export type MutationLnNoAmountUsdInvoiceFeeProbeArgs = {
  input: LnNoAmountUsdInvoiceFeeProbeInput;
};


export type MutationLnNoAmountUsdInvoicePaymentSendArgs = {
  input: LnNoAmountUsdInvoicePaymentInput;
};


export type MutationLnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientArgs = {
  input: LnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientInput;
};


export type MutationLnUsdInvoiceCreateArgs = {
  input: LnUsdInvoiceCreateInput;
};


export type MutationLnUsdInvoiceCreateOnBehalfOfRecipientArgs = {
  input: LnUsdInvoiceCreateOnBehalfOfRecipientInput;
};


export type MutationLnUsdInvoiceFeeProbeArgs = {
  input: LnUsdInvoiceFeeProbeInput;
};


export type MutationLnurlPaymentSendArgs = {
  input: LnurlPaymentSendInput;
};


export type MutationMerchantMapSuggestArgs = {
  input: MerchantMapSuggestInput;
};


export type MutationOnChainAddressCreateArgs = {
  input: OnChainAddressCreateInput;
};


export type MutationOnChainAddressCurrentArgs = {
  input: OnChainAddressCurrentInput;
};


export type MutationOnChainPaymentSendArgs = {
  input: OnChainPaymentSendInput;
};


export type MutationOnChainPaymentSendAllArgs = {
  input: OnChainPaymentSendAllInput;
};


export type MutationOnChainUsdPaymentSendArgs = {
  input: OnChainUsdPaymentSendInput;
};


export type MutationOnChainUsdPaymentSendAsBtcDenominatedArgs = {
  input: OnChainUsdPaymentSendAsBtcDenominatedInput;
};


export type MutationQuizClaimArgs = {
  input: QuizClaimInput;
};


export type MutationRedeemWithdrawLinkOnChainArgs = {
  input: RedeemWithdrawLinkOnChainInput;
};


export type MutationSupportChatMessageAddArgs = {
  input: SupportChatMessageAddInput;
};


export type MutationUserContactUpdateAliasArgs = {
  input: UserContactUpdateAliasInput;
};


export type MutationUserEmailRegistrationInitiateArgs = {
  input: UserEmailRegistrationInitiateInput;
};


export type MutationUserEmailRegistrationValidateArgs = {
  input: UserEmailRegistrationValidateInput;
};


export type MutationUserLoginArgs = {
  input: UserLoginInput;
};


export type MutationUserLoginUpgradeArgs = {
  input: UserLoginUpgradeInput;
};


export type MutationUserLogoutArgs = {
  input?: InputMaybe<UserLogoutInput>;
};


export type MutationUserPhoneRegistrationInitiateArgs = {
  input: UserPhoneRegistrationInitiateInput;
};


export type MutationUserPhoneRegistrationValidateArgs = {
  input: UserPhoneRegistrationValidateInput;
};


export type MutationUserTotpRegistrationValidateArgs = {
  input: UserTotpRegistrationValidateInput;
};


export type MutationUserUpdateLanguageArgs = {
  input: UserUpdateLanguageInput;
};


export type MutationUserUpdateUsernameArgs = {
  input: UserUpdateUsernameInput;
};

export type MyUpdatesPayload = {
  __typename?: 'MyUpdatesPayload';
  errors: Array<Error>;
  me?: Maybe<User>;
  update?: Maybe<UserUpdate>;
};

export enum Network {
  Mainnet = 'mainnet',
  Regtest = 'regtest',
  Signet = 'signet',
  Testnet = 'testnet'
}

export enum NotificationChannel {
  Push = 'PUSH'
}

export type NotificationChannelSettings = {
  __typename?: 'NotificationChannelSettings';
  disabledCategories: Array<Scalars['NotificationCategory']['output']>;
  enabled: Scalars['Boolean']['output'];
};

export type NotificationSettings = {
  __typename?: 'NotificationSettings';
  push: NotificationChannelSettings;
};

export type OnChainAddressCreateInput = {
  walletId: Scalars['WalletId']['input'];
};

export type OnChainAddressCurrentInput = {
  walletId: Scalars['WalletId']['input'];
};

export type OnChainAddressPayload = {
  __typename?: 'OnChainAddressPayload';
  address?: Maybe<Scalars['OnChainAddress']['output']>;
  errors: Array<Error>;
};

export type OnChainPaymentSendAllInput = {
  address: Scalars['OnChainAddress']['input'];
  memo?: InputMaybe<Scalars['Memo']['input']>;
  speed?: PayoutSpeed;
  walletId: Scalars['WalletId']['input'];
};

export type OnChainPaymentSendInput = {
  address: Scalars['OnChainAddress']['input'];
  amount: Scalars['SatAmount']['input'];
  memo?: InputMaybe<Scalars['Memo']['input']>;
  speed?: PayoutSpeed;
  walletId: Scalars['WalletId']['input'];
};

export type OnChainTxFee = {
  __typename?: 'OnChainTxFee';
  amount: Scalars['SatAmount']['output'];
};

export type OnChainUpdate = {
  __typename?: 'OnChainUpdate';
  /** @deprecated Deprecated in favor of transaction */
  amount: Scalars['SatAmount']['output'];
  /** @deprecated Deprecated in favor of transaction */
  displayCurrencyPerSat: Scalars['Float']['output'];
  transaction: Transaction;
  /** @deprecated Deprecated in favor of transaction */
  txHash: Scalars['OnChainTxHash']['output'];
  txNotificationType: TxNotificationType;
  /** @deprecated updated over displayCurrencyPerSat */
  usdPerSat: Scalars['Float']['output'];
  /** @deprecated Deprecated in favor of transaction */
  walletId: Scalars['WalletId']['output'];
};

export type OnChainUsdPaymentSendAsBtcDenominatedInput = {
  address: Scalars['OnChainAddress']['input'];
  amount: Scalars['SatAmount']['input'];
  memo?: InputMaybe<Scalars['Memo']['input']>;
  speed?: PayoutSpeed;
  walletId: Scalars['WalletId']['input'];
};

export type OnChainUsdPaymentSendInput = {
  address: Scalars['OnChainAddress']['input'];
  amount: Scalars['CentAmount']['input'];
  memo?: InputMaybe<Scalars['Memo']['input']>;
  speed?: PayoutSpeed;
  walletId: Scalars['WalletId']['input'];
};

export type OnChainUsdTxFee = {
  __typename?: 'OnChainUsdTxFee';
  amount: Scalars['CentAmount']['output'];
};

export type OneDayAccountLimit = AccountLimit & {
  __typename?: 'OneDayAccountLimit';
  /** The rolling time interval value in seconds for the current 24 hour period. */
  interval?: Maybe<Scalars['Seconds']['output']>;
  /** The amount of cents remaining below the limit for the current 24 hour period. */
  remainingLimit?: Maybe<Scalars['CentAmount']['output']>;
  /** The current maximum limit for a given 24 hour period. */
  totalLimit: Scalars['CentAmount']['output'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type PaymentSendPayload = {
  __typename?: 'PaymentSendPayload';
  errors: Array<Error>;
  status?: Maybe<PaymentSendResult>;
  transaction?: Maybe<Transaction>;
};

export enum PaymentSendResult {
  AlreadyPaid = 'ALREADY_PAID',
  Failure = 'FAILURE',
  Pending = 'PENDING',
  Success = 'SUCCESS'
}

export enum PayoutSpeed {
  Fast = 'FAST'
}

export enum PhoneCodeChannelType {
  Sms = 'SMS',
  Whatsapp = 'WHATSAPP'
}

/** Price amount expressed in base/offset. To calculate, use: `base / 10^offset` */
export type Price = {
  __typename?: 'Price';
  base: Scalars['SafeInt']['output'];
  currencyUnit: Scalars['String']['output'];
  formattedAmount: Scalars['String']['output'];
  offset: Scalars['Int']['output'];
};

/** The range for the X axis in the BTC price graph */
export enum PriceGraphRange {
  FiveYears = 'FIVE_YEARS',
  OneDay = 'ONE_DAY',
  OneMonth = 'ONE_MONTH',
  OneWeek = 'ONE_WEEK',
  OneYear = 'ONE_YEAR'
}

export type PriceInput = {
  amount: Scalars['SatAmount']['input'];
  amountCurrencyUnit: ExchangeCurrencyUnit;
  priceCurrencyUnit: ExchangeCurrencyUnit;
};

export type PriceInterface = {
  base: Scalars['SafeInt']['output'];
  /** @deprecated Deprecated due to type renaming */
  currencyUnit: Scalars['String']['output'];
  offset: Scalars['Int']['output'];
};

/** Price of 1 sat in base/offset. To calculate, use: `base / 10^offset` */
export type PriceOfOneSatInMinorUnit = PriceInterface & {
  __typename?: 'PriceOfOneSatInMinorUnit';
  base: Scalars['SafeInt']['output'];
  /** @deprecated Deprecated due to type renaming */
  currencyUnit: Scalars['String']['output'];
  offset: Scalars['Int']['output'];
};

/** Price of 1 sat or 1 usd cent in base/offset. To calculate, use: `base / 10^offset` */
export type PriceOfOneSettlementMinorUnitInDisplayMinorUnit = PriceInterface & {
  __typename?: 'PriceOfOneSettlementMinorUnitInDisplayMinorUnit';
  base: Scalars['SafeInt']['output'];
  /** @deprecated Deprecated due to type renaming */
  currencyUnit: Scalars['String']['output'];
  /** @deprecated Deprecated please use `base / 10^offset` */
  formattedAmount: Scalars['String']['output'];
  offset: Scalars['Int']['output'];
};

/** Price of 1 usd cent in base/offset. To calculate, use: `base / 10^offset` */
export type PriceOfOneUsdCentInMinorUnit = PriceInterface & {
  __typename?: 'PriceOfOneUsdCentInMinorUnit';
  base: Scalars['SafeInt']['output'];
  /** @deprecated Deprecated due to type renaming */
  currencyUnit: Scalars['String']['output'];
  offset: Scalars['Int']['output'];
};

export type PricePayload = {
  __typename?: 'PricePayload';
  errors: Array<Error>;
  price?: Maybe<Price>;
};

export type PricePoint = {
  __typename?: 'PricePoint';
  price: Price;
  /** Unix timestamp (number of seconds elapsed since January 1, 1970 00:00:00 UTC) */
  timestamp: Scalars['Timestamp']['output'];
};

/** A public view of a generic wallet which stores value in one of our supported currencies. */
export type PublicWallet = {
  __typename?: 'PublicWallet';
  currency: WalletCurrency;
  id: Scalars['ID']['output'];
  /** @deprecated Shifting property to 'currency' */
  walletCurrency: WalletCurrency;
};

export type Query = {
  __typename?: 'Query';
  accountDefaultWallet: PublicWallet;
  /** Retrieve the list of scopes permitted for the user's token or API key */
  authorization: Authorization;
  btcPriceList?: Maybe<Array<Maybe<PricePoint>>>;
  businessMapMarkers: Array<MapMarker>;
  /** Returns an estimated conversion rate for the given amount and currency */
  currencyConversionEstimation: CurrencyConversionEstimation;
  currencyList: Array<Currency>;
  getWithdrawLink?: Maybe<WithdrawLinkWithSecret>;
  getWithdrawLinksByUserId: WithdrawLinksByUserIdResult;
  globals?: Maybe<Globals>;
  /** @deprecated Deprecated in favor of lnInvoicePaymentStatusByPaymentRequest */
  lnInvoicePaymentStatus: LnInvoicePaymentStatusPayload;
  lnInvoicePaymentStatusByHash: LnInvoicePaymentStatus;
  lnInvoicePaymentStatusByPaymentRequest: LnInvoicePaymentStatus;
  me?: Maybe<User>;
  mobileVersions?: Maybe<Array<Maybe<MobileVersions>>>;
  onChainTxFee: OnChainTxFee;
  onChainUsdTxFee: OnChainUsdTxFee;
  onChainUsdTxFeeAsBtcDenominated: OnChainUsdTxFee;
  /** Returns 1 Sat and 1 Usd Cent price for the given currency in minor unit */
  realtimePrice: RealtimePrice;
  /** @deprecated will be migrated to AccountDefaultWalletId */
  userDefaultWalletId: Scalars['WalletId']['output'];
  usernameAvailable?: Maybe<Scalars['Boolean']['output']>;
};


export type QueryAccountDefaultWalletArgs = {
  username: Scalars['Username']['input'];
  walletCurrency?: InputMaybe<WalletCurrency>;
};


export type QueryBtcPriceListArgs = {
  range: PriceGraphRange;
};


export type QueryCurrencyConversionEstimationArgs = {
  amount: Scalars['Float']['input'];
  currency: Scalars['DisplayCurrency']['input'];
};


export type QueryGetWithdrawLinkArgs = {
  voucherSecret?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetWithdrawLinksByUserIdArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Status>;
};


export type QueryLnInvoicePaymentStatusArgs = {
  input: LnInvoicePaymentStatusInput;
};


export type QueryLnInvoicePaymentStatusByHashArgs = {
  input: LnInvoicePaymentStatusByHashInput;
};


export type QueryLnInvoicePaymentStatusByPaymentRequestArgs = {
  input: LnInvoicePaymentStatusByPaymentRequestInput;
};


export type QueryOnChainTxFeeArgs = {
  address: Scalars['OnChainAddress']['input'];
  amount: Scalars['SatAmount']['input'];
  speed?: PayoutSpeed;
  walletId: Scalars['WalletId']['input'];
};


export type QueryOnChainUsdTxFeeArgs = {
  address: Scalars['OnChainAddress']['input'];
  amount: Scalars['CentAmount']['input'];
  speed?: PayoutSpeed;
  walletId: Scalars['WalletId']['input'];
};


export type QueryOnChainUsdTxFeeAsBtcDenominatedArgs = {
  address: Scalars['OnChainAddress']['input'];
  amount: Scalars['SatAmount']['input'];
  speed?: PayoutSpeed;
  walletId: Scalars['WalletId']['input'];
};


export type QueryRealtimePriceArgs = {
  currency?: InputMaybe<Scalars['DisplayCurrency']['input']>;
};


export type QueryUserDefaultWalletIdArgs = {
  username: Scalars['Username']['input'];
};


export type QueryUsernameAvailableArgs = {
  username: Scalars['Username']['input'];
};

export type Quiz = {
  __typename?: 'Quiz';
  /** The reward in Satoshis for the quiz question */
  amount: Scalars['SatAmount']['output'];
  completed: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  notBefore?: Maybe<Scalars['Timestamp']['output']>;
};

export type QuizClaimInput = {
  id: Scalars['ID']['input'];
};

export type QuizClaimPayload = {
  __typename?: 'QuizClaimPayload';
  errors: Array<Error>;
  quizzes: Array<Quiz>;
};

export type RealtimePrice = {
  __typename?: 'RealtimePrice';
  btcSatPrice: PriceOfOneSatInMinorUnit;
  /** @deprecated Deprecated in favor of denominatorCurrencyDetails */
  denominatorCurrency: Scalars['DisplayCurrency']['output'];
  denominatorCurrencyDetails: Currency;
  id: Scalars['ID']['output'];
  /** Unix timestamp (number of seconds elapsed since January 1, 1970 00:00:00 UTC) */
  timestamp: Scalars['Timestamp']['output'];
  usdCentPrice: PriceOfOneUsdCentInMinorUnit;
};

export type RealtimePriceInput = {
  currency?: InputMaybe<Scalars['DisplayCurrency']['input']>;
};

export type RealtimePricePayload = {
  __typename?: 'RealtimePricePayload';
  errors: Array<Error>;
  realtimePrice?: Maybe<RealtimePrice>;
};

export type RedeemWithdrawLinkOnChainInput = {
  onChainAddress: Scalars['String']['input'];
  voucherSecret: Scalars['String']['input'];
};

export type RedeemWithdrawLinkOnChainResult = {
  __typename?: 'RedeemWithdrawLinkOnChainResult';
  status?: Maybe<RedeemWithdrawLinkOnChainResultStatus>;
};

export enum RedeemWithdrawLinkOnChainResultStatus {
  Failed = 'Failed',
  Success = 'Success'
}

export type SatAmountPayload = {
  __typename?: 'SatAmountPayload';
  amount?: Maybe<Scalars['SatAmount']['output']>;
  errors: Array<Error>;
};

export enum Scope {
  Read = 'READ',
  Receive = 'RECEIVE',
  Write = 'WRITE'
}

export type SettlementVia = SettlementViaIntraLedger | SettlementViaLn | SettlementViaOnChain;

export type SettlementViaIntraLedger = {
  __typename?: 'SettlementViaIntraLedger';
  /** Settlement destination: Could be null if the payee does not have a username */
  counterPartyUsername?: Maybe<Scalars['Username']['output']>;
  counterPartyWalletId?: Maybe<Scalars['WalletId']['output']>;
  preImage?: Maybe<Scalars['LnPaymentPreImage']['output']>;
};

export type SettlementViaLn = {
  __typename?: 'SettlementViaLn';
  /** @deprecated Shifting property to 'preImage' to improve granularity of the LnPaymentSecret type */
  paymentSecret?: Maybe<Scalars['LnPaymentSecret']['output']>;
  preImage?: Maybe<Scalars['LnPaymentPreImage']['output']>;
};

export type SettlementViaOnChain = {
  __typename?: 'SettlementViaOnChain';
  arrivalInMempoolEstimatedAt?: Maybe<Scalars['Timestamp']['output']>;
  transactionHash?: Maybe<Scalars['OnChainTxHash']['output']>;
  vout?: Maybe<Scalars['Int']['output']>;
};

export enum Status {
  Active = 'ACTIVE',
  Paid = 'PAID',
  Pending = 'PENDING'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** @deprecated Deprecated in favor of lnInvoicePaymentStatusByPaymentRequest */
  lnInvoicePaymentStatus: LnInvoicePaymentStatusPayload;
  lnInvoicePaymentStatusByHash: LnInvoicePaymentStatusPayload;
  lnInvoicePaymentStatusByPaymentRequest: LnInvoicePaymentStatusPayload;
  myUpdates: MyUpdatesPayload;
  price: PricePayload;
  /** Returns the price of 1 satoshi */
  realtimePrice: RealtimePricePayload;
};


export type SubscriptionLnInvoicePaymentStatusArgs = {
  input: LnInvoicePaymentStatusInput;
};


export type SubscriptionLnInvoicePaymentStatusByHashArgs = {
  input: LnInvoicePaymentStatusByHashInput;
};


export type SubscriptionLnInvoicePaymentStatusByPaymentRequestArgs = {
  input: LnInvoicePaymentStatusByPaymentRequestInput;
};


export type SubscriptionPriceArgs = {
  input: PriceInput;
};


export type SubscriptionRealtimePriceArgs = {
  input: RealtimePriceInput;
};

export type SuccessPayload = {
  __typename?: 'SuccessPayload';
  errors: Array<Error>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type SupportChatMessageAddInput = {
  message: Scalars['String']['input'];
};

export type SupportChatMessageAddPayload = {
  __typename?: 'SupportChatMessageAddPayload';
  errors: Array<Error>;
  supportMessage?: Maybe<Array<Maybe<SupportMessage>>>;
};

export type SupportMessage = {
  __typename?: 'SupportMessage';
  id: Scalars['ID']['output'];
  message: Scalars['String']['output'];
  role: SupportRole;
  timestamp: Scalars['Timestamp']['output'];
};

export enum SupportRole {
  Assistant = 'ASSISTANT',
  User = 'USER'
}

/**
 * Give details about an individual transaction.
 * Galoy have a smart routing system which is automatically
 * settling intraledger when both the payer and payee use the same wallet
 * therefore it's possible the transactions is being initiated onchain
 * or with lightning but settled intraledger.
 */
export type Transaction = {
  __typename?: 'Transaction';
  createdAt: Scalars['Timestamp']['output'];
  direction: TxDirection;
  id: Scalars['ID']['output'];
  /** From which protocol the payment has been initiated. */
  initiationVia: InitiationVia;
  memo?: Maybe<Scalars['Memo']['output']>;
  /** Amount of the settlement currency sent or received. */
  settlementAmount: Scalars['SignedAmount']['output'];
  /** Wallet currency for transaction. */
  settlementCurrency: WalletCurrency;
  settlementDisplayAmount: Scalars['SignedDisplayMajorAmount']['output'];
  settlementDisplayCurrency: Scalars['DisplayCurrency']['output'];
  settlementDisplayFee: Scalars['SignedDisplayMajorAmount']['output'];
  settlementFee: Scalars['SignedAmount']['output'];
  /** Price in WALLETCURRENCY/SETTLEMENTUNIT at time of settlement. */
  settlementPrice: PriceOfOneSettlementMinorUnitInDisplayMinorUnit;
  /** To which protocol the payment has settled on. */
  settlementVia: SettlementVia;
  status: TxStatus;
};

/** A connection to a list of items. */
export type TransactionConnection = {
  __typename?: 'TransactionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<TransactionEdge>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TransactionEdge = {
  __typename?: 'TransactionEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Transaction;
};

export enum TxDirection {
  Receive = 'RECEIVE',
  Send = 'SEND'
}

export enum TxNotificationType {
  IntraLedgerPayment = 'IntraLedgerPayment',
  IntraLedgerReceipt = 'IntraLedgerReceipt',
  LigtningReceipt = 'LigtningReceipt',
  OnchainPayment = 'OnchainPayment',
  OnchainReceipt = 'OnchainReceipt',
  OnchainReceiptPending = 'OnchainReceiptPending'
}

export enum TxStatus {
  Failure = 'FAILURE',
  Pending = 'PENDING',
  Success = 'SUCCESS'
}

export type UpgradePayload = {
  __typename?: 'UpgradePayload';
  authToken?: Maybe<Scalars['AuthToken']['output']>;
  errors: Array<Error>;
  success: Scalars['Boolean']['output'];
};

/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWallet = Wallet & {
  __typename?: 'UsdWallet';
  accountId: Scalars['ID']['output'];
  balance: Scalars['SignedAmount']['output'];
  id: Scalars['ID']['output'];
  invoiceByPaymentHash: Invoice;
  /** A list of all invoices associated with walletIds optionally passed. */
  invoices?: Maybe<InvoiceConnection>;
  /** An unconfirmed incoming onchain balance. */
  pendingIncomingBalance: Scalars['SignedAmount']['output'];
  pendingIncomingTransactions: Array<Transaction>;
  pendingIncomingTransactionsByAddress: Array<Transaction>;
  transactionById: Transaction;
  transactions?: Maybe<TransactionConnection>;
  transactionsByAddress?: Maybe<TransactionConnection>;
  transactionsByPaymentHash: Array<Transaction>;
  transactionsByPaymentRequest: Array<Transaction>;
  walletCurrency: WalletCurrency;
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletInvoiceByPaymentHashArgs = {
  paymentHash: Scalars['PaymentHash']['input'];
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletInvoicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletPendingIncomingTransactionsByAddressArgs = {
  address: Scalars['OnChainAddress']['input'];
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletTransactionByIdArgs = {
  transactionId: Scalars['ID']['input'];
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletTransactionsByAddressArgs = {
  address: Scalars['OnChainAddress']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletTransactionsByPaymentHashArgs = {
  paymentHash: Scalars['PaymentHash']['input'];
};


/** A wallet belonging to an account which contains a USD balance and a list of transactions. */
export type UsdWalletTransactionsByPaymentRequestArgs = {
  paymentRequest: Scalars['LnPaymentRequest']['input'];
};

export type User = {
  __typename?: 'User';
  /**
   * Get single contact details.
   * Can include the transactions associated with the contact.
   * @deprecated will be moved to Accounts
   */
  contactByUsername: UserContact;
  /**
   * Get full list of contacts.
   * Can include the transactions associated with each contact.
   * @deprecated will be moved to account
   */
  contacts: Array<UserContact>;
  createdAt: Scalars['Timestamp']['output'];
  defaultAccount: Account;
  /** Email address */
  email?: Maybe<Email>;
  id: Scalars['ID']['output'];
  /**
   * Preferred language for user.
   * When value is 'default' the intent is to use preferred language from OS settings.
   */
  language: Scalars['Language']['output'];
  /** Phone number with international calling code. */
  phone?: Maybe<Scalars['Phone']['output']>;
  supportChat: Array<SupportMessage>;
  /** Whether TOTP is enabled for this user. */
  totpEnabled: Scalars['Boolean']['output'];
  /**
   * Optional immutable user friendly identifier.
   * @deprecated will be moved to @Handle in Account and Wallet
   */
  username?: Maybe<Scalars['Username']['output']>;
};


export type UserContactByUsernameArgs = {
  username: Scalars['Username']['input'];
};

export type UserContact = {
  __typename?: 'UserContact';
  /**
   * Alias the user can set for this contact.
   * Only the user can see the alias attached to their contact.
   */
  alias?: Maybe<Scalars['ContactAlias']['output']>;
  id: Scalars['Username']['output'];
  /** Paginated list of transactions sent to/from this contact. */
  transactions?: Maybe<TransactionConnection>;
  transactionsCount: Scalars['Int']['output'];
  /** Actual identifier of the contact. */
  username: Scalars['Username']['output'];
};


export type UserContactTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type UserContactUpdateAliasInput = {
  alias: Scalars['ContactAlias']['input'];
  username: Scalars['Username']['input'];
};

export type UserContactUpdateAliasPayload = {
  __typename?: 'UserContactUpdateAliasPayload';
  contact?: Maybe<UserContact>;
  errors: Array<Error>;
};

export type UserEmailDeletePayload = {
  __typename?: 'UserEmailDeletePayload';
  errors: Array<Error>;
  me?: Maybe<User>;
};

export type UserEmailRegistrationInitiateInput = {
  email: Scalars['EmailAddress']['input'];
};

export type UserEmailRegistrationInitiatePayload = {
  __typename?: 'UserEmailRegistrationInitiatePayload';
  emailRegistrationId?: Maybe<Scalars['EmailRegistrationId']['output']>;
  errors: Array<Error>;
  me?: Maybe<User>;
};

export type UserEmailRegistrationValidateInput = {
  code: Scalars['OneTimeAuthCode']['input'];
  emailRegistrationId: Scalars['EmailRegistrationId']['input'];
};

export type UserEmailRegistrationValidatePayload = {
  __typename?: 'UserEmailRegistrationValidatePayload';
  errors: Array<Error>;
  me?: Maybe<User>;
};

export type UserLoginInput = {
  code: Scalars['OneTimeAuthCode']['input'];
  phone: Scalars['Phone']['input'];
};

export type UserLoginUpgradeInput = {
  code: Scalars['OneTimeAuthCode']['input'];
  phone: Scalars['Phone']['input'];
};

export type UserLogoutInput = {
  deviceToken: Scalars['String']['input'];
};

export type UserPhoneDeletePayload = {
  __typename?: 'UserPhoneDeletePayload';
  errors: Array<Error>;
  me?: Maybe<User>;
};

export type UserPhoneRegistrationInitiateInput = {
  channel?: InputMaybe<PhoneCodeChannelType>;
  phone: Scalars['Phone']['input'];
};

export type UserPhoneRegistrationValidateInput = {
  code: Scalars['OneTimeAuthCode']['input'];
  phone: Scalars['Phone']['input'];
};

export type UserPhoneRegistrationValidatePayload = {
  __typename?: 'UserPhoneRegistrationValidatePayload';
  errors: Array<Error>;
  me?: Maybe<User>;
};

export type UserTotpDeletePayload = {
  __typename?: 'UserTotpDeletePayload';
  errors: Array<Error>;
  me?: Maybe<User>;
};

export type UserTotpRegistrationInitiatePayload = {
  __typename?: 'UserTotpRegistrationInitiatePayload';
  errors: Array<Error>;
  totpRegistrationId?: Maybe<Scalars['TotpRegistrationId']['output']>;
  totpSecret?: Maybe<Scalars['TotpSecret']['output']>;
};

export type UserTotpRegistrationValidateInput = {
  authToken?: InputMaybe<Scalars['AuthToken']['input']>;
  totpCode: Scalars['TotpCode']['input'];
  totpRegistrationId: Scalars['TotpRegistrationId']['input'];
};

export type UserTotpRegistrationValidatePayload = {
  __typename?: 'UserTotpRegistrationValidatePayload';
  errors: Array<Error>;
  me?: Maybe<User>;
};

export type UserUpdate = IntraLedgerUpdate | LnUpdate | OnChainUpdate | Price | RealtimePrice;

export type UserUpdateLanguageInput = {
  language: Scalars['Language']['input'];
};

export type UserUpdateLanguagePayload = {
  __typename?: 'UserUpdateLanguagePayload';
  errors: Array<Error>;
  user?: Maybe<User>;
};

export type UserUpdateUsernameInput = {
  username: Scalars['Username']['input'];
};

export type UserUpdateUsernamePayload = {
  __typename?: 'UserUpdateUsernamePayload';
  errors: Array<Error>;
  user?: Maybe<User>;
};

/** A generic wallet which stores value in one of our supported currencies. */
export type Wallet = {
  accountId: Scalars['ID']['output'];
  balance: Scalars['SignedAmount']['output'];
  id: Scalars['ID']['output'];
  invoiceByPaymentHash: Invoice;
  invoices?: Maybe<InvoiceConnection>;
  pendingIncomingBalance: Scalars['SignedAmount']['output'];
  /**
   * Pending incoming OnChain transactions. When transactions
   * are confirmed they will receive a new id and be found in the transactions
   * list. Transactions are ordered anti-chronologically,
   * ie: the newest transaction will be first
   */
  pendingIncomingTransactions: Array<Transaction>;
  /**
   * Pending incoming OnChain transactions. When transactions
   * are confirmed they will receive a new id and be found in the transactions
   * list. Transactions are ordered anti-chronologically,
   * ie: the newest transaction will be first
   */
  pendingIncomingTransactionsByAddress: Array<Transaction>;
  transactionById: Transaction;
  /**
   * Transactions are ordered anti-chronologically,
   * ie: the newest transaction will be first
   */
  transactions?: Maybe<TransactionConnection>;
  /**
   * Transactions are ordered anti-chronologically,
   * ie: the newest transaction will be first
   */
  transactionsByAddress?: Maybe<TransactionConnection>;
  /** Returns the transactions that include this paymentHash. This should be a list of size one for a received lightning payment. This can be more that one transaction for a sent lightning payment. */
  transactionsByPaymentHash: Array<Transaction>;
  /** Returns the transactions that include this paymentRequest. */
  transactionsByPaymentRequest: Array<Transaction>;
  walletCurrency: WalletCurrency;
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletInvoiceByPaymentHashArgs = {
  paymentHash: Scalars['PaymentHash']['input'];
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletInvoicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletPendingIncomingTransactionsByAddressArgs = {
  address: Scalars['OnChainAddress']['input'];
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletTransactionByIdArgs = {
  transactionId: Scalars['ID']['input'];
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletTransactionsByAddressArgs = {
  address: Scalars['OnChainAddress']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletTransactionsByPaymentHashArgs = {
  paymentHash: Scalars['PaymentHash']['input'];
};


/** A generic wallet which stores value in one of our supported currencies. */
export type WalletTransactionsByPaymentRequestArgs = {
  paymentRequest: Scalars['LnPaymentRequest']['input'];
};

export enum WalletCurrency {
  Btc = 'BTC',
  Usd = 'USD'
}

export type WithdrawLink = {
  __typename?: 'WithdrawLink';
  commissionPercentage: Scalars['Float']['output'];
  createdAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  identifierCode: Scalars['String']['output'];
  paidAt?: Maybe<Scalars['String']['output']>;
  salesAmountInCents: Scalars['Float']['output'];
  status: Status;
  userId: Scalars['ID']['output'];
  voucherAmountInCents: Scalars['Float']['output'];
};

export type WithdrawLinkWithSecret = {
  __typename?: 'WithdrawLinkWithSecret';
  commissionPercentage: Scalars['Float']['output'];
  createdAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  identifierCode: Scalars['String']['output'];
  paidAt?: Maybe<Scalars['String']['output']>;
  salesAmountInCents: Scalars['Float']['output'];
  status: Status;
  uniqueHash: Scalars['String']['output'];
  userId: Scalars['ID']['output'];
  voucherAmountInCents: Scalars['Float']['output'];
  voucherSecret: Scalars['String']['output'];
};

export type WithdrawLinksByUserIdResult = {
  __typename?: 'WithdrawLinksByUserIdResult';
  totalLinks?: Maybe<Scalars['Int']['output']>;
  withdrawLinks: Array<WithdrawLink>;
};

export type CreateWithdrawLinkMutationVariables = Exact<{
  input: CreateWithdrawLinkInput;
}>;


export type CreateWithdrawLinkMutation = { __typename?: 'Mutation', createWithdrawLink: { __typename?: 'WithdrawLinkWithSecret', commissionPercentage: number, createdAt: string, id: string, identifierCode: string, salesAmountInCents: number, status: Status, uniqueHash: string, userId: string, voucherAmountInCents: number, voucherSecret: string, paidAt?: string | null } };

export type GetWithdrawLinksByUserIdQueryVariables = Exact<{
  status?: InputMaybe<Status>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetWithdrawLinksByUserIdQuery = { __typename?: 'Query', getWithdrawLinksByUserId: { __typename?: 'WithdrawLinksByUserIdResult', totalLinks?: number | null, withdrawLinks: Array<{ __typename?: 'WithdrawLink', commissionPercentage: number, id: string, createdAt: string, identifierCode: string, paidAt?: string | null, salesAmountInCents: number, status: Status, userId: string, voucherAmountInCents: number }> } };

export type GetWithdrawLinkQueryVariables = Exact<{
  voucherSecret?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetWithdrawLinkQuery = { __typename?: 'Query', getWithdrawLink?: { __typename?: 'WithdrawLinkWithSecret', commissionPercentage: number, createdAt: string, id: string, identifierCode: string, paidAt?: string | null, salesAmountInCents: number, status: Status, uniqueHash: string, userId: string, voucherAmountInCents: number, voucherSecret: string } | null };

export type OnChainWithdrawLinkMutationVariables = Exact<{
  input: RedeemWithdrawLinkOnChainInput;
}>;


export type OnChainWithdrawLinkMutation = { __typename?: 'Mutation', redeemWithdrawLinkOnChain: { __typename?: 'RedeemWithdrawLinkOnChainResult', status?: RedeemWithdrawLinkOnChainResultStatus | null } };

export type CurrencyListQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrencyListQuery = { __typename?: 'Query', currencyList: Array<{ __typename?: 'Currency', id: string, symbol: string, name: string, flag: string, fractionDigits: number }> };

export type RealtimePriceInitialQueryVariables = Exact<{
  currency: Scalars['DisplayCurrency']['input'];
}>;


export type RealtimePriceInitialQuery = { __typename?: 'Query', realtimePrice: { __typename?: 'RealtimePrice', timestamp: any, denominatorCurrency: any, btcSatPrice: { __typename?: 'PriceOfOneSatInMinorUnit', base: any, offset: number }, usdCentPrice: { __typename?: 'PriceOfOneUsdCentInMinorUnit', base: any, offset: number } } };

export type RealtimePriceWsSubscriptionVariables = Exact<{
  currency: Scalars['DisplayCurrency']['input'];
}>;


export type RealtimePriceWsSubscription = { __typename?: 'Subscription', realtimePrice: { __typename?: 'RealtimePricePayload', errors: Array<{ __typename?: 'GraphQLApplicationError', message: string }>, realtimePrice?: { __typename?: 'RealtimePrice', timestamp: any, denominatorCurrency: any, btcSatPrice: { __typename?: 'PriceOfOneSatInMinorUnit', base: any, offset: number }, usdCentPrice: { __typename?: 'PriceOfOneUsdCentInMinorUnit', base: any, offset: number } } | null } };

export type PriceSubscriptionVariables = Exact<{
  amount: Scalars['SatAmount']['input'];
  amountCurrencyUnit: ExchangeCurrencyUnit;
  priceCurrencyUnit: ExchangeCurrencyUnit;
}>;


export type PriceSubscription = { __typename?: 'Subscription', price: { __typename?: 'PricePayload', errors: Array<{ __typename?: 'GraphQLApplicationError', message: string }>, price?: { __typename?: 'Price', base: any, offset: number, currencyUnit: string, formattedAmount: string } | null } };

export type LnInvoicePaymentSendMutationVariables = Exact<{
  input: LnInvoicePaymentInput;
}>;


export type LnInvoicePaymentSendMutation = { __typename?: 'Mutation', lnInvoicePaymentSend: { __typename?: 'PaymentSendPayload', status?: PaymentSendResult | null, errors: Array<{ __typename?: 'GraphQLApplicationError', message: string, code?: string | null }>, transaction?: { __typename?: 'Transaction', createdAt: any, direction: TxDirection, id: string, memo?: any | null, settlementAmount: any, settlementCurrency: WalletCurrency, settlementDisplayAmount: any, settlementDisplayCurrency: any, settlementDisplayFee: any, settlementFee: any, status: TxStatus } | null } };

export type OnChainUsdPaymentSendMutationVariables = Exact<{
  input: OnChainUsdPaymentSendInput;
}>;


export type OnChainUsdPaymentSendMutation = { __typename?: 'Mutation', onChainUsdPaymentSend: { __typename?: 'PaymentSendPayload', status?: PaymentSendResult | null, errors: Array<{ __typename?: 'GraphQLApplicationError', code?: string | null, message: string }> } };

export type IntraLedgerBtcPaymentSendMutationVariables = Exact<{
  input: IntraLedgerPaymentSendInput;
}>;


export type IntraLedgerBtcPaymentSendMutation = { __typename?: 'Mutation', intraLedgerPaymentSend: { __typename?: 'PaymentSendPayload', status?: PaymentSendResult | null, errors: Array<{ __typename?: 'GraphQLApplicationError', code?: string | null, message: string }>, transaction?: { __typename?: 'Transaction', createdAt: any, direction: TxDirection, id: string, settlementAmount: any, settlementCurrency: WalletCurrency, settlementDisplayAmount: any, settlementDisplayCurrency: any, settlementFee: any, settlementDisplayFee: any, status: TxStatus, settlementPrice: { __typename?: 'PriceOfOneSettlementMinorUnitInDisplayMinorUnit', base: any, offset: number } } | null } };

export type IntraLedgerUsdPaymentSendMutationVariables = Exact<{
  input: IntraLedgerUsdPaymentSendInput;
}>;


export type IntraLedgerUsdPaymentSendMutation = { __typename?: 'Mutation', intraLedgerUsdPaymentSend: { __typename?: 'PaymentSendPayload', status?: PaymentSendResult | null, errors: Array<{ __typename?: 'GraphQLApplicationError', code?: string | null, message: string }>, transaction?: { __typename?: 'Transaction', createdAt: any, direction: TxDirection, id: string, settlementAmount: any, settlementCurrency: WalletCurrency, settlementDisplayAmount: any, settlementDisplayCurrency: any, settlementFee: any, settlementDisplayFee: any, status: TxStatus, settlementPrice: { __typename?: 'PriceOfOneSettlementMinorUnitInDisplayMinorUnit', base: any, offset: number } } | null } };

export type RealtimePriceQueryVariables = Exact<{
  currency?: InputMaybe<Scalars['DisplayCurrency']['input']>;
}>;


export type RealtimePriceQuery = { __typename?: 'Query', realtimePrice: { __typename?: 'RealtimePrice', denominatorCurrency: any, id: string, timestamp: any, btcSatPrice: { __typename?: 'PriceOfOneSatInMinorUnit', base: any, offset: number }, usdCentPrice: { __typename?: 'PriceOfOneUsdCentInMinorUnit', base: any, offset: number } } };

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me?: { __typename?: 'User', createdAt: any, id: string, language: any, phone?: any | null, totpEnabled: boolean, username?: any | null, defaultAccount: { __typename?: 'ConsumerAccount', defaultWalletId: any, displayCurrency: any, id: string, level: AccountLevel, wallets: Array<{ __typename?: 'BTCWallet', accountId: string, balance: any, id: string, pendingIncomingBalance: any, walletCurrency: WalletCurrency } | { __typename?: 'UsdWallet', accountId: string, balance: any, id: string, pendingIncomingBalance: any, walletCurrency: WalletCurrency }> }, email?: { __typename?: 'Email', address?: any | null, verified?: boolean | null } | null } | null };

export type OnChainUsdTxFeeQueryVariables = Exact<{
  address: Scalars['OnChainAddress']['input'];
  amount: Scalars['CentAmount']['input'];
  walletId: Scalars['WalletId']['input'];
  speed: PayoutSpeed;
}>;


export type OnChainUsdTxFeeQuery = { __typename?: 'Query', onChainUsdTxFee: { __typename?: 'OnChainUsdTxFee', amount: any } };


export const CreateWithdrawLinkDocument = gql`
    mutation CreateWithdrawLink($input: CreateWithdrawLinkInput!) {
  createWithdrawLink(input: $input) {
    commissionPercentage
    createdAt
    id
    identifierCode
    salesAmountInCents
    status
    uniqueHash
    userId
    voucherAmountInCents
    voucherSecret
    paidAt
  }
}
    `;
export type CreateWithdrawLinkMutationFn = Apollo.MutationFunction<CreateWithdrawLinkMutation, CreateWithdrawLinkMutationVariables>;

/**
 * __useCreateWithdrawLinkMutation__
 *
 * To run a mutation, you first call `useCreateWithdrawLinkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateWithdrawLinkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createWithdrawLinkMutation, { data, loading, error }] = useCreateWithdrawLinkMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateWithdrawLinkMutation(baseOptions?: Apollo.MutationHookOptions<CreateWithdrawLinkMutation, CreateWithdrawLinkMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateWithdrawLinkMutation, CreateWithdrawLinkMutationVariables>(CreateWithdrawLinkDocument, options);
      }
export type CreateWithdrawLinkMutationHookResult = ReturnType<typeof useCreateWithdrawLinkMutation>;
export type CreateWithdrawLinkMutationResult = Apollo.MutationResult<CreateWithdrawLinkMutation>;
export type CreateWithdrawLinkMutationOptions = Apollo.BaseMutationOptions<CreateWithdrawLinkMutation, CreateWithdrawLinkMutationVariables>;
export const GetWithdrawLinksByUserIdDocument = gql`
    query GetWithdrawLinksByUserId($status: Status, $limit: Int, $offset: Int) {
  getWithdrawLinksByUserId(status: $status, limit: $limit, offset: $offset) {
    totalLinks
    withdrawLinks {
      commissionPercentage
      id
      createdAt
      identifierCode
      paidAt
      salesAmountInCents
      status
      userId
      voucherAmountInCents
    }
  }
}
    `;

/**
 * __useGetWithdrawLinksByUserIdQuery__
 *
 * To run a query within a React component, call `useGetWithdrawLinksByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWithdrawLinksByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWithdrawLinksByUserIdQuery({
 *   variables: {
 *      status: // value for 'status'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetWithdrawLinksByUserIdQuery(baseOptions?: Apollo.QueryHookOptions<GetWithdrawLinksByUserIdQuery, GetWithdrawLinksByUserIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWithdrawLinksByUserIdQuery, GetWithdrawLinksByUserIdQueryVariables>(GetWithdrawLinksByUserIdDocument, options);
      }
export function useGetWithdrawLinksByUserIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWithdrawLinksByUserIdQuery, GetWithdrawLinksByUserIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWithdrawLinksByUserIdQuery, GetWithdrawLinksByUserIdQueryVariables>(GetWithdrawLinksByUserIdDocument, options);
        }
export type GetWithdrawLinksByUserIdQueryHookResult = ReturnType<typeof useGetWithdrawLinksByUserIdQuery>;
export type GetWithdrawLinksByUserIdLazyQueryHookResult = ReturnType<typeof useGetWithdrawLinksByUserIdLazyQuery>;
export type GetWithdrawLinksByUserIdQueryResult = Apollo.QueryResult<GetWithdrawLinksByUserIdQuery, GetWithdrawLinksByUserIdQueryVariables>;
export const GetWithdrawLinkDocument = gql`
    query GetWithdrawLink($voucherSecret: String) {
  getWithdrawLink(voucherSecret: $voucherSecret) {
    commissionPercentage
    createdAt
    id
    identifierCode
    paidAt
    salesAmountInCents
    status
    uniqueHash
    userId
    voucherAmountInCents
    voucherSecret
  }
}
    `;

/**
 * __useGetWithdrawLinkQuery__
 *
 * To run a query within a React component, call `useGetWithdrawLinkQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWithdrawLinkQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWithdrawLinkQuery({
 *   variables: {
 *      voucherSecret: // value for 'voucherSecret'
 *   },
 * });
 */
export function useGetWithdrawLinkQuery(baseOptions?: Apollo.QueryHookOptions<GetWithdrawLinkQuery, GetWithdrawLinkQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWithdrawLinkQuery, GetWithdrawLinkQueryVariables>(GetWithdrawLinkDocument, options);
      }
export function useGetWithdrawLinkLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWithdrawLinkQuery, GetWithdrawLinkQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWithdrawLinkQuery, GetWithdrawLinkQueryVariables>(GetWithdrawLinkDocument, options);
        }
export type GetWithdrawLinkQueryHookResult = ReturnType<typeof useGetWithdrawLinkQuery>;
export type GetWithdrawLinkLazyQueryHookResult = ReturnType<typeof useGetWithdrawLinkLazyQuery>;
export type GetWithdrawLinkQueryResult = Apollo.QueryResult<GetWithdrawLinkQuery, GetWithdrawLinkQueryVariables>;
export const OnChainWithdrawLinkDocument = gql`
    mutation OnChainWithdrawLink($input: RedeemWithdrawLinkOnChainInput!) {
  redeemWithdrawLinkOnChain(input: $input) {
    status
  }
}
    `;
export type OnChainWithdrawLinkMutationFn = Apollo.MutationFunction<OnChainWithdrawLinkMutation, OnChainWithdrawLinkMutationVariables>;

/**
 * __useOnChainWithdrawLinkMutation__
 *
 * To run a mutation, you first call `useOnChainWithdrawLinkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useOnChainWithdrawLinkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [onChainWithdrawLinkMutation, { data, loading, error }] = useOnChainWithdrawLinkMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useOnChainWithdrawLinkMutation(baseOptions?: Apollo.MutationHookOptions<OnChainWithdrawLinkMutation, OnChainWithdrawLinkMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<OnChainWithdrawLinkMutation, OnChainWithdrawLinkMutationVariables>(OnChainWithdrawLinkDocument, options);
      }
export type OnChainWithdrawLinkMutationHookResult = ReturnType<typeof useOnChainWithdrawLinkMutation>;
export type OnChainWithdrawLinkMutationResult = Apollo.MutationResult<OnChainWithdrawLinkMutation>;
export type OnChainWithdrawLinkMutationOptions = Apollo.BaseMutationOptions<OnChainWithdrawLinkMutation, OnChainWithdrawLinkMutationVariables>;
export const CurrencyListDocument = gql`
    query CurrencyList {
  currencyList {
    id
    symbol
    name
    flag
    fractionDigits
  }
}
    `;

/**
 * __useCurrencyListQuery__
 *
 * To run a query within a React component, call `useCurrencyListQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrencyListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrencyListQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrencyListQuery(baseOptions?: Apollo.QueryHookOptions<CurrencyListQuery, CurrencyListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrencyListQuery, CurrencyListQueryVariables>(CurrencyListDocument, options);
      }
export function useCurrencyListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrencyListQuery, CurrencyListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrencyListQuery, CurrencyListQueryVariables>(CurrencyListDocument, options);
        }
export type CurrencyListQueryHookResult = ReturnType<typeof useCurrencyListQuery>;
export type CurrencyListLazyQueryHookResult = ReturnType<typeof useCurrencyListLazyQuery>;
export type CurrencyListQueryResult = Apollo.QueryResult<CurrencyListQuery, CurrencyListQueryVariables>;
export const RealtimePriceInitialDocument = gql`
    query RealtimePriceInitial($currency: DisplayCurrency!) {
  realtimePrice(currency: $currency) {
    timestamp
    btcSatPrice {
      base
      offset
    }
    usdCentPrice {
      base
      offset
    }
    denominatorCurrency
  }
}
    `;

/**
 * __useRealtimePriceInitialQuery__
 *
 * To run a query within a React component, call `useRealtimePriceInitialQuery` and pass it any options that fit your needs.
 * When your component renders, `useRealtimePriceInitialQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRealtimePriceInitialQuery({
 *   variables: {
 *      currency: // value for 'currency'
 *   },
 * });
 */
export function useRealtimePriceInitialQuery(baseOptions: Apollo.QueryHookOptions<RealtimePriceInitialQuery, RealtimePriceInitialQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RealtimePriceInitialQuery, RealtimePriceInitialQueryVariables>(RealtimePriceInitialDocument, options);
      }
export function useRealtimePriceInitialLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RealtimePriceInitialQuery, RealtimePriceInitialQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RealtimePriceInitialQuery, RealtimePriceInitialQueryVariables>(RealtimePriceInitialDocument, options);
        }
export type RealtimePriceInitialQueryHookResult = ReturnType<typeof useRealtimePriceInitialQuery>;
export type RealtimePriceInitialLazyQueryHookResult = ReturnType<typeof useRealtimePriceInitialLazyQuery>;
export type RealtimePriceInitialQueryResult = Apollo.QueryResult<RealtimePriceInitialQuery, RealtimePriceInitialQueryVariables>;
export const RealtimePriceWsDocument = gql`
    subscription realtimePriceWs($currency: DisplayCurrency!) {
  realtimePrice(input: {currency: $currency}) {
    errors {
      message
    }
    realtimePrice {
      timestamp
      btcSatPrice {
        base
        offset
      }
      usdCentPrice {
        base
        offset
      }
      denominatorCurrency
    }
  }
}
    `;

/**
 * __useRealtimePriceWsSubscription__
 *
 * To run a query within a React component, call `useRealtimePriceWsSubscription` and pass it any options that fit your needs.
 * When your component renders, `useRealtimePriceWsSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRealtimePriceWsSubscription({
 *   variables: {
 *      currency: // value for 'currency'
 *   },
 * });
 */
export function useRealtimePriceWsSubscription(baseOptions: Apollo.SubscriptionHookOptions<RealtimePriceWsSubscription, RealtimePriceWsSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useSubscription<RealtimePriceWsSubscription, RealtimePriceWsSubscriptionVariables>(RealtimePriceWsDocument, options);
      }
export type RealtimePriceWsSubscriptionHookResult = ReturnType<typeof useRealtimePriceWsSubscription>;
export type RealtimePriceWsSubscriptionResult = Apollo.SubscriptionResult<RealtimePriceWsSubscription>;
export const PriceDocument = gql`
    subscription price($amount: SatAmount!, $amountCurrencyUnit: ExchangeCurrencyUnit!, $priceCurrencyUnit: ExchangeCurrencyUnit!) {
  price(
    input: {amount: $amount, amountCurrencyUnit: $amountCurrencyUnit, priceCurrencyUnit: $priceCurrencyUnit}
  ) {
    errors {
      message
    }
    price {
      base
      offset
      currencyUnit
      formattedAmount
    }
  }
}
    `;

/**
 * __usePriceSubscription__
 *
 * To run a query within a React component, call `usePriceSubscription` and pass it any options that fit your needs.
 * When your component renders, `usePriceSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePriceSubscription({
 *   variables: {
 *      amount: // value for 'amount'
 *      amountCurrencyUnit: // value for 'amountCurrencyUnit'
 *      priceCurrencyUnit: // value for 'priceCurrencyUnit'
 *   },
 * });
 */
export function usePriceSubscription(baseOptions: Apollo.SubscriptionHookOptions<PriceSubscription, PriceSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useSubscription<PriceSubscription, PriceSubscriptionVariables>(PriceDocument, options);
      }
export type PriceSubscriptionHookResult = ReturnType<typeof usePriceSubscription>;
export type PriceSubscriptionResult = Apollo.SubscriptionResult<PriceSubscription>;
export const LnInvoicePaymentSendDocument = gql`
    mutation LnInvoicePaymentSend($input: LnInvoicePaymentInput!) {
  lnInvoicePaymentSend(input: $input) {
    errors {
      message
      code
    }
    status
    transaction {
      createdAt
      direction
      id
      memo
      settlementAmount
      settlementCurrency
      settlementDisplayAmount
      settlementDisplayCurrency
      settlementDisplayFee
      settlementFee
      status
    }
  }
}
    `;
export type LnInvoicePaymentSendMutationFn = Apollo.MutationFunction<LnInvoicePaymentSendMutation, LnInvoicePaymentSendMutationVariables>;

/**
 * __useLnInvoicePaymentSendMutation__
 *
 * To run a mutation, you first call `useLnInvoicePaymentSendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLnInvoicePaymentSendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [lnInvoicePaymentSendMutation, { data, loading, error }] = useLnInvoicePaymentSendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLnInvoicePaymentSendMutation(baseOptions?: Apollo.MutationHookOptions<LnInvoicePaymentSendMutation, LnInvoicePaymentSendMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LnInvoicePaymentSendMutation, LnInvoicePaymentSendMutationVariables>(LnInvoicePaymentSendDocument, options);
      }
export type LnInvoicePaymentSendMutationHookResult = ReturnType<typeof useLnInvoicePaymentSendMutation>;
export type LnInvoicePaymentSendMutationResult = Apollo.MutationResult<LnInvoicePaymentSendMutation>;
export type LnInvoicePaymentSendMutationOptions = Apollo.BaseMutationOptions<LnInvoicePaymentSendMutation, LnInvoicePaymentSendMutationVariables>;
export const OnChainUsdPaymentSendDocument = gql`
    mutation OnChainUsdPaymentSend($input: OnChainUsdPaymentSendInput!) {
  onChainUsdPaymentSend(input: $input) {
    errors {
      code
      message
    }
    status
  }
}
    `;
export type OnChainUsdPaymentSendMutationFn = Apollo.MutationFunction<OnChainUsdPaymentSendMutation, OnChainUsdPaymentSendMutationVariables>;

/**
 * __useOnChainUsdPaymentSendMutation__
 *
 * To run a mutation, you first call `useOnChainUsdPaymentSendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useOnChainUsdPaymentSendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [onChainUsdPaymentSendMutation, { data, loading, error }] = useOnChainUsdPaymentSendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useOnChainUsdPaymentSendMutation(baseOptions?: Apollo.MutationHookOptions<OnChainUsdPaymentSendMutation, OnChainUsdPaymentSendMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<OnChainUsdPaymentSendMutation, OnChainUsdPaymentSendMutationVariables>(OnChainUsdPaymentSendDocument, options);
      }
export type OnChainUsdPaymentSendMutationHookResult = ReturnType<typeof useOnChainUsdPaymentSendMutation>;
export type OnChainUsdPaymentSendMutationResult = Apollo.MutationResult<OnChainUsdPaymentSendMutation>;
export type OnChainUsdPaymentSendMutationOptions = Apollo.BaseMutationOptions<OnChainUsdPaymentSendMutation, OnChainUsdPaymentSendMutationVariables>;
export const IntraLedgerBtcPaymentSendDocument = gql`
    mutation IntraLedgerBtcPaymentSend($input: IntraLedgerPaymentSendInput!) {
  intraLedgerPaymentSend(input: $input) {
    errors {
      code
      message
    }
    status
    transaction {
      createdAt
      direction
      id
      settlementAmount
      settlementCurrency
      settlementDisplayAmount
      settlementDisplayCurrency
      settlementFee
      settlementDisplayFee
      settlementPrice {
        base
        offset
      }
      status
    }
  }
}
    `;
export type IntraLedgerBtcPaymentSendMutationFn = Apollo.MutationFunction<IntraLedgerBtcPaymentSendMutation, IntraLedgerBtcPaymentSendMutationVariables>;

/**
 * __useIntraLedgerBtcPaymentSendMutation__
 *
 * To run a mutation, you first call `useIntraLedgerBtcPaymentSendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useIntraLedgerBtcPaymentSendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [intraLedgerBtcPaymentSendMutation, { data, loading, error }] = useIntraLedgerBtcPaymentSendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useIntraLedgerBtcPaymentSendMutation(baseOptions?: Apollo.MutationHookOptions<IntraLedgerBtcPaymentSendMutation, IntraLedgerBtcPaymentSendMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<IntraLedgerBtcPaymentSendMutation, IntraLedgerBtcPaymentSendMutationVariables>(IntraLedgerBtcPaymentSendDocument, options);
      }
export type IntraLedgerBtcPaymentSendMutationHookResult = ReturnType<typeof useIntraLedgerBtcPaymentSendMutation>;
export type IntraLedgerBtcPaymentSendMutationResult = Apollo.MutationResult<IntraLedgerBtcPaymentSendMutation>;
export type IntraLedgerBtcPaymentSendMutationOptions = Apollo.BaseMutationOptions<IntraLedgerBtcPaymentSendMutation, IntraLedgerBtcPaymentSendMutationVariables>;
export const IntraLedgerUsdPaymentSendDocument = gql`
    mutation intraLedgerUsdPaymentSend($input: IntraLedgerUsdPaymentSendInput!) {
  intraLedgerUsdPaymentSend(input: $input) {
    errors {
      code
      message
    }
    status
    transaction {
      createdAt
      direction
      id
      settlementAmount
      settlementCurrency
      settlementDisplayAmount
      settlementDisplayCurrency
      settlementFee
      settlementDisplayFee
      settlementPrice {
        base
        offset
      }
      status
    }
  }
}
    `;
export type IntraLedgerUsdPaymentSendMutationFn = Apollo.MutationFunction<IntraLedgerUsdPaymentSendMutation, IntraLedgerUsdPaymentSendMutationVariables>;

/**
 * __useIntraLedgerUsdPaymentSendMutation__
 *
 * To run a mutation, you first call `useIntraLedgerUsdPaymentSendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useIntraLedgerUsdPaymentSendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [intraLedgerUsdPaymentSendMutation, { data, loading, error }] = useIntraLedgerUsdPaymentSendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useIntraLedgerUsdPaymentSendMutation(baseOptions?: Apollo.MutationHookOptions<IntraLedgerUsdPaymentSendMutation, IntraLedgerUsdPaymentSendMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<IntraLedgerUsdPaymentSendMutation, IntraLedgerUsdPaymentSendMutationVariables>(IntraLedgerUsdPaymentSendDocument, options);
      }
export type IntraLedgerUsdPaymentSendMutationHookResult = ReturnType<typeof useIntraLedgerUsdPaymentSendMutation>;
export type IntraLedgerUsdPaymentSendMutationResult = Apollo.MutationResult<IntraLedgerUsdPaymentSendMutation>;
export type IntraLedgerUsdPaymentSendMutationOptions = Apollo.BaseMutationOptions<IntraLedgerUsdPaymentSendMutation, IntraLedgerUsdPaymentSendMutationVariables>;
export const RealtimePriceDocument = gql`
    query RealtimePrice($currency: DisplayCurrency) {
  realtimePrice(currency: $currency) {
    btcSatPrice {
      base
      offset
    }
    denominatorCurrency
    id
    timestamp
    usdCentPrice {
      base
      offset
    }
  }
}
    `;

/**
 * __useRealtimePriceQuery__
 *
 * To run a query within a React component, call `useRealtimePriceQuery` and pass it any options that fit your needs.
 * When your component renders, `useRealtimePriceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRealtimePriceQuery({
 *   variables: {
 *      currency: // value for 'currency'
 *   },
 * });
 */
export function useRealtimePriceQuery(baseOptions?: Apollo.QueryHookOptions<RealtimePriceQuery, RealtimePriceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RealtimePriceQuery, RealtimePriceQueryVariables>(RealtimePriceDocument, options);
      }
export function useRealtimePriceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RealtimePriceQuery, RealtimePriceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RealtimePriceQuery, RealtimePriceQueryVariables>(RealtimePriceDocument, options);
        }
export type RealtimePriceQueryHookResult = ReturnType<typeof useRealtimePriceQuery>;
export type RealtimePriceLazyQueryHookResult = ReturnType<typeof useRealtimePriceLazyQuery>;
export type RealtimePriceQueryResult = Apollo.QueryResult<RealtimePriceQuery, RealtimePriceQueryVariables>;
export const MeDocument = gql`
    query me {
  me {
    createdAt
    id
    language
    phone
    defaultAccount {
      defaultWalletId
      displayCurrency
      id
      level
      wallets {
        accountId
        balance
        id
        pendingIncomingBalance
        walletCurrency
      }
    }
    totpEnabled
    username
    email {
      address
      verified
    }
  }
}
    `;

/**
 * __useMeQuery__
 *
 * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);
      }
export function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);
        }
export type MeQueryHookResult = ReturnType<typeof useMeQuery>;
export type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;
export type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;
export const OnChainUsdTxFeeDocument = gql`
    query OnChainUsdTxFee($address: OnChainAddress!, $amount: CentAmount!, $walletId: WalletId!, $speed: PayoutSpeed!) {
  onChainUsdTxFee(
    address: $address
    amount: $amount
    walletId: $walletId
    speed: $speed
  ) {
    amount
  }
}
    `;

/**
 * __useOnChainUsdTxFeeQuery__
 *
 * To run a query within a React component, call `useOnChainUsdTxFeeQuery` and pass it any options that fit your needs.
 * When your component renders, `useOnChainUsdTxFeeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOnChainUsdTxFeeQuery({
 *   variables: {
 *      address: // value for 'address'
 *      amount: // value for 'amount'
 *      walletId: // value for 'walletId'
 *      speed: // value for 'speed'
 *   },
 * });
 */
export function useOnChainUsdTxFeeQuery(baseOptions: Apollo.QueryHookOptions<OnChainUsdTxFeeQuery, OnChainUsdTxFeeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OnChainUsdTxFeeQuery, OnChainUsdTxFeeQueryVariables>(OnChainUsdTxFeeDocument, options);
      }
export function useOnChainUsdTxFeeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OnChainUsdTxFeeQuery, OnChainUsdTxFeeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OnChainUsdTxFeeQuery, OnChainUsdTxFeeQueryVariables>(OnChainUsdTxFeeDocument, options);
        }
export type OnChainUsdTxFeeQueryHookResult = ReturnType<typeof useOnChainUsdTxFeeQuery>;
export type OnChainUsdTxFeeLazyQueryHookResult = ReturnType<typeof useOnChainUsdTxFeeLazyQuery>;
export type OnChainUsdTxFeeQueryResult = Apollo.QueryResult<OnChainUsdTxFeeQuery, OnChainUsdTxFeeQueryVariables>;


export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping of union types */
export type ResolversUnionTypes<RefType extends Record<string, unknown>> = {
  InitiationVia: ( InitiationViaIntraLedger ) | ( InitiationViaLn ) | ( InitiationViaOnChain );
  SettlementVia: ( SettlementViaIntraLedger ) | ( SettlementViaLn ) | ( SettlementViaOnChain );
  UserUpdate: ( IntraLedgerUpdate ) | ( LnUpdate ) | ( OnChainUpdate ) | ( Price ) | ( RealtimePrice );
};

/** Mapping of interface types */
export type ResolversInterfaceTypes<RefType extends Record<string, unknown>> = {
  Account: ( ConsumerAccount );
  AccountLimit: ( OneDayAccountLimit );
  Error: ( GraphQlApplicationError );
  Invoice: ( LnInvoice ) | ( LnNoAmountInvoice );
  PriceInterface: ( PriceOfOneSatInMinorUnit ) | ( PriceOfOneSettlementMinorUnitInDisplayMinorUnit ) | ( PriceOfOneUsdCentInMinorUnit );
  Wallet: ( BtcWallet ) | ( UsdWallet );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Account: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Account']>;
  AccountDeletePayload: ResolverTypeWrapper<AccountDeletePayload>;
  AccountDisableNotificationCategoryInput: AccountDisableNotificationCategoryInput;
  AccountDisableNotificationChannelInput: AccountDisableNotificationChannelInput;
  AccountEnableNotificationCategoryInput: AccountEnableNotificationCategoryInput;
  AccountEnableNotificationChannelInput: AccountEnableNotificationChannelInput;
  AccountLevel: AccountLevel;
  AccountLimit: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['AccountLimit']>;
  AccountLimits: ResolverTypeWrapper<AccountLimits>;
  AccountUpdateDefaultWalletIdInput: AccountUpdateDefaultWalletIdInput;
  AccountUpdateDefaultWalletIdPayload: ResolverTypeWrapper<AccountUpdateDefaultWalletIdPayload>;
  AccountUpdateDisplayCurrencyInput: AccountUpdateDisplayCurrencyInput;
  AccountUpdateDisplayCurrencyPayload: ResolverTypeWrapper<AccountUpdateDisplayCurrencyPayload>;
  AccountUpdateNotificationSettingsPayload: ResolverTypeWrapper<AccountUpdateNotificationSettingsPayload>;
  AuthToken: ResolverTypeWrapper<Scalars['AuthToken']['output']>;
  AuthTokenPayload: ResolverTypeWrapper<AuthTokenPayload>;
  Authorization: ResolverTypeWrapper<Authorization>;
  BTCWallet: ResolverTypeWrapper<BtcWallet>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  BuildInformation: ResolverTypeWrapper<BuildInformation>;
  CallbackEndpoint: ResolverTypeWrapper<CallbackEndpoint>;
  CallbackEndpointAddInput: CallbackEndpointAddInput;
  CallbackEndpointAddPayload: ResolverTypeWrapper<CallbackEndpointAddPayload>;
  CallbackEndpointDeleteInput: CallbackEndpointDeleteInput;
  CaptchaCreateChallengePayload: ResolverTypeWrapper<CaptchaCreateChallengePayload>;
  CaptchaCreateChallengeResult: ResolverTypeWrapper<CaptchaCreateChallengeResult>;
  CaptchaRequestAuthCodeInput: CaptchaRequestAuthCodeInput;
  CentAmount: ResolverTypeWrapper<Scalars['CentAmount']['output']>;
  CentAmountPayload: ResolverTypeWrapper<CentAmountPayload>;
  ConsumerAccount: ResolverTypeWrapper<ConsumerAccount>;
  ContactAlias: ResolverTypeWrapper<Scalars['ContactAlias']['output']>;
  Coordinates: ResolverTypeWrapper<Coordinates>;
  Country: ResolverTypeWrapper<Country>;
  CountryCode: ResolverTypeWrapper<Scalars['CountryCode']['output']>;
  CreateWithdrawLinkInput: CreateWithdrawLinkInput;
  Currency: ResolverTypeWrapper<Currency>;
  CurrencyConversionEstimation: ResolverTypeWrapper<CurrencyConversionEstimation>;
  DepositFeesInformation: ResolverTypeWrapper<DepositFeesInformation>;
  DeviceNotificationTokenCreateInput: DeviceNotificationTokenCreateInput;
  DisplayCurrency: ResolverTypeWrapper<Scalars['DisplayCurrency']['output']>;
  Email: ResolverTypeWrapper<Email>;
  EmailAddress: ResolverTypeWrapper<Scalars['EmailAddress']['output']>;
  EmailRegistrationId: ResolverTypeWrapper<Scalars['EmailRegistrationId']['output']>;
  EndpointId: ResolverTypeWrapper<Scalars['EndpointId']['output']>;
  EndpointUrl: ResolverTypeWrapper<Scalars['EndpointUrl']['output']>;
  Error: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Error']>;
  ExchangeCurrencyUnit: ExchangeCurrencyUnit;
  Feedback: ResolverTypeWrapper<Scalars['Feedback']['output']>;
  FeedbackSubmitInput: FeedbackSubmitInput;
  FeesInformation: ResolverTypeWrapper<FeesInformation>;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  Globals: ResolverTypeWrapper<Globals>;
  GraphQLApplicationError: ResolverTypeWrapper<GraphQlApplicationError>;
  Hex32Bytes: ResolverTypeWrapper<Scalars['Hex32Bytes']['output']>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  InitiationVia: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['InitiationVia']>;
  InitiationViaIntraLedger: ResolverTypeWrapper<InitiationViaIntraLedger>;
  InitiationViaLn: ResolverTypeWrapper<InitiationViaLn>;
  InitiationViaOnChain: ResolverTypeWrapper<InitiationViaOnChain>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  IntraLedgerPaymentSendInput: IntraLedgerPaymentSendInput;
  IntraLedgerUpdate: ResolverTypeWrapper<IntraLedgerUpdate>;
  IntraLedgerUsdPaymentSendInput: IntraLedgerUsdPaymentSendInput;
  Invoice: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Invoice']>;
  InvoiceConnection: ResolverTypeWrapper<InvoiceConnection>;
  InvoiceEdge: ResolverTypeWrapper<InvoiceEdge>;
  InvoicePaymentStatus: InvoicePaymentStatus;
  Language: ResolverTypeWrapper<Scalars['Language']['output']>;
  LnAddressPaymentSendInput: LnAddressPaymentSendInput;
  LnInvoice: ResolverTypeWrapper<LnInvoice>;
  LnInvoiceCancelInput: LnInvoiceCancelInput;
  LnInvoiceCreateInput: LnInvoiceCreateInput;
  LnInvoiceCreateOnBehalfOfRecipientInput: LnInvoiceCreateOnBehalfOfRecipientInput;
  LnInvoiceFeeProbeInput: LnInvoiceFeeProbeInput;
  LnInvoicePayload: ResolverTypeWrapper<LnInvoicePayload>;
  LnInvoicePaymentInput: LnInvoicePaymentInput;
  LnInvoicePaymentStatus: ResolverTypeWrapper<LnInvoicePaymentStatus>;
  LnInvoicePaymentStatusByHashInput: LnInvoicePaymentStatusByHashInput;
  LnInvoicePaymentStatusByPaymentRequestInput: LnInvoicePaymentStatusByPaymentRequestInput;
  LnInvoicePaymentStatusInput: LnInvoicePaymentStatusInput;
  LnInvoicePaymentStatusPayload: ResolverTypeWrapper<LnInvoicePaymentStatusPayload>;
  LnNoAmountInvoice: ResolverTypeWrapper<LnNoAmountInvoice>;
  LnNoAmountInvoiceCreateInput: LnNoAmountInvoiceCreateInput;
  LnNoAmountInvoiceCreateOnBehalfOfRecipientInput: LnNoAmountInvoiceCreateOnBehalfOfRecipientInput;
  LnNoAmountInvoiceFeeProbeInput: LnNoAmountInvoiceFeeProbeInput;
  LnNoAmountInvoicePayload: ResolverTypeWrapper<LnNoAmountInvoicePayload>;
  LnNoAmountInvoicePaymentInput: LnNoAmountInvoicePaymentInput;
  LnNoAmountUsdInvoiceFeeProbeInput: LnNoAmountUsdInvoiceFeeProbeInput;
  LnNoAmountUsdInvoicePaymentInput: LnNoAmountUsdInvoicePaymentInput;
  LnPaymentPreImage: ResolverTypeWrapper<Scalars['LnPaymentPreImage']['output']>;
  LnPaymentRequest: ResolverTypeWrapper<Scalars['LnPaymentRequest']['output']>;
  LnPaymentSecret: ResolverTypeWrapper<Scalars['LnPaymentSecret']['output']>;
  LnUpdate: ResolverTypeWrapper<LnUpdate>;
  LnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientInput: LnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientInput;
  LnUsdInvoiceCreateInput: LnUsdInvoiceCreateInput;
  LnUsdInvoiceCreateOnBehalfOfRecipientInput: LnUsdInvoiceCreateOnBehalfOfRecipientInput;
  LnUsdInvoiceFeeProbeInput: LnUsdInvoiceFeeProbeInput;
  LnurlPaymentSendInput: LnurlPaymentSendInput;
  MapInfo: ResolverTypeWrapper<MapInfo>;
  MapMarker: ResolverTypeWrapper<MapMarker>;
  Memo: ResolverTypeWrapper<Scalars['Memo']['output']>;
  Merchant: ResolverTypeWrapper<Merchant>;
  MerchantMapSuggestInput: MerchantMapSuggestInput;
  MerchantPayload: ResolverTypeWrapper<MerchantPayload>;
  Minutes: ResolverTypeWrapper<Scalars['Minutes']['output']>;
  MobileVersions: ResolverTypeWrapper<MobileVersions>;
  Mutation: ResolverTypeWrapper<{}>;
  MyUpdatesPayload: ResolverTypeWrapper<Omit<MyUpdatesPayload, 'update'> & { update?: Maybe<ResolversTypes['UserUpdate']> }>;
  Network: Network;
  NotificationCategory: ResolverTypeWrapper<Scalars['NotificationCategory']['output']>;
  NotificationChannel: NotificationChannel;
  NotificationChannelSettings: ResolverTypeWrapper<NotificationChannelSettings>;
  NotificationSettings: ResolverTypeWrapper<NotificationSettings>;
  OnChainAddress: ResolverTypeWrapper<Scalars['OnChainAddress']['output']>;
  OnChainAddressCreateInput: OnChainAddressCreateInput;
  OnChainAddressCurrentInput: OnChainAddressCurrentInput;
  OnChainAddressPayload: ResolverTypeWrapper<OnChainAddressPayload>;
  OnChainPaymentSendAllInput: OnChainPaymentSendAllInput;
  OnChainPaymentSendInput: OnChainPaymentSendInput;
  OnChainTxFee: ResolverTypeWrapper<OnChainTxFee>;
  OnChainTxHash: ResolverTypeWrapper<Scalars['OnChainTxHash']['output']>;
  OnChainUpdate: ResolverTypeWrapper<OnChainUpdate>;
  OnChainUsdPaymentSendAsBtcDenominatedInput: OnChainUsdPaymentSendAsBtcDenominatedInput;
  OnChainUsdPaymentSendInput: OnChainUsdPaymentSendInput;
  OnChainUsdTxFee: ResolverTypeWrapper<OnChainUsdTxFee>;
  OneDayAccountLimit: ResolverTypeWrapper<OneDayAccountLimit>;
  OneTimeAuthCode: ResolverTypeWrapper<Scalars['OneTimeAuthCode']['output']>;
  PageInfo: ResolverTypeWrapper<PageInfo>;
  PaymentHash: ResolverTypeWrapper<Scalars['PaymentHash']['output']>;
  PaymentSendPayload: ResolverTypeWrapper<PaymentSendPayload>;
  PaymentSendResult: PaymentSendResult;
  PayoutSpeed: PayoutSpeed;
  Phone: ResolverTypeWrapper<Scalars['Phone']['output']>;
  PhoneCodeChannelType: PhoneCodeChannelType;
  Price: ResolverTypeWrapper<Price>;
  PriceGraphRange: PriceGraphRange;
  PriceInput: PriceInput;
  PriceInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['PriceInterface']>;
  PriceOfOneSatInMinorUnit: ResolverTypeWrapper<PriceOfOneSatInMinorUnit>;
  PriceOfOneSettlementMinorUnitInDisplayMinorUnit: ResolverTypeWrapper<PriceOfOneSettlementMinorUnitInDisplayMinorUnit>;
  PriceOfOneUsdCentInMinorUnit: ResolverTypeWrapper<PriceOfOneUsdCentInMinorUnit>;
  PricePayload: ResolverTypeWrapper<PricePayload>;
  PricePoint: ResolverTypeWrapper<PricePoint>;
  PublicWallet: ResolverTypeWrapper<PublicWallet>;
  Query: ResolverTypeWrapper<{}>;
  Quiz: ResolverTypeWrapper<Quiz>;
  QuizClaimInput: QuizClaimInput;
  QuizClaimPayload: ResolverTypeWrapper<QuizClaimPayload>;
  RealtimePrice: ResolverTypeWrapper<RealtimePrice>;
  RealtimePriceInput: RealtimePriceInput;
  RealtimePricePayload: ResolverTypeWrapper<RealtimePricePayload>;
  RedeemWithdrawLinkOnChainInput: RedeemWithdrawLinkOnChainInput;
  RedeemWithdrawLinkOnChainResult: ResolverTypeWrapper<RedeemWithdrawLinkOnChainResult>;
  RedeemWithdrawLinkOnChainResultStatus: RedeemWithdrawLinkOnChainResultStatus;
  SafeInt: ResolverTypeWrapper<Scalars['SafeInt']['output']>;
  SatAmount: ResolverTypeWrapper<Scalars['SatAmount']['output']>;
  SatAmountPayload: ResolverTypeWrapper<SatAmountPayload>;
  Scope: Scope;
  Seconds: ResolverTypeWrapper<Scalars['Seconds']['output']>;
  SettlementVia: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['SettlementVia']>;
  SettlementViaIntraLedger: ResolverTypeWrapper<SettlementViaIntraLedger>;
  SettlementViaLn: ResolverTypeWrapper<SettlementViaLn>;
  SettlementViaOnChain: ResolverTypeWrapper<SettlementViaOnChain>;
  SignedAmount: ResolverTypeWrapper<Scalars['SignedAmount']['output']>;
  SignedDisplayMajorAmount: ResolverTypeWrapper<Scalars['SignedDisplayMajorAmount']['output']>;
  Status: Status;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  Subscription: ResolverTypeWrapper<{}>;
  SuccessPayload: ResolverTypeWrapper<SuccessPayload>;
  SupportChatMessageAddInput: SupportChatMessageAddInput;
  SupportChatMessageAddPayload: ResolverTypeWrapper<SupportChatMessageAddPayload>;
  SupportMessage: ResolverTypeWrapper<SupportMessage>;
  SupportRole: SupportRole;
  Timestamp: ResolverTypeWrapper<Scalars['Timestamp']['output']>;
  TotpCode: ResolverTypeWrapper<Scalars['TotpCode']['output']>;
  TotpRegistrationId: ResolverTypeWrapper<Scalars['TotpRegistrationId']['output']>;
  TotpSecret: ResolverTypeWrapper<Scalars['TotpSecret']['output']>;
  Transaction: ResolverTypeWrapper<Omit<Transaction, 'initiationVia' | 'settlementVia'> & { initiationVia: ResolversTypes['InitiationVia'], settlementVia: ResolversTypes['SettlementVia'] }>;
  TransactionConnection: ResolverTypeWrapper<TransactionConnection>;
  TransactionEdge: ResolverTypeWrapper<TransactionEdge>;
  TxDirection: TxDirection;
  TxNotificationType: TxNotificationType;
  TxStatus: TxStatus;
  UpgradePayload: ResolverTypeWrapper<UpgradePayload>;
  UsdWallet: ResolverTypeWrapper<UsdWallet>;
  User: ResolverTypeWrapper<User>;
  UserContact: ResolverTypeWrapper<UserContact>;
  UserContactUpdateAliasInput: UserContactUpdateAliasInput;
  UserContactUpdateAliasPayload: ResolverTypeWrapper<UserContactUpdateAliasPayload>;
  UserEmailDeletePayload: ResolverTypeWrapper<UserEmailDeletePayload>;
  UserEmailRegistrationInitiateInput: UserEmailRegistrationInitiateInput;
  UserEmailRegistrationInitiatePayload: ResolverTypeWrapper<UserEmailRegistrationInitiatePayload>;
  UserEmailRegistrationValidateInput: UserEmailRegistrationValidateInput;
  UserEmailRegistrationValidatePayload: ResolverTypeWrapper<UserEmailRegistrationValidatePayload>;
  UserLoginInput: UserLoginInput;
  UserLoginUpgradeInput: UserLoginUpgradeInput;
  UserLogoutInput: UserLogoutInput;
  UserPhoneDeletePayload: ResolverTypeWrapper<UserPhoneDeletePayload>;
  UserPhoneRegistrationInitiateInput: UserPhoneRegistrationInitiateInput;
  UserPhoneRegistrationValidateInput: UserPhoneRegistrationValidateInput;
  UserPhoneRegistrationValidatePayload: ResolverTypeWrapper<UserPhoneRegistrationValidatePayload>;
  UserTotpDeletePayload: ResolverTypeWrapper<UserTotpDeletePayload>;
  UserTotpRegistrationInitiatePayload: ResolverTypeWrapper<UserTotpRegistrationInitiatePayload>;
  UserTotpRegistrationValidateInput: UserTotpRegistrationValidateInput;
  UserTotpRegistrationValidatePayload: ResolverTypeWrapper<UserTotpRegistrationValidatePayload>;
  UserUpdate: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['UserUpdate']>;
  UserUpdateLanguageInput: UserUpdateLanguageInput;
  UserUpdateLanguagePayload: ResolverTypeWrapper<UserUpdateLanguagePayload>;
  UserUpdateUsernameInput: UserUpdateUsernameInput;
  UserUpdateUsernamePayload: ResolverTypeWrapper<UserUpdateUsernamePayload>;
  Username: ResolverTypeWrapper<Scalars['Username']['output']>;
  Wallet: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Wallet']>;
  WalletCurrency: WalletCurrency;
  WalletId: ResolverTypeWrapper<Scalars['WalletId']['output']>;
  WithdrawLink: ResolverTypeWrapper<WithdrawLink>;
  WithdrawLinkWithSecret: ResolverTypeWrapper<WithdrawLinkWithSecret>;
  WithdrawLinksByUserIdResult: ResolverTypeWrapper<WithdrawLinksByUserIdResult>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Account: ResolversInterfaceTypes<ResolversParentTypes>['Account'];
  AccountDeletePayload: AccountDeletePayload;
  AccountDisableNotificationCategoryInput: AccountDisableNotificationCategoryInput;
  AccountDisableNotificationChannelInput: AccountDisableNotificationChannelInput;
  AccountEnableNotificationCategoryInput: AccountEnableNotificationCategoryInput;
  AccountEnableNotificationChannelInput: AccountEnableNotificationChannelInput;
  AccountLimit: ResolversInterfaceTypes<ResolversParentTypes>['AccountLimit'];
  AccountLimits: AccountLimits;
  AccountUpdateDefaultWalletIdInput: AccountUpdateDefaultWalletIdInput;
  AccountUpdateDefaultWalletIdPayload: AccountUpdateDefaultWalletIdPayload;
  AccountUpdateDisplayCurrencyInput: AccountUpdateDisplayCurrencyInput;
  AccountUpdateDisplayCurrencyPayload: AccountUpdateDisplayCurrencyPayload;
  AccountUpdateNotificationSettingsPayload: AccountUpdateNotificationSettingsPayload;
  AuthToken: Scalars['AuthToken']['output'];
  AuthTokenPayload: AuthTokenPayload;
  Authorization: Authorization;
  BTCWallet: BtcWallet;
  Boolean: Scalars['Boolean']['output'];
  BuildInformation: BuildInformation;
  CallbackEndpoint: CallbackEndpoint;
  CallbackEndpointAddInput: CallbackEndpointAddInput;
  CallbackEndpointAddPayload: CallbackEndpointAddPayload;
  CallbackEndpointDeleteInput: CallbackEndpointDeleteInput;
  CaptchaCreateChallengePayload: CaptchaCreateChallengePayload;
  CaptchaCreateChallengeResult: CaptchaCreateChallengeResult;
  CaptchaRequestAuthCodeInput: CaptchaRequestAuthCodeInput;
  CentAmount: Scalars['CentAmount']['output'];
  CentAmountPayload: CentAmountPayload;
  ConsumerAccount: ConsumerAccount;
  ContactAlias: Scalars['ContactAlias']['output'];
  Coordinates: Coordinates;
  Country: Country;
  CountryCode: Scalars['CountryCode']['output'];
  CreateWithdrawLinkInput: CreateWithdrawLinkInput;
  Currency: Currency;
  CurrencyConversionEstimation: CurrencyConversionEstimation;
  DepositFeesInformation: DepositFeesInformation;
  DeviceNotificationTokenCreateInput: DeviceNotificationTokenCreateInput;
  DisplayCurrency: Scalars['DisplayCurrency']['output'];
  Email: Email;
  EmailAddress: Scalars['EmailAddress']['output'];
  EmailRegistrationId: Scalars['EmailRegistrationId']['output'];
  EndpointId: Scalars['EndpointId']['output'];
  EndpointUrl: Scalars['EndpointUrl']['output'];
  Error: ResolversInterfaceTypes<ResolversParentTypes>['Error'];
  Feedback: Scalars['Feedback']['output'];
  FeedbackSubmitInput: FeedbackSubmitInput;
  FeesInformation: FeesInformation;
  Float: Scalars['Float']['output'];
  Globals: Globals;
  GraphQLApplicationError: GraphQlApplicationError;
  Hex32Bytes: Scalars['Hex32Bytes']['output'];
  ID: Scalars['ID']['output'];
  InitiationVia: ResolversUnionTypes<ResolversParentTypes>['InitiationVia'];
  InitiationViaIntraLedger: InitiationViaIntraLedger;
  InitiationViaLn: InitiationViaLn;
  InitiationViaOnChain: InitiationViaOnChain;
  Int: Scalars['Int']['output'];
  IntraLedgerPaymentSendInput: IntraLedgerPaymentSendInput;
  IntraLedgerUpdate: IntraLedgerUpdate;
  IntraLedgerUsdPaymentSendInput: IntraLedgerUsdPaymentSendInput;
  Invoice: ResolversInterfaceTypes<ResolversParentTypes>['Invoice'];
  InvoiceConnection: InvoiceConnection;
  InvoiceEdge: InvoiceEdge;
  Language: Scalars['Language']['output'];
  LnAddressPaymentSendInput: LnAddressPaymentSendInput;
  LnInvoice: LnInvoice;
  LnInvoiceCancelInput: LnInvoiceCancelInput;
  LnInvoiceCreateInput: LnInvoiceCreateInput;
  LnInvoiceCreateOnBehalfOfRecipientInput: LnInvoiceCreateOnBehalfOfRecipientInput;
  LnInvoiceFeeProbeInput: LnInvoiceFeeProbeInput;
  LnInvoicePayload: LnInvoicePayload;
  LnInvoicePaymentInput: LnInvoicePaymentInput;
  LnInvoicePaymentStatus: LnInvoicePaymentStatus;
  LnInvoicePaymentStatusByHashInput: LnInvoicePaymentStatusByHashInput;
  LnInvoicePaymentStatusByPaymentRequestInput: LnInvoicePaymentStatusByPaymentRequestInput;
  LnInvoicePaymentStatusInput: LnInvoicePaymentStatusInput;
  LnInvoicePaymentStatusPayload: LnInvoicePaymentStatusPayload;
  LnNoAmountInvoice: LnNoAmountInvoice;
  LnNoAmountInvoiceCreateInput: LnNoAmountInvoiceCreateInput;
  LnNoAmountInvoiceCreateOnBehalfOfRecipientInput: LnNoAmountInvoiceCreateOnBehalfOfRecipientInput;
  LnNoAmountInvoiceFeeProbeInput: LnNoAmountInvoiceFeeProbeInput;
  LnNoAmountInvoicePayload: LnNoAmountInvoicePayload;
  LnNoAmountInvoicePaymentInput: LnNoAmountInvoicePaymentInput;
  LnNoAmountUsdInvoiceFeeProbeInput: LnNoAmountUsdInvoiceFeeProbeInput;
  LnNoAmountUsdInvoicePaymentInput: LnNoAmountUsdInvoicePaymentInput;
  LnPaymentPreImage: Scalars['LnPaymentPreImage']['output'];
  LnPaymentRequest: Scalars['LnPaymentRequest']['output'];
  LnPaymentSecret: Scalars['LnPaymentSecret']['output'];
  LnUpdate: LnUpdate;
  LnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientInput: LnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientInput;
  LnUsdInvoiceCreateInput: LnUsdInvoiceCreateInput;
  LnUsdInvoiceCreateOnBehalfOfRecipientInput: LnUsdInvoiceCreateOnBehalfOfRecipientInput;
  LnUsdInvoiceFeeProbeInput: LnUsdInvoiceFeeProbeInput;
  LnurlPaymentSendInput: LnurlPaymentSendInput;
  MapInfo: MapInfo;
  MapMarker: MapMarker;
  Memo: Scalars['Memo']['output'];
  Merchant: Merchant;
  MerchantMapSuggestInput: MerchantMapSuggestInput;
  MerchantPayload: MerchantPayload;
  Minutes: Scalars['Minutes']['output'];
  MobileVersions: MobileVersions;
  Mutation: {};
  MyUpdatesPayload: Omit<MyUpdatesPayload, 'update'> & { update?: Maybe<ResolversParentTypes['UserUpdate']> };
  NotificationCategory: Scalars['NotificationCategory']['output'];
  NotificationChannelSettings: NotificationChannelSettings;
  NotificationSettings: NotificationSettings;
  OnChainAddress: Scalars['OnChainAddress']['output'];
  OnChainAddressCreateInput: OnChainAddressCreateInput;
  OnChainAddressCurrentInput: OnChainAddressCurrentInput;
  OnChainAddressPayload: OnChainAddressPayload;
  OnChainPaymentSendAllInput: OnChainPaymentSendAllInput;
  OnChainPaymentSendInput: OnChainPaymentSendInput;
  OnChainTxFee: OnChainTxFee;
  OnChainTxHash: Scalars['OnChainTxHash']['output'];
  OnChainUpdate: OnChainUpdate;
  OnChainUsdPaymentSendAsBtcDenominatedInput: OnChainUsdPaymentSendAsBtcDenominatedInput;
  OnChainUsdPaymentSendInput: OnChainUsdPaymentSendInput;
  OnChainUsdTxFee: OnChainUsdTxFee;
  OneDayAccountLimit: OneDayAccountLimit;
  OneTimeAuthCode: Scalars['OneTimeAuthCode']['output'];
  PageInfo: PageInfo;
  PaymentHash: Scalars['PaymentHash']['output'];
  PaymentSendPayload: PaymentSendPayload;
  Phone: Scalars['Phone']['output'];
  Price: Price;
  PriceInput: PriceInput;
  PriceInterface: ResolversInterfaceTypes<ResolversParentTypes>['PriceInterface'];
  PriceOfOneSatInMinorUnit: PriceOfOneSatInMinorUnit;
  PriceOfOneSettlementMinorUnitInDisplayMinorUnit: PriceOfOneSettlementMinorUnitInDisplayMinorUnit;
  PriceOfOneUsdCentInMinorUnit: PriceOfOneUsdCentInMinorUnit;
  PricePayload: PricePayload;
  PricePoint: PricePoint;
  PublicWallet: PublicWallet;
  Query: {};
  Quiz: Quiz;
  QuizClaimInput: QuizClaimInput;
  QuizClaimPayload: QuizClaimPayload;
  RealtimePrice: RealtimePrice;
  RealtimePriceInput: RealtimePriceInput;
  RealtimePricePayload: RealtimePricePayload;
  RedeemWithdrawLinkOnChainInput: RedeemWithdrawLinkOnChainInput;
  RedeemWithdrawLinkOnChainResult: RedeemWithdrawLinkOnChainResult;
  SafeInt: Scalars['SafeInt']['output'];
  SatAmount: Scalars['SatAmount']['output'];
  SatAmountPayload: SatAmountPayload;
  Seconds: Scalars['Seconds']['output'];
  SettlementVia: ResolversUnionTypes<ResolversParentTypes>['SettlementVia'];
  SettlementViaIntraLedger: SettlementViaIntraLedger;
  SettlementViaLn: SettlementViaLn;
  SettlementViaOnChain: SettlementViaOnChain;
  SignedAmount: Scalars['SignedAmount']['output'];
  SignedDisplayMajorAmount: Scalars['SignedDisplayMajorAmount']['output'];
  String: Scalars['String']['output'];
  Subscription: {};
  SuccessPayload: SuccessPayload;
  SupportChatMessageAddInput: SupportChatMessageAddInput;
  SupportChatMessageAddPayload: SupportChatMessageAddPayload;
  SupportMessage: SupportMessage;
  Timestamp: Scalars['Timestamp']['output'];
  TotpCode: Scalars['TotpCode']['output'];
  TotpRegistrationId: Scalars['TotpRegistrationId']['output'];
  TotpSecret: Scalars['TotpSecret']['output'];
  Transaction: Omit<Transaction, 'initiationVia' | 'settlementVia'> & { initiationVia: ResolversParentTypes['InitiationVia'], settlementVia: ResolversParentTypes['SettlementVia'] };
  TransactionConnection: TransactionConnection;
  TransactionEdge: TransactionEdge;
  UpgradePayload: UpgradePayload;
  UsdWallet: UsdWallet;
  User: User;
  UserContact: UserContact;
  UserContactUpdateAliasInput: UserContactUpdateAliasInput;
  UserContactUpdateAliasPayload: UserContactUpdateAliasPayload;
  UserEmailDeletePayload: UserEmailDeletePayload;
  UserEmailRegistrationInitiateInput: UserEmailRegistrationInitiateInput;
  UserEmailRegistrationInitiatePayload: UserEmailRegistrationInitiatePayload;
  UserEmailRegistrationValidateInput: UserEmailRegistrationValidateInput;
  UserEmailRegistrationValidatePayload: UserEmailRegistrationValidatePayload;
  UserLoginInput: UserLoginInput;
  UserLoginUpgradeInput: UserLoginUpgradeInput;
  UserLogoutInput: UserLogoutInput;
  UserPhoneDeletePayload: UserPhoneDeletePayload;
  UserPhoneRegistrationInitiateInput: UserPhoneRegistrationInitiateInput;
  UserPhoneRegistrationValidateInput: UserPhoneRegistrationValidateInput;
  UserPhoneRegistrationValidatePayload: UserPhoneRegistrationValidatePayload;
  UserTotpDeletePayload: UserTotpDeletePayload;
  UserTotpRegistrationInitiatePayload: UserTotpRegistrationInitiatePayload;
  UserTotpRegistrationValidateInput: UserTotpRegistrationValidateInput;
  UserTotpRegistrationValidatePayload: UserTotpRegistrationValidatePayload;
  UserUpdate: ResolversUnionTypes<ResolversParentTypes>['UserUpdate'];
  UserUpdateLanguageInput: UserUpdateLanguageInput;
  UserUpdateLanguagePayload: UserUpdateLanguagePayload;
  UserUpdateUsernameInput: UserUpdateUsernameInput;
  UserUpdateUsernamePayload: UserUpdateUsernamePayload;
  Username: Scalars['Username']['output'];
  Wallet: ResolversInterfaceTypes<ResolversParentTypes>['Wallet'];
  WalletId: Scalars['WalletId']['output'];
  WithdrawLink: WithdrawLink;
  WithdrawLinkWithSecret: WithdrawLinkWithSecret;
  WithdrawLinksByUserIdResult: WithdrawLinksByUserIdResult;
};

export type AccountResolvers<ContextType = any, ParentType extends ResolversParentTypes['Account'] = ResolversParentTypes['Account']> = {
  __resolveType: TypeResolveFn<'ConsumerAccount', ParentType, ContextType>;
  callbackEndpoints?: Resolver<Array<ResolversTypes['CallbackEndpoint']>, ParentType, ContextType>;
  csvTransactions?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<AccountCsvTransactionsArgs, 'walletIds'>>;
  defaultWallet?: Resolver<ResolversTypes['PublicWallet'], ParentType, ContextType>;
  defaultWalletId?: Resolver<ResolversTypes['WalletId'], ParentType, ContextType>;
  displayCurrency?: Resolver<ResolversTypes['DisplayCurrency'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  invoices?: Resolver<Maybe<ResolversTypes['InvoiceConnection']>, ParentType, ContextType, Partial<AccountInvoicesArgs>>;
  level?: Resolver<ResolversTypes['AccountLevel'], ParentType, ContextType>;
  limits?: Resolver<ResolversTypes['AccountLimits'], ParentType, ContextType>;
  notificationSettings?: Resolver<ResolversTypes['NotificationSettings'], ParentType, ContextType>;
  pendingIncomingTransactions?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, Partial<AccountPendingIncomingTransactionsArgs>>;
  realtimePrice?: Resolver<ResolversTypes['RealtimePrice'], ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, Partial<AccountTransactionsArgs>>;
  walletById?: Resolver<ResolversTypes['Wallet'], ParentType, ContextType, RequireFields<AccountWalletByIdArgs, 'walletId'>>;
  wallets?: Resolver<Array<ResolversTypes['Wallet']>, ParentType, ContextType>;
};

export type AccountDeletePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountDeletePayload'] = ResolversParentTypes['AccountDeletePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountLimitResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountLimit'] = ResolversParentTypes['AccountLimit']> = {
  __resolveType: TypeResolveFn<'OneDayAccountLimit', ParentType, ContextType>;
  interval?: Resolver<Maybe<ResolversTypes['Seconds']>, ParentType, ContextType>;
  remainingLimit?: Resolver<Maybe<ResolversTypes['CentAmount']>, ParentType, ContextType>;
  totalLimit?: Resolver<ResolversTypes['CentAmount'], ParentType, ContextType>;
};

export type AccountLimitsResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountLimits'] = ResolversParentTypes['AccountLimits']> = {
  convert?: Resolver<Array<ResolversTypes['AccountLimit']>, ParentType, ContextType>;
  internalSend?: Resolver<Array<ResolversTypes['AccountLimit']>, ParentType, ContextType>;
  withdrawal?: Resolver<Array<ResolversTypes['AccountLimit']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountUpdateDefaultWalletIdPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountUpdateDefaultWalletIdPayload'] = ResolversParentTypes['AccountUpdateDefaultWalletIdPayload']> = {
  account?: Resolver<Maybe<ResolversTypes['ConsumerAccount']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountUpdateDisplayCurrencyPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountUpdateDisplayCurrencyPayload'] = ResolversParentTypes['AccountUpdateDisplayCurrencyPayload']> = {
  account?: Resolver<Maybe<ResolversTypes['ConsumerAccount']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountUpdateNotificationSettingsPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountUpdateNotificationSettingsPayload'] = ResolversParentTypes['AccountUpdateNotificationSettingsPayload']> = {
  account?: Resolver<Maybe<ResolversTypes['ConsumerAccount']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface AuthTokenScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AuthToken'], any> {
  name: 'AuthToken';
}

export type AuthTokenPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthTokenPayload'] = ResolversParentTypes['AuthTokenPayload']> = {
  authToken?: Resolver<Maybe<ResolversTypes['AuthToken']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  totpRequired?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorizationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Authorization'] = ResolversParentTypes['Authorization']> = {
  scopes?: Resolver<Array<ResolversTypes['Scope']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BtcWalletResolvers<ContextType = any, ParentType extends ResolversParentTypes['BTCWallet'] = ResolversParentTypes['BTCWallet']> = {
  accountId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  balance?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  invoiceByPaymentHash?: Resolver<ResolversTypes['Invoice'], ParentType, ContextType, RequireFields<BtcWalletInvoiceByPaymentHashArgs, 'paymentHash'>>;
  invoices?: Resolver<Maybe<ResolversTypes['InvoiceConnection']>, ParentType, ContextType, Partial<BtcWalletInvoicesArgs>>;
  pendingIncomingBalance?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  pendingIncomingTransactions?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType>;
  pendingIncomingTransactionsByAddress?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<BtcWalletPendingIncomingTransactionsByAddressArgs, 'address'>>;
  transactionById?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType, RequireFields<BtcWalletTransactionByIdArgs, 'transactionId'>>;
  transactions?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, Partial<BtcWalletTransactionsArgs>>;
  transactionsByAddress?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, RequireFields<BtcWalletTransactionsByAddressArgs, 'address'>>;
  transactionsByPaymentHash?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<BtcWalletTransactionsByPaymentHashArgs, 'paymentHash'>>;
  transactionsByPaymentRequest?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<BtcWalletTransactionsByPaymentRequestArgs, 'paymentRequest'>>;
  walletCurrency?: Resolver<ResolversTypes['WalletCurrency'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BuildInformationResolvers<ContextType = any, ParentType extends ResolversParentTypes['BuildInformation'] = ResolversParentTypes['BuildInformation']> = {
  commitHash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  helmRevision?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallbackEndpointResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallbackEndpoint'] = ResolversParentTypes['CallbackEndpoint']> = {
  id?: Resolver<ResolversTypes['EndpointId'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['EndpointUrl'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallbackEndpointAddPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallbackEndpointAddPayload'] = ResolversParentTypes['CallbackEndpointAddPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['EndpointId']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CaptchaCreateChallengePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CaptchaCreateChallengePayload'] = ResolversParentTypes['CaptchaCreateChallengePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  result?: Resolver<Maybe<ResolversTypes['CaptchaCreateChallengeResult']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CaptchaCreateChallengeResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['CaptchaCreateChallengeResult'] = ResolversParentTypes['CaptchaCreateChallengeResult']> = {
  challengeCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  failbackMode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  newCaptcha?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface CentAmountScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CentAmount'], any> {
  name: 'CentAmount';
}

export type CentAmountPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CentAmountPayload'] = ResolversParentTypes['CentAmountPayload']> = {
  amount?: Resolver<Maybe<ResolversTypes['CentAmount']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConsumerAccountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConsumerAccount'] = ResolversParentTypes['ConsumerAccount']> = {
  callbackEndpoints?: Resolver<Array<ResolversTypes['CallbackEndpoint']>, ParentType, ContextType>;
  csvTransactions?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<ConsumerAccountCsvTransactionsArgs, 'walletIds'>>;
  defaultWallet?: Resolver<ResolversTypes['PublicWallet'], ParentType, ContextType>;
  defaultWalletId?: Resolver<ResolversTypes['WalletId'], ParentType, ContextType>;
  displayCurrency?: Resolver<ResolversTypes['DisplayCurrency'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  invoices?: Resolver<Maybe<ResolversTypes['InvoiceConnection']>, ParentType, ContextType, Partial<ConsumerAccountInvoicesArgs>>;
  level?: Resolver<ResolversTypes['AccountLevel'], ParentType, ContextType>;
  limits?: Resolver<ResolversTypes['AccountLimits'], ParentType, ContextType>;
  notificationSettings?: Resolver<ResolversTypes['NotificationSettings'], ParentType, ContextType>;
  pendingIncomingTransactions?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, Partial<ConsumerAccountPendingIncomingTransactionsArgs>>;
  quiz?: Resolver<Array<ResolversTypes['Quiz']>, ParentType, ContextType>;
  realtimePrice?: Resolver<ResolversTypes['RealtimePrice'], ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, Partial<ConsumerAccountTransactionsArgs>>;
  walletById?: Resolver<ResolversTypes['Wallet'], ParentType, ContextType, RequireFields<ConsumerAccountWalletByIdArgs, 'walletId'>>;
  wallets?: Resolver<Array<ResolversTypes['Wallet']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface ContactAliasScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ContactAlias'], any> {
  name: 'ContactAlias';
}

export type CoordinatesResolvers<ContextType = any, ParentType extends ResolversParentTypes['Coordinates'] = ResolversParentTypes['Coordinates']> = {
  latitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  longitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CountryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Country'] = ResolversParentTypes['Country']> = {
  id?: Resolver<ResolversTypes['CountryCode'], ParentType, ContextType>;
  supportedAuthChannels?: Resolver<Array<ResolversTypes['PhoneCodeChannelType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface CountryCodeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CountryCode'], any> {
  name: 'CountryCode';
}

export type CurrencyResolvers<ContextType = any, ParentType extends ResolversParentTypes['Currency'] = ResolversParentTypes['Currency']> = {
  flag?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fractionDigits?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyConversionEstimationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CurrencyConversionEstimation'] = ResolversParentTypes['CurrencyConversionEstimation']> = {
  btcSatAmount?: Resolver<ResolversTypes['SatAmount'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  usdCentAmount?: Resolver<ResolversTypes['CentAmount'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DepositFeesInformationResolvers<ContextType = any, ParentType extends ResolversParentTypes['DepositFeesInformation'] = ResolversParentTypes['DepositFeesInformation']> = {
  minBankFee?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  minBankFeeThreshold?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ratio?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DisplayCurrencyScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DisplayCurrency'], any> {
  name: 'DisplayCurrency';
}

export type EmailResolvers<ContextType = any, ParentType extends ResolversParentTypes['Email'] = ResolversParentTypes['Email']> = {
  address?: Resolver<Maybe<ResolversTypes['EmailAddress']>, ParentType, ContextType>;
  verified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface EmailAddressScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['EmailAddress'], any> {
  name: 'EmailAddress';
}

export interface EmailRegistrationIdScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['EmailRegistrationId'], any> {
  name: 'EmailRegistrationId';
}

export interface EndpointIdScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['EndpointId'], any> {
  name: 'EndpointId';
}

export interface EndpointUrlScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['EndpointUrl'], any> {
  name: 'EndpointUrl';
}

export type ErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Error'] = ResolversParentTypes['Error']> = {
  __resolveType: TypeResolveFn<'GraphQLApplicationError', ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  path?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
};

export interface FeedbackScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Feedback'], any> {
  name: 'Feedback';
}

export type FeesInformationResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeesInformation'] = ResolversParentTypes['FeesInformation']> = {
  deposit?: Resolver<ResolversTypes['DepositFeesInformation'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GlobalsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Globals'] = ResolversParentTypes['Globals']> = {
  buildInformation?: Resolver<ResolversTypes['BuildInformation'], ParentType, ContextType>;
  feesInformation?: Resolver<ResolversTypes['FeesInformation'], ParentType, ContextType>;
  lightningAddressDomain?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lightningAddressDomainAliases?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Network'], ParentType, ContextType>;
  nodesIds?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  supportedCountries?: Resolver<Array<ResolversTypes['Country']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GraphQlApplicationErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['GraphQLApplicationError'] = ResolversParentTypes['GraphQLApplicationError']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  path?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface Hex32BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Hex32Bytes'], any> {
  name: 'Hex32Bytes';
}

export type InitiationViaResolvers<ContextType = any, ParentType extends ResolversParentTypes['InitiationVia'] = ResolversParentTypes['InitiationVia']> = {
  __resolveType: TypeResolveFn<'InitiationViaIntraLedger' | 'InitiationViaLn' | 'InitiationViaOnChain', ParentType, ContextType>;
};

export type InitiationViaIntraLedgerResolvers<ContextType = any, ParentType extends ResolversParentTypes['InitiationViaIntraLedger'] = ResolversParentTypes['InitiationViaIntraLedger']> = {
  counterPartyUsername?: Resolver<Maybe<ResolversTypes['Username']>, ParentType, ContextType>;
  counterPartyWalletId?: Resolver<Maybe<ResolversTypes['WalletId']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InitiationViaLnResolvers<ContextType = any, ParentType extends ResolversParentTypes['InitiationViaLn'] = ResolversParentTypes['InitiationViaLn']> = {
  paymentHash?: Resolver<ResolversTypes['PaymentHash'], ParentType, ContextType>;
  paymentRequest?: Resolver<ResolversTypes['LnPaymentRequest'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InitiationViaOnChainResolvers<ContextType = any, ParentType extends ResolversParentTypes['InitiationViaOnChain'] = ResolversParentTypes['InitiationViaOnChain']> = {
  address?: Resolver<ResolversTypes['OnChainAddress'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IntraLedgerUpdateResolvers<ContextType = any, ParentType extends ResolversParentTypes['IntraLedgerUpdate'] = ResolversParentTypes['IntraLedgerUpdate']> = {
  amount?: Resolver<ResolversTypes['SatAmount'], ParentType, ContextType>;
  displayCurrencyPerSat?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType>;
  txNotificationType?: Resolver<ResolversTypes['TxNotificationType'], ParentType, ContextType>;
  usdPerSat?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  walletId?: Resolver<ResolversTypes['WalletId'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvoiceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Invoice'] = ResolversParentTypes['Invoice']> = {
  __resolveType: TypeResolveFn<'LnInvoice' | 'LnNoAmountInvoice', ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  paymentHash?: Resolver<ResolversTypes['PaymentHash'], ParentType, ContextType>;
  paymentRequest?: Resolver<ResolversTypes['LnPaymentRequest'], ParentType, ContextType>;
  paymentSecret?: Resolver<ResolversTypes['LnPaymentSecret'], ParentType, ContextType>;
  paymentStatus?: Resolver<ResolversTypes['InvoicePaymentStatus'], ParentType, ContextType>;
};

export type InvoiceConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['InvoiceConnection'] = ResolversParentTypes['InvoiceConnection']> = {
  edges?: Resolver<Maybe<Array<ResolversTypes['InvoiceEdge']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvoiceEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['InvoiceEdge'] = ResolversParentTypes['InvoiceEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Invoice'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface LanguageScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Language'], any> {
  name: 'Language';
}

export type LnInvoiceResolvers<ContextType = any, ParentType extends ResolversParentTypes['LnInvoice'] = ResolversParentTypes['LnInvoice']> = {
  createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  paymentHash?: Resolver<ResolversTypes['PaymentHash'], ParentType, ContextType>;
  paymentRequest?: Resolver<ResolversTypes['LnPaymentRequest'], ParentType, ContextType>;
  paymentSecret?: Resolver<ResolversTypes['LnPaymentSecret'], ParentType, ContextType>;
  paymentStatus?: Resolver<ResolversTypes['InvoicePaymentStatus'], ParentType, ContextType>;
  satoshis?: Resolver<ResolversTypes['SatAmount'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LnInvoicePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['LnInvoicePayload'] = ResolversParentTypes['LnInvoicePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['LnInvoice']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LnInvoicePaymentStatusResolvers<ContextType = any, ParentType extends ResolversParentTypes['LnInvoicePaymentStatus'] = ResolversParentTypes['LnInvoicePaymentStatus']> = {
  paymentHash?: Resolver<Maybe<ResolversTypes['PaymentHash']>, ParentType, ContextType>;
  paymentRequest?: Resolver<Maybe<ResolversTypes['LnPaymentRequest']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['InvoicePaymentStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LnInvoicePaymentStatusPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['LnInvoicePaymentStatusPayload'] = ResolversParentTypes['LnInvoicePaymentStatusPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  paymentHash?: Resolver<Maybe<ResolversTypes['PaymentHash']>, ParentType, ContextType>;
  paymentRequest?: Resolver<Maybe<ResolversTypes['LnPaymentRequest']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['InvoicePaymentStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LnNoAmountInvoiceResolvers<ContextType = any, ParentType extends ResolversParentTypes['LnNoAmountInvoice'] = ResolversParentTypes['LnNoAmountInvoice']> = {
  createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  paymentHash?: Resolver<ResolversTypes['PaymentHash'], ParentType, ContextType>;
  paymentRequest?: Resolver<ResolversTypes['LnPaymentRequest'], ParentType, ContextType>;
  paymentSecret?: Resolver<ResolversTypes['LnPaymentSecret'], ParentType, ContextType>;
  paymentStatus?: Resolver<ResolversTypes['InvoicePaymentStatus'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LnNoAmountInvoicePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['LnNoAmountInvoicePayload'] = ResolversParentTypes['LnNoAmountInvoicePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['LnNoAmountInvoice']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface LnPaymentPreImageScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['LnPaymentPreImage'], any> {
  name: 'LnPaymentPreImage';
}

export interface LnPaymentRequestScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['LnPaymentRequest'], any> {
  name: 'LnPaymentRequest';
}

export interface LnPaymentSecretScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['LnPaymentSecret'], any> {
  name: 'LnPaymentSecret';
}

export type LnUpdateResolvers<ContextType = any, ParentType extends ResolversParentTypes['LnUpdate'] = ResolversParentTypes['LnUpdate']> = {
  paymentHash?: Resolver<ResolversTypes['PaymentHash'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['InvoicePaymentStatus'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType>;
  walletId?: Resolver<ResolversTypes['WalletId'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MapInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['MapInfo'] = ResolversParentTypes['MapInfo']> = {
  coordinates?: Resolver<ResolversTypes['Coordinates'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MapMarkerResolvers<ContextType = any, ParentType extends ResolversParentTypes['MapMarker'] = ResolversParentTypes['MapMarker']> = {
  mapInfo?: Resolver<ResolversTypes['MapInfo'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['Username'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface MemoScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Memo'], any> {
  name: 'Memo';
}

export type MerchantResolvers<ContextType = any, ParentType extends ResolversParentTypes['Merchant'] = ResolversParentTypes['Merchant']> = {
  coordinates?: Resolver<ResolversTypes['Coordinates'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['Username'], ParentType, ContextType>;
  validated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MerchantPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['MerchantPayload'] = ResolversParentTypes['MerchantPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  merchant?: Resolver<Maybe<ResolversTypes['Merchant']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface MinutesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Minutes'], any> {
  name: 'Minutes';
}

export type MobileVersionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MobileVersions'] = ResolversParentTypes['MobileVersions']> = {
  currentSupported?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  minSupported?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  platform?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  accountDelete?: Resolver<ResolversTypes['AccountDeletePayload'], ParentType, ContextType>;
  accountDisableNotificationCategory?: Resolver<ResolversTypes['AccountUpdateNotificationSettingsPayload'], ParentType, ContextType, RequireFields<MutationAccountDisableNotificationCategoryArgs, 'input'>>;
  accountDisableNotificationChannel?: Resolver<ResolversTypes['AccountUpdateNotificationSettingsPayload'], ParentType, ContextType, RequireFields<MutationAccountDisableNotificationChannelArgs, 'input'>>;
  accountEnableNotificationCategory?: Resolver<ResolversTypes['AccountUpdateNotificationSettingsPayload'], ParentType, ContextType, RequireFields<MutationAccountEnableNotificationCategoryArgs, 'input'>>;
  accountEnableNotificationChannel?: Resolver<ResolversTypes['AccountUpdateNotificationSettingsPayload'], ParentType, ContextType, RequireFields<MutationAccountEnableNotificationChannelArgs, 'input'>>;
  accountUpdateDefaultWalletId?: Resolver<ResolversTypes['AccountUpdateDefaultWalletIdPayload'], ParentType, ContextType, RequireFields<MutationAccountUpdateDefaultWalletIdArgs, 'input'>>;
  accountUpdateDisplayCurrency?: Resolver<ResolversTypes['AccountUpdateDisplayCurrencyPayload'], ParentType, ContextType, RequireFields<MutationAccountUpdateDisplayCurrencyArgs, 'input'>>;
  callbackEndpointAdd?: Resolver<ResolversTypes['CallbackEndpointAddPayload'], ParentType, ContextType, RequireFields<MutationCallbackEndpointAddArgs, 'input'>>;
  callbackEndpointDelete?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<MutationCallbackEndpointDeleteArgs, 'input'>>;
  captchaCreateChallenge?: Resolver<ResolversTypes['CaptchaCreateChallengePayload'], ParentType, ContextType>;
  captchaRequestAuthCode?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<MutationCaptchaRequestAuthCodeArgs, 'input'>>;
  createWithdrawLink?: Resolver<ResolversTypes['WithdrawLinkWithSecret'], ParentType, ContextType, RequireFields<MutationCreateWithdrawLinkArgs, 'input'>>;
  deviceNotificationTokenCreate?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<MutationDeviceNotificationTokenCreateArgs, 'input'>>;
  feedbackSubmit?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<MutationFeedbackSubmitArgs, 'input'>>;
  intraLedgerPaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationIntraLedgerPaymentSendArgs, 'input'>>;
  intraLedgerUsdPaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationIntraLedgerUsdPaymentSendArgs, 'input'>>;
  lnAddressPaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationLnAddressPaymentSendArgs, 'input'>>;
  lnInvoiceCancel?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<MutationLnInvoiceCancelArgs, 'input'>>;
  lnInvoiceCreate?: Resolver<ResolversTypes['LnInvoicePayload'], ParentType, ContextType, RequireFields<MutationLnInvoiceCreateArgs, 'input'>>;
  lnInvoiceCreateOnBehalfOfRecipient?: Resolver<ResolversTypes['LnInvoicePayload'], ParentType, ContextType, RequireFields<MutationLnInvoiceCreateOnBehalfOfRecipientArgs, 'input'>>;
  lnInvoiceFeeProbe?: Resolver<ResolversTypes['SatAmountPayload'], ParentType, ContextType, RequireFields<MutationLnInvoiceFeeProbeArgs, 'input'>>;
  lnInvoicePaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationLnInvoicePaymentSendArgs, 'input'>>;
  lnNoAmountInvoiceCreate?: Resolver<ResolversTypes['LnNoAmountInvoicePayload'], ParentType, ContextType, RequireFields<MutationLnNoAmountInvoiceCreateArgs, 'input'>>;
  lnNoAmountInvoiceCreateOnBehalfOfRecipient?: Resolver<ResolversTypes['LnNoAmountInvoicePayload'], ParentType, ContextType, RequireFields<MutationLnNoAmountInvoiceCreateOnBehalfOfRecipientArgs, 'input'>>;
  lnNoAmountInvoiceFeeProbe?: Resolver<ResolversTypes['SatAmountPayload'], ParentType, ContextType, RequireFields<MutationLnNoAmountInvoiceFeeProbeArgs, 'input'>>;
  lnNoAmountInvoicePaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationLnNoAmountInvoicePaymentSendArgs, 'input'>>;
  lnNoAmountUsdInvoiceFeeProbe?: Resolver<ResolversTypes['CentAmountPayload'], ParentType, ContextType, RequireFields<MutationLnNoAmountUsdInvoiceFeeProbeArgs, 'input'>>;
  lnNoAmountUsdInvoicePaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationLnNoAmountUsdInvoicePaymentSendArgs, 'input'>>;
  lnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipient?: Resolver<ResolversTypes['LnInvoicePayload'], ParentType, ContextType, RequireFields<MutationLnUsdInvoiceBtcDenominatedCreateOnBehalfOfRecipientArgs, 'input'>>;
  lnUsdInvoiceCreate?: Resolver<ResolversTypes['LnInvoicePayload'], ParentType, ContextType, RequireFields<MutationLnUsdInvoiceCreateArgs, 'input'>>;
  lnUsdInvoiceCreateOnBehalfOfRecipient?: Resolver<ResolversTypes['LnInvoicePayload'], ParentType, ContextType, RequireFields<MutationLnUsdInvoiceCreateOnBehalfOfRecipientArgs, 'input'>>;
  lnUsdInvoiceFeeProbe?: Resolver<ResolversTypes['SatAmountPayload'], ParentType, ContextType, RequireFields<MutationLnUsdInvoiceFeeProbeArgs, 'input'>>;
  lnurlPaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationLnurlPaymentSendArgs, 'input'>>;
  merchantMapSuggest?: Resolver<ResolversTypes['MerchantPayload'], ParentType, ContextType, RequireFields<MutationMerchantMapSuggestArgs, 'input'>>;
  onChainAddressCreate?: Resolver<ResolversTypes['OnChainAddressPayload'], ParentType, ContextType, RequireFields<MutationOnChainAddressCreateArgs, 'input'>>;
  onChainAddressCurrent?: Resolver<ResolversTypes['OnChainAddressPayload'], ParentType, ContextType, RequireFields<MutationOnChainAddressCurrentArgs, 'input'>>;
  onChainPaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationOnChainPaymentSendArgs, 'input'>>;
  onChainPaymentSendAll?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationOnChainPaymentSendAllArgs, 'input'>>;
  onChainUsdPaymentSend?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationOnChainUsdPaymentSendArgs, 'input'>>;
  onChainUsdPaymentSendAsBtcDenominated?: Resolver<ResolversTypes['PaymentSendPayload'], ParentType, ContextType, RequireFields<MutationOnChainUsdPaymentSendAsBtcDenominatedArgs, 'input'>>;
  quizClaim?: Resolver<ResolversTypes['QuizClaimPayload'], ParentType, ContextType, RequireFields<MutationQuizClaimArgs, 'input'>>;
  redeemWithdrawLinkOnChain?: Resolver<ResolversTypes['RedeemWithdrawLinkOnChainResult'], ParentType, ContextType, RequireFields<MutationRedeemWithdrawLinkOnChainArgs, 'input'>>;
  supportChatMessageAdd?: Resolver<ResolversTypes['SupportChatMessageAddPayload'], ParentType, ContextType, RequireFields<MutationSupportChatMessageAddArgs, 'input'>>;
  userContactUpdateAlias?: Resolver<ResolversTypes['UserContactUpdateAliasPayload'], ParentType, ContextType, RequireFields<MutationUserContactUpdateAliasArgs, 'input'>>;
  userEmailDelete?: Resolver<ResolversTypes['UserEmailDeletePayload'], ParentType, ContextType>;
  userEmailRegistrationInitiate?: Resolver<ResolversTypes['UserEmailRegistrationInitiatePayload'], ParentType, ContextType, RequireFields<MutationUserEmailRegistrationInitiateArgs, 'input'>>;
  userEmailRegistrationValidate?: Resolver<ResolversTypes['UserEmailRegistrationValidatePayload'], ParentType, ContextType, RequireFields<MutationUserEmailRegistrationValidateArgs, 'input'>>;
  userLogin?: Resolver<ResolversTypes['AuthTokenPayload'], ParentType, ContextType, RequireFields<MutationUserLoginArgs, 'input'>>;
  userLoginUpgrade?: Resolver<ResolversTypes['UpgradePayload'], ParentType, ContextType, RequireFields<MutationUserLoginUpgradeArgs, 'input'>>;
  userLogout?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, Partial<MutationUserLogoutArgs>>;
  userPhoneDelete?: Resolver<ResolversTypes['UserPhoneDeletePayload'], ParentType, ContextType>;
  userPhoneRegistrationInitiate?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<MutationUserPhoneRegistrationInitiateArgs, 'input'>>;
  userPhoneRegistrationValidate?: Resolver<ResolversTypes['UserPhoneRegistrationValidatePayload'], ParentType, ContextType, RequireFields<MutationUserPhoneRegistrationValidateArgs, 'input'>>;
  userTotpDelete?: Resolver<ResolversTypes['UserTotpDeletePayload'], ParentType, ContextType>;
  userTotpRegistrationInitiate?: Resolver<ResolversTypes['UserTotpRegistrationInitiatePayload'], ParentType, ContextType>;
  userTotpRegistrationValidate?: Resolver<ResolversTypes['UserTotpRegistrationValidatePayload'], ParentType, ContextType, RequireFields<MutationUserTotpRegistrationValidateArgs, 'input'>>;
  userUpdateLanguage?: Resolver<ResolversTypes['UserUpdateLanguagePayload'], ParentType, ContextType, RequireFields<MutationUserUpdateLanguageArgs, 'input'>>;
  userUpdateUsername?: Resolver<ResolversTypes['UserUpdateUsernamePayload'], ParentType, ContextType, RequireFields<MutationUserUpdateUsernameArgs, 'input'>>;
};

export type MyUpdatesPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['MyUpdatesPayload'] = ResolversParentTypes['MyUpdatesPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  update?: Resolver<Maybe<ResolversTypes['UserUpdate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface NotificationCategoryScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['NotificationCategory'], any> {
  name: 'NotificationCategory';
}

export type NotificationChannelSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationChannelSettings'] = ResolversParentTypes['NotificationChannelSettings']> = {
  disabledCategories?: Resolver<Array<ResolversTypes['NotificationCategory']>, ParentType, ContextType>;
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationSettings'] = ResolversParentTypes['NotificationSettings']> = {
  push?: Resolver<ResolversTypes['NotificationChannelSettings'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface OnChainAddressScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['OnChainAddress'], any> {
  name: 'OnChainAddress';
}

export type OnChainAddressPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['OnChainAddressPayload'] = ResolversParentTypes['OnChainAddressPayload']> = {
  address?: Resolver<Maybe<ResolversTypes['OnChainAddress']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OnChainTxFeeResolvers<ContextType = any, ParentType extends ResolversParentTypes['OnChainTxFee'] = ResolversParentTypes['OnChainTxFee']> = {
  amount?: Resolver<ResolversTypes['SatAmount'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface OnChainTxHashScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['OnChainTxHash'], any> {
  name: 'OnChainTxHash';
}

export type OnChainUpdateResolvers<ContextType = any, ParentType extends ResolversParentTypes['OnChainUpdate'] = ResolversParentTypes['OnChainUpdate']> = {
  amount?: Resolver<ResolversTypes['SatAmount'], ParentType, ContextType>;
  displayCurrencyPerSat?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType>;
  txHash?: Resolver<ResolversTypes['OnChainTxHash'], ParentType, ContextType>;
  txNotificationType?: Resolver<ResolversTypes['TxNotificationType'], ParentType, ContextType>;
  usdPerSat?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  walletId?: Resolver<ResolversTypes['WalletId'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OnChainUsdTxFeeResolvers<ContextType = any, ParentType extends ResolversParentTypes['OnChainUsdTxFee'] = ResolversParentTypes['OnChainUsdTxFee']> = {
  amount?: Resolver<ResolversTypes['CentAmount'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OneDayAccountLimitResolvers<ContextType = any, ParentType extends ResolversParentTypes['OneDayAccountLimit'] = ResolversParentTypes['OneDayAccountLimit']> = {
  interval?: Resolver<Maybe<ResolversTypes['Seconds']>, ParentType, ContextType>;
  remainingLimit?: Resolver<Maybe<ResolversTypes['CentAmount']>, ParentType, ContextType>;
  totalLimit?: Resolver<ResolversTypes['CentAmount'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface OneTimeAuthCodeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['OneTimeAuthCode'], any> {
  name: 'OneTimeAuthCode';
}

export type PageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface PaymentHashScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['PaymentHash'], any> {
  name: 'PaymentHash';
}

export type PaymentSendPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentSendPayload'] = ResolversParentTypes['PaymentSendPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['PaymentSendResult']>, ParentType, ContextType>;
  transaction?: Resolver<Maybe<ResolversTypes['Transaction']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface PhoneScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Phone'], any> {
  name: 'Phone';
}

export type PriceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Price'] = ResolversParentTypes['Price']> = {
  base?: Resolver<ResolversTypes['SafeInt'], ParentType, ContextType>;
  currencyUnit?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  formattedAmount?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  offset?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PriceInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['PriceInterface'] = ResolversParentTypes['PriceInterface']> = {
  __resolveType: TypeResolveFn<'PriceOfOneSatInMinorUnit' | 'PriceOfOneSettlementMinorUnitInDisplayMinorUnit' | 'PriceOfOneUsdCentInMinorUnit', ParentType, ContextType>;
  base?: Resolver<ResolversTypes['SafeInt'], ParentType, ContextType>;
  currencyUnit?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  offset?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
};

export type PriceOfOneSatInMinorUnitResolvers<ContextType = any, ParentType extends ResolversParentTypes['PriceOfOneSatInMinorUnit'] = ResolversParentTypes['PriceOfOneSatInMinorUnit']> = {
  base?: Resolver<ResolversTypes['SafeInt'], ParentType, ContextType>;
  currencyUnit?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  offset?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PriceOfOneSettlementMinorUnitInDisplayMinorUnitResolvers<ContextType = any, ParentType extends ResolversParentTypes['PriceOfOneSettlementMinorUnitInDisplayMinorUnit'] = ResolversParentTypes['PriceOfOneSettlementMinorUnitInDisplayMinorUnit']> = {
  base?: Resolver<ResolversTypes['SafeInt'], ParentType, ContextType>;
  currencyUnit?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  formattedAmount?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  offset?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PriceOfOneUsdCentInMinorUnitResolvers<ContextType = any, ParentType extends ResolversParentTypes['PriceOfOneUsdCentInMinorUnit'] = ResolversParentTypes['PriceOfOneUsdCentInMinorUnit']> = {
  base?: Resolver<ResolversTypes['SafeInt'], ParentType, ContextType>;
  currencyUnit?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  offset?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PricePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['PricePayload'] = ResolversParentTypes['PricePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PricePointResolvers<ContextType = any, ParentType extends ResolversParentTypes['PricePoint'] = ResolversParentTypes['PricePoint']> = {
  price?: Resolver<ResolversTypes['Price'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PublicWalletResolvers<ContextType = any, ParentType extends ResolversParentTypes['PublicWallet'] = ResolversParentTypes['PublicWallet']> = {
  currency?: Resolver<ResolversTypes['WalletCurrency'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  walletCurrency?: Resolver<ResolversTypes['WalletCurrency'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  accountDefaultWallet?: Resolver<ResolversTypes['PublicWallet'], ParentType, ContextType, RequireFields<QueryAccountDefaultWalletArgs, 'username'>>;
  authorization?: Resolver<ResolversTypes['Authorization'], ParentType, ContextType>;
  btcPriceList?: Resolver<Maybe<Array<Maybe<ResolversTypes['PricePoint']>>>, ParentType, ContextType, RequireFields<QueryBtcPriceListArgs, 'range'>>;
  businessMapMarkers?: Resolver<Array<ResolversTypes['MapMarker']>, ParentType, ContextType>;
  currencyConversionEstimation?: Resolver<ResolversTypes['CurrencyConversionEstimation'], ParentType, ContextType, RequireFields<QueryCurrencyConversionEstimationArgs, 'amount' | 'currency'>>;
  currencyList?: Resolver<Array<ResolversTypes['Currency']>, ParentType, ContextType>;
  getWithdrawLink?: Resolver<Maybe<ResolversTypes['WithdrawLinkWithSecret']>, ParentType, ContextType, Partial<QueryGetWithdrawLinkArgs>>;
  getWithdrawLinksByUserId?: Resolver<ResolversTypes['WithdrawLinksByUserIdResult'], ParentType, ContextType, Partial<QueryGetWithdrawLinksByUserIdArgs>>;
  globals?: Resolver<Maybe<ResolversTypes['Globals']>, ParentType, ContextType>;
  lnInvoicePaymentStatus?: Resolver<ResolversTypes['LnInvoicePaymentStatusPayload'], ParentType, ContextType, RequireFields<QueryLnInvoicePaymentStatusArgs, 'input'>>;
  lnInvoicePaymentStatusByHash?: Resolver<ResolversTypes['LnInvoicePaymentStatus'], ParentType, ContextType, RequireFields<QueryLnInvoicePaymentStatusByHashArgs, 'input'>>;
  lnInvoicePaymentStatusByPaymentRequest?: Resolver<ResolversTypes['LnInvoicePaymentStatus'], ParentType, ContextType, RequireFields<QueryLnInvoicePaymentStatusByPaymentRequestArgs, 'input'>>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  mobileVersions?: Resolver<Maybe<Array<Maybe<ResolversTypes['MobileVersions']>>>, ParentType, ContextType>;
  onChainTxFee?: Resolver<ResolversTypes['OnChainTxFee'], ParentType, ContextType, RequireFields<QueryOnChainTxFeeArgs, 'address' | 'amount' | 'speed' | 'walletId'>>;
  onChainUsdTxFee?: Resolver<ResolversTypes['OnChainUsdTxFee'], ParentType, ContextType, RequireFields<QueryOnChainUsdTxFeeArgs, 'address' | 'amount' | 'speed' | 'walletId'>>;
  onChainUsdTxFeeAsBtcDenominated?: Resolver<ResolversTypes['OnChainUsdTxFee'], ParentType, ContextType, RequireFields<QueryOnChainUsdTxFeeAsBtcDenominatedArgs, 'address' | 'amount' | 'speed' | 'walletId'>>;
  realtimePrice?: Resolver<ResolversTypes['RealtimePrice'], ParentType, ContextType, RequireFields<QueryRealtimePriceArgs, 'currency'>>;
  userDefaultWalletId?: Resolver<ResolversTypes['WalletId'], ParentType, ContextType, RequireFields<QueryUserDefaultWalletIdArgs, 'username'>>;
  usernameAvailable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<QueryUsernameAvailableArgs, 'username'>>;
};

export type QuizResolvers<ContextType = any, ParentType extends ResolversParentTypes['Quiz'] = ResolversParentTypes['Quiz']> = {
  amount?: Resolver<ResolversTypes['SatAmount'], ParentType, ContextType>;
  completed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  notBefore?: Resolver<Maybe<ResolversTypes['Timestamp']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QuizClaimPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['QuizClaimPayload'] = ResolversParentTypes['QuizClaimPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  quizzes?: Resolver<Array<ResolversTypes['Quiz']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RealtimePriceResolvers<ContextType = any, ParentType extends ResolversParentTypes['RealtimePrice'] = ResolversParentTypes['RealtimePrice']> = {
  btcSatPrice?: Resolver<ResolversTypes['PriceOfOneSatInMinorUnit'], ParentType, ContextType>;
  denominatorCurrency?: Resolver<ResolversTypes['DisplayCurrency'], ParentType, ContextType>;
  denominatorCurrencyDetails?: Resolver<ResolversTypes['Currency'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  usdCentPrice?: Resolver<ResolversTypes['PriceOfOneUsdCentInMinorUnit'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RealtimePricePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['RealtimePricePayload'] = ResolversParentTypes['RealtimePricePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  realtimePrice?: Resolver<Maybe<ResolversTypes['RealtimePrice']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RedeemWithdrawLinkOnChainResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['RedeemWithdrawLinkOnChainResult'] = ResolversParentTypes['RedeemWithdrawLinkOnChainResult']> = {
  status?: Resolver<Maybe<ResolversTypes['RedeemWithdrawLinkOnChainResultStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface SafeIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['SafeInt'], any> {
  name: 'SafeInt';
}

export interface SatAmountScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['SatAmount'], any> {
  name: 'SatAmount';
}

export type SatAmountPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['SatAmountPayload'] = ResolversParentTypes['SatAmountPayload']> = {
  amount?: Resolver<Maybe<ResolversTypes['SatAmount']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface SecondsScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Seconds'], any> {
  name: 'Seconds';
}

export type SettlementViaResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettlementVia'] = ResolversParentTypes['SettlementVia']> = {
  __resolveType: TypeResolveFn<'SettlementViaIntraLedger' | 'SettlementViaLn' | 'SettlementViaOnChain', ParentType, ContextType>;
};

export type SettlementViaIntraLedgerResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettlementViaIntraLedger'] = ResolversParentTypes['SettlementViaIntraLedger']> = {
  counterPartyUsername?: Resolver<Maybe<ResolversTypes['Username']>, ParentType, ContextType>;
  counterPartyWalletId?: Resolver<Maybe<ResolversTypes['WalletId']>, ParentType, ContextType>;
  preImage?: Resolver<Maybe<ResolversTypes['LnPaymentPreImage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettlementViaLnResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettlementViaLn'] = ResolversParentTypes['SettlementViaLn']> = {
  paymentSecret?: Resolver<Maybe<ResolversTypes['LnPaymentSecret']>, ParentType, ContextType>;
  preImage?: Resolver<Maybe<ResolversTypes['LnPaymentPreImage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettlementViaOnChainResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettlementViaOnChain'] = ResolversParentTypes['SettlementViaOnChain']> = {
  arrivalInMempoolEstimatedAt?: Resolver<Maybe<ResolversTypes['Timestamp']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['OnChainTxHash']>, ParentType, ContextType>;
  vout?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface SignedAmountScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['SignedAmount'], any> {
  name: 'SignedAmount';
}

export interface SignedDisplayMajorAmountScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['SignedDisplayMajorAmount'], any> {
  name: 'SignedDisplayMajorAmount';
}

export type SubscriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = {
  lnInvoicePaymentStatus?: SubscriptionResolver<ResolversTypes['LnInvoicePaymentStatusPayload'], "lnInvoicePaymentStatus", ParentType, ContextType, RequireFields<SubscriptionLnInvoicePaymentStatusArgs, 'input'>>;
  lnInvoicePaymentStatusByHash?: SubscriptionResolver<ResolversTypes['LnInvoicePaymentStatusPayload'], "lnInvoicePaymentStatusByHash", ParentType, ContextType, RequireFields<SubscriptionLnInvoicePaymentStatusByHashArgs, 'input'>>;
  lnInvoicePaymentStatusByPaymentRequest?: SubscriptionResolver<ResolversTypes['LnInvoicePaymentStatusPayload'], "lnInvoicePaymentStatusByPaymentRequest", ParentType, ContextType, RequireFields<SubscriptionLnInvoicePaymentStatusByPaymentRequestArgs, 'input'>>;
  myUpdates?: SubscriptionResolver<ResolversTypes['MyUpdatesPayload'], "myUpdates", ParentType, ContextType>;
  price?: SubscriptionResolver<ResolversTypes['PricePayload'], "price", ParentType, ContextType, RequireFields<SubscriptionPriceArgs, 'input'>>;
  realtimePrice?: SubscriptionResolver<ResolversTypes['RealtimePricePayload'], "realtimePrice", ParentType, ContextType, RequireFields<SubscriptionRealtimePriceArgs, 'input'>>;
};

export type SuccessPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['SuccessPayload'] = ResolversParentTypes['SuccessPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SupportChatMessageAddPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['SupportChatMessageAddPayload'] = ResolversParentTypes['SupportChatMessageAddPayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  supportMessage?: Resolver<Maybe<Array<Maybe<ResolversTypes['SupportMessage']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SupportMessageResolvers<ContextType = any, ParentType extends ResolversParentTypes['SupportMessage'] = ResolversParentTypes['SupportMessage']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  role?: Resolver<ResolversTypes['SupportRole'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface TimestampScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Timestamp'], any> {
  name: 'Timestamp';
}

export interface TotpCodeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['TotpCode'], any> {
  name: 'TotpCode';
}

export interface TotpRegistrationIdScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['TotpRegistrationId'], any> {
  name: 'TotpRegistrationId';
}

export interface TotpSecretScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['TotpSecret'], any> {
  name: 'TotpSecret';
}

export type TransactionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Transaction'] = ResolversParentTypes['Transaction']> = {
  createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  direction?: Resolver<ResolversTypes['TxDirection'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  initiationVia?: Resolver<ResolversTypes['InitiationVia'], ParentType, ContextType>;
  memo?: Resolver<Maybe<ResolversTypes['Memo']>, ParentType, ContextType>;
  settlementAmount?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  settlementCurrency?: Resolver<ResolversTypes['WalletCurrency'], ParentType, ContextType>;
  settlementDisplayAmount?: Resolver<ResolversTypes['SignedDisplayMajorAmount'], ParentType, ContextType>;
  settlementDisplayCurrency?: Resolver<ResolversTypes['DisplayCurrency'], ParentType, ContextType>;
  settlementDisplayFee?: Resolver<ResolversTypes['SignedDisplayMajorAmount'], ParentType, ContextType>;
  settlementFee?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  settlementPrice?: Resolver<ResolversTypes['PriceOfOneSettlementMinorUnitInDisplayMinorUnit'], ParentType, ContextType>;
  settlementVia?: Resolver<ResolversTypes['SettlementVia'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['TxStatus'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TransactionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TransactionConnection'] = ResolversParentTypes['TransactionConnection']> = {
  edges?: Resolver<Maybe<Array<ResolversTypes['TransactionEdge']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TransactionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TransactionEdge'] = ResolversParentTypes['TransactionEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpgradePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpgradePayload'] = ResolversParentTypes['UpgradePayload']> = {
  authToken?: Resolver<Maybe<ResolversTypes['AuthToken']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UsdWalletResolvers<ContextType = any, ParentType extends ResolversParentTypes['UsdWallet'] = ResolversParentTypes['UsdWallet']> = {
  accountId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  balance?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  invoiceByPaymentHash?: Resolver<ResolversTypes['Invoice'], ParentType, ContextType, RequireFields<UsdWalletInvoiceByPaymentHashArgs, 'paymentHash'>>;
  invoices?: Resolver<Maybe<ResolversTypes['InvoiceConnection']>, ParentType, ContextType, Partial<UsdWalletInvoicesArgs>>;
  pendingIncomingBalance?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  pendingIncomingTransactions?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType>;
  pendingIncomingTransactionsByAddress?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<UsdWalletPendingIncomingTransactionsByAddressArgs, 'address'>>;
  transactionById?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType, RequireFields<UsdWalletTransactionByIdArgs, 'transactionId'>>;
  transactions?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, Partial<UsdWalletTransactionsArgs>>;
  transactionsByAddress?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, RequireFields<UsdWalletTransactionsByAddressArgs, 'address'>>;
  transactionsByPaymentHash?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<UsdWalletTransactionsByPaymentHashArgs, 'paymentHash'>>;
  transactionsByPaymentRequest?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<UsdWalletTransactionsByPaymentRequestArgs, 'paymentRequest'>>;
  walletCurrency?: Resolver<ResolversTypes['WalletCurrency'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  contactByUsername?: Resolver<ResolversTypes['UserContact'], ParentType, ContextType, RequireFields<UserContactByUsernameArgs, 'username'>>;
  contacts?: Resolver<Array<ResolversTypes['UserContact']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  defaultAccount?: Resolver<ResolversTypes['Account'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['Email']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<ResolversTypes['Language'], ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['Phone']>, ParentType, ContextType>;
  supportChat?: Resolver<Array<ResolversTypes['SupportMessage']>, ParentType, ContextType>;
  totpEnabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['Username']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserContactResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserContact'] = ResolversParentTypes['UserContact']> = {
  alias?: Resolver<Maybe<ResolversTypes['ContactAlias']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Username'], ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, Partial<UserContactTransactionsArgs>>;
  transactionsCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['Username'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserContactUpdateAliasPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserContactUpdateAliasPayload'] = ResolversParentTypes['UserContactUpdateAliasPayload']> = {
  contact?: Resolver<Maybe<ResolversTypes['UserContact']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserEmailDeletePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserEmailDeletePayload'] = ResolversParentTypes['UserEmailDeletePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserEmailRegistrationInitiatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserEmailRegistrationInitiatePayload'] = ResolversParentTypes['UserEmailRegistrationInitiatePayload']> = {
  emailRegistrationId?: Resolver<Maybe<ResolversTypes['EmailRegistrationId']>, ParentType, ContextType>;
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserEmailRegistrationValidatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserEmailRegistrationValidatePayload'] = ResolversParentTypes['UserEmailRegistrationValidatePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserPhoneDeletePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserPhoneDeletePayload'] = ResolversParentTypes['UserPhoneDeletePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserPhoneRegistrationValidatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserPhoneRegistrationValidatePayload'] = ResolversParentTypes['UserPhoneRegistrationValidatePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserTotpDeletePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserTotpDeletePayload'] = ResolversParentTypes['UserTotpDeletePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserTotpRegistrationInitiatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserTotpRegistrationInitiatePayload'] = ResolversParentTypes['UserTotpRegistrationInitiatePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  totpRegistrationId?: Resolver<Maybe<ResolversTypes['TotpRegistrationId']>, ParentType, ContextType>;
  totpSecret?: Resolver<Maybe<ResolversTypes['TotpSecret']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserTotpRegistrationValidatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserTotpRegistrationValidatePayload'] = ResolversParentTypes['UserTotpRegistrationValidatePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserUpdateResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserUpdate'] = ResolversParentTypes['UserUpdate']> = {
  __resolveType: TypeResolveFn<'IntraLedgerUpdate' | 'LnUpdate' | 'OnChainUpdate' | 'Price' | 'RealtimePrice', ParentType, ContextType>;
};

export type UserUpdateLanguagePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserUpdateLanguagePayload'] = ResolversParentTypes['UserUpdateLanguagePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserUpdateUsernamePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserUpdateUsernamePayload'] = ResolversParentTypes['UserUpdateUsernamePayload']> = {
  errors?: Resolver<Array<ResolversTypes['Error']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface UsernameScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Username'], any> {
  name: 'Username';
}

export type WalletResolvers<ContextType = any, ParentType extends ResolversParentTypes['Wallet'] = ResolversParentTypes['Wallet']> = {
  __resolveType: TypeResolveFn<'BTCWallet' | 'UsdWallet', ParentType, ContextType>;
  accountId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  balance?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  invoiceByPaymentHash?: Resolver<ResolversTypes['Invoice'], ParentType, ContextType, RequireFields<WalletInvoiceByPaymentHashArgs, 'paymentHash'>>;
  invoices?: Resolver<Maybe<ResolversTypes['InvoiceConnection']>, ParentType, ContextType, Partial<WalletInvoicesArgs>>;
  pendingIncomingBalance?: Resolver<ResolversTypes['SignedAmount'], ParentType, ContextType>;
  pendingIncomingTransactions?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType>;
  pendingIncomingTransactionsByAddress?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<WalletPendingIncomingTransactionsByAddressArgs, 'address'>>;
  transactionById?: Resolver<ResolversTypes['Transaction'], ParentType, ContextType, RequireFields<WalletTransactionByIdArgs, 'transactionId'>>;
  transactions?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, Partial<WalletTransactionsArgs>>;
  transactionsByAddress?: Resolver<Maybe<ResolversTypes['TransactionConnection']>, ParentType, ContextType, RequireFields<WalletTransactionsByAddressArgs, 'address'>>;
  transactionsByPaymentHash?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<WalletTransactionsByPaymentHashArgs, 'paymentHash'>>;
  transactionsByPaymentRequest?: Resolver<Array<ResolversTypes['Transaction']>, ParentType, ContextType, RequireFields<WalletTransactionsByPaymentRequestArgs, 'paymentRequest'>>;
  walletCurrency?: Resolver<ResolversTypes['WalletCurrency'], ParentType, ContextType>;
};

export interface WalletIdScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['WalletId'], any> {
  name: 'WalletId';
}

export type WithdrawLinkResolvers<ContextType = any, ParentType extends ResolversParentTypes['WithdrawLink'] = ResolversParentTypes['WithdrawLink']> = {
  commissionPercentage?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  identifierCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  paidAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  salesAmountInCents?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status'], ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  voucherAmountInCents?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WithdrawLinkWithSecretResolvers<ContextType = any, ParentType extends ResolversParentTypes['WithdrawLinkWithSecret'] = ResolversParentTypes['WithdrawLinkWithSecret']> = {
  commissionPercentage?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  identifierCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  paidAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  salesAmountInCents?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status'], ParentType, ContextType>;
  uniqueHash?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  voucherAmountInCents?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  voucherSecret?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WithdrawLinksByUserIdResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['WithdrawLinksByUserIdResult'] = ResolversParentTypes['WithdrawLinksByUserIdResult']> = {
  totalLinks?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  withdrawLinks?: Resolver<Array<ResolversTypes['WithdrawLink']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Account?: AccountResolvers<ContextType>;
  AccountDeletePayload?: AccountDeletePayloadResolvers<ContextType>;
  AccountLimit?: AccountLimitResolvers<ContextType>;
  AccountLimits?: AccountLimitsResolvers<ContextType>;
  AccountUpdateDefaultWalletIdPayload?: AccountUpdateDefaultWalletIdPayloadResolvers<ContextType>;
  AccountUpdateDisplayCurrencyPayload?: AccountUpdateDisplayCurrencyPayloadResolvers<ContextType>;
  AccountUpdateNotificationSettingsPayload?: AccountUpdateNotificationSettingsPayloadResolvers<ContextType>;
  AuthToken?: GraphQLScalarType;
  AuthTokenPayload?: AuthTokenPayloadResolvers<ContextType>;
  Authorization?: AuthorizationResolvers<ContextType>;
  BTCWallet?: BtcWalletResolvers<ContextType>;
  BuildInformation?: BuildInformationResolvers<ContextType>;
  CallbackEndpoint?: CallbackEndpointResolvers<ContextType>;
  CallbackEndpointAddPayload?: CallbackEndpointAddPayloadResolvers<ContextType>;
  CaptchaCreateChallengePayload?: CaptchaCreateChallengePayloadResolvers<ContextType>;
  CaptchaCreateChallengeResult?: CaptchaCreateChallengeResultResolvers<ContextType>;
  CentAmount?: GraphQLScalarType;
  CentAmountPayload?: CentAmountPayloadResolvers<ContextType>;
  ConsumerAccount?: ConsumerAccountResolvers<ContextType>;
  ContactAlias?: GraphQLScalarType;
  Coordinates?: CoordinatesResolvers<ContextType>;
  Country?: CountryResolvers<ContextType>;
  CountryCode?: GraphQLScalarType;
  Currency?: CurrencyResolvers<ContextType>;
  CurrencyConversionEstimation?: CurrencyConversionEstimationResolvers<ContextType>;
  DepositFeesInformation?: DepositFeesInformationResolvers<ContextType>;
  DisplayCurrency?: GraphQLScalarType;
  Email?: EmailResolvers<ContextType>;
  EmailAddress?: GraphQLScalarType;
  EmailRegistrationId?: GraphQLScalarType;
  EndpointId?: GraphQLScalarType;
  EndpointUrl?: GraphQLScalarType;
  Error?: ErrorResolvers<ContextType>;
  Feedback?: GraphQLScalarType;
  FeesInformation?: FeesInformationResolvers<ContextType>;
  Globals?: GlobalsResolvers<ContextType>;
  GraphQLApplicationError?: GraphQlApplicationErrorResolvers<ContextType>;
  Hex32Bytes?: GraphQLScalarType;
  InitiationVia?: InitiationViaResolvers<ContextType>;
  InitiationViaIntraLedger?: InitiationViaIntraLedgerResolvers<ContextType>;
  InitiationViaLn?: InitiationViaLnResolvers<ContextType>;
  InitiationViaOnChain?: InitiationViaOnChainResolvers<ContextType>;
  IntraLedgerUpdate?: IntraLedgerUpdateResolvers<ContextType>;
  Invoice?: InvoiceResolvers<ContextType>;
  InvoiceConnection?: InvoiceConnectionResolvers<ContextType>;
  InvoiceEdge?: InvoiceEdgeResolvers<ContextType>;
  Language?: GraphQLScalarType;
  LnInvoice?: LnInvoiceResolvers<ContextType>;
  LnInvoicePayload?: LnInvoicePayloadResolvers<ContextType>;
  LnInvoicePaymentStatus?: LnInvoicePaymentStatusResolvers<ContextType>;
  LnInvoicePaymentStatusPayload?: LnInvoicePaymentStatusPayloadResolvers<ContextType>;
  LnNoAmountInvoice?: LnNoAmountInvoiceResolvers<ContextType>;
  LnNoAmountInvoicePayload?: LnNoAmountInvoicePayloadResolvers<ContextType>;
  LnPaymentPreImage?: GraphQLScalarType;
  LnPaymentRequest?: GraphQLScalarType;
  LnPaymentSecret?: GraphQLScalarType;
  LnUpdate?: LnUpdateResolvers<ContextType>;
  MapInfo?: MapInfoResolvers<ContextType>;
  MapMarker?: MapMarkerResolvers<ContextType>;
  Memo?: GraphQLScalarType;
  Merchant?: MerchantResolvers<ContextType>;
  MerchantPayload?: MerchantPayloadResolvers<ContextType>;
  Minutes?: GraphQLScalarType;
  MobileVersions?: MobileVersionsResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  MyUpdatesPayload?: MyUpdatesPayloadResolvers<ContextType>;
  NotificationCategory?: GraphQLScalarType;
  NotificationChannelSettings?: NotificationChannelSettingsResolvers<ContextType>;
  NotificationSettings?: NotificationSettingsResolvers<ContextType>;
  OnChainAddress?: GraphQLScalarType;
  OnChainAddressPayload?: OnChainAddressPayloadResolvers<ContextType>;
  OnChainTxFee?: OnChainTxFeeResolvers<ContextType>;
  OnChainTxHash?: GraphQLScalarType;
  OnChainUpdate?: OnChainUpdateResolvers<ContextType>;
  OnChainUsdTxFee?: OnChainUsdTxFeeResolvers<ContextType>;
  OneDayAccountLimit?: OneDayAccountLimitResolvers<ContextType>;
  OneTimeAuthCode?: GraphQLScalarType;
  PageInfo?: PageInfoResolvers<ContextType>;
  PaymentHash?: GraphQLScalarType;
  PaymentSendPayload?: PaymentSendPayloadResolvers<ContextType>;
  Phone?: GraphQLScalarType;
  Price?: PriceResolvers<ContextType>;
  PriceInterface?: PriceInterfaceResolvers<ContextType>;
  PriceOfOneSatInMinorUnit?: PriceOfOneSatInMinorUnitResolvers<ContextType>;
  PriceOfOneSettlementMinorUnitInDisplayMinorUnit?: PriceOfOneSettlementMinorUnitInDisplayMinorUnitResolvers<ContextType>;
  PriceOfOneUsdCentInMinorUnit?: PriceOfOneUsdCentInMinorUnitResolvers<ContextType>;
  PricePayload?: PricePayloadResolvers<ContextType>;
  PricePoint?: PricePointResolvers<ContextType>;
  PublicWallet?: PublicWalletResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Quiz?: QuizResolvers<ContextType>;
  QuizClaimPayload?: QuizClaimPayloadResolvers<ContextType>;
  RealtimePrice?: RealtimePriceResolvers<ContextType>;
  RealtimePricePayload?: RealtimePricePayloadResolvers<ContextType>;
  RedeemWithdrawLinkOnChainResult?: RedeemWithdrawLinkOnChainResultResolvers<ContextType>;
  SafeInt?: GraphQLScalarType;
  SatAmount?: GraphQLScalarType;
  SatAmountPayload?: SatAmountPayloadResolvers<ContextType>;
  Seconds?: GraphQLScalarType;
  SettlementVia?: SettlementViaResolvers<ContextType>;
  SettlementViaIntraLedger?: SettlementViaIntraLedgerResolvers<ContextType>;
  SettlementViaLn?: SettlementViaLnResolvers<ContextType>;
  SettlementViaOnChain?: SettlementViaOnChainResolvers<ContextType>;
  SignedAmount?: GraphQLScalarType;
  SignedDisplayMajorAmount?: GraphQLScalarType;
  Subscription?: SubscriptionResolvers<ContextType>;
  SuccessPayload?: SuccessPayloadResolvers<ContextType>;
  SupportChatMessageAddPayload?: SupportChatMessageAddPayloadResolvers<ContextType>;
  SupportMessage?: SupportMessageResolvers<ContextType>;
  Timestamp?: GraphQLScalarType;
  TotpCode?: GraphQLScalarType;
  TotpRegistrationId?: GraphQLScalarType;
  TotpSecret?: GraphQLScalarType;
  Transaction?: TransactionResolvers<ContextType>;
  TransactionConnection?: TransactionConnectionResolvers<ContextType>;
  TransactionEdge?: TransactionEdgeResolvers<ContextType>;
  UpgradePayload?: UpgradePayloadResolvers<ContextType>;
  UsdWallet?: UsdWalletResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserContact?: UserContactResolvers<ContextType>;
  UserContactUpdateAliasPayload?: UserContactUpdateAliasPayloadResolvers<ContextType>;
  UserEmailDeletePayload?: UserEmailDeletePayloadResolvers<ContextType>;
  UserEmailRegistrationInitiatePayload?: UserEmailRegistrationInitiatePayloadResolvers<ContextType>;
  UserEmailRegistrationValidatePayload?: UserEmailRegistrationValidatePayloadResolvers<ContextType>;
  UserPhoneDeletePayload?: UserPhoneDeletePayloadResolvers<ContextType>;
  UserPhoneRegistrationValidatePayload?: UserPhoneRegistrationValidatePayloadResolvers<ContextType>;
  UserTotpDeletePayload?: UserTotpDeletePayloadResolvers<ContextType>;
  UserTotpRegistrationInitiatePayload?: UserTotpRegistrationInitiatePayloadResolvers<ContextType>;
  UserTotpRegistrationValidatePayload?: UserTotpRegistrationValidatePayloadResolvers<ContextType>;
  UserUpdate?: UserUpdateResolvers<ContextType>;
  UserUpdateLanguagePayload?: UserUpdateLanguagePayloadResolvers<ContextType>;
  UserUpdateUsernamePayload?: UserUpdateUsernamePayloadResolvers<ContextType>;
  Username?: GraphQLScalarType;
  Wallet?: WalletResolvers<ContextType>;
  WalletId?: GraphQLScalarType;
  WithdrawLink?: WithdrawLinkResolvers<ContextType>;
  WithdrawLinkWithSecret?: WithdrawLinkWithSecretResolvers<ContextType>;
  WithdrawLinksByUserIdResult?: WithdrawLinksByUserIdResultResolvers<ContextType>;
};


spectaql:
  logoFile: ./public/logo.png

introspection:
  schemaFile: ./src/graphql/main/schema.graphql

info:
  title: GraphQL API Reference
  description: Welcome to the Galoy API reference!
  contact:
    name: Galoy slack developer community
    url: https://join.slack.com/t/galoymoney-workspace/shared_invite/zt-rvnhsdb5-72AZCD_jzw6_Q05aCs0SgA
  license:
    name: MIT 
    url: https://opensource.org/licenses/MIT
  x-introItems:
  - title: Galoy API Tutorial
    description: |
      # Lightning Integration

      ## Overview
      The staging API endpoint is: `https://api.testnet.galoy.io/graphql`

      </br>

      ## Authentication
      To get a new JWT:
      1. Use `userRequestAuthCode` to receive an auth code via SMS
      2. Call `userLogin` using the same phone number and auth code

      All other methods require a valid JWT set in the header as a bearer token - `Authorization: Bearer`

      </br>

      ## Curl requests

      </br>

      ### `userRequestAuthCode`

      #### query
      ```bash
      export URI=https://api.testnet.galoy.io/graphql

      curl -L -X POST '' -H 'Content-Type: application/json' --data-raw '{"query":"mutation userRequestAuthCode ($input: UserRequestAuthCodeInput!) {\n    userRequestAuthCode (input: $input) {\n        errors {\n            message\n            path\n        }\n        success\n    }\n}","variables":{}}'
      ```

      #### response
      ```json
      {
          "data": {
              "userRequestAuthCode": {
                  "errors": [],
                  "success": true
              }
          }
      }
      ```
      </br>

      ### `userLogin`

      #### query
      ```bash
      export URI=https://api.testnet.galoy.io/graphql

      curl --location --request POST $URI --header 'Content-Type: application/json' --data-raw '{"query":"mutation userLogin ($input: UserLoginInput!) {\n    userLogin (input: $input) {\n        errors {\n            message\n            path\n        }\n        authToken\n    }\n}","variables":{"input":{"phone":"+12025550148","code":"69420"}}}'
      ```

      #### response
      ```json
      {
          "data": {
              "userLogin": {
                  "errors": [],
                  "authToken": "<AUTH_TOKEN>"
              }
          }
      }
      ```
      </br>

      ### `lnInvoiceCreate`

      #### query
      ```bash
      export URI=https://api.testnet.galoy.io/graphql

      export AUTH_TOKEN='Authorization: Bearer <AUTH_TOKEN>'

      curl --location --request POST $URI --header "$AUTH_TOKEN" --header 'Content-Type: application/json' --data-raw '{"query":"mutation lnInvoiceCreate ($input: LnInvoiceCreateInput!) {\n    lnInvoiceCreate (input: $input) {\n        errors {\n            message\n            path\n        }\n        invoice {\n            paymentRequest\n            paymentHash\n            paymentSecret\n            satoshis\n        }\n    }\n}","variables":{"input":{"amount":"12345","memo":"tipping jpow"}}}'
      ```

      #### response
      ```json
      {
          "data": {
              "lnInvoiceCreate": {
                  "errors": [],
                  "invoice": {
                      "paymentRequest": "lntb123450n1pscxulepp59x872uskmr0a4r3wnr3vkmr297zm53smw8j4efevpknuwm8vs5yqdq5w35hqurfdenjq6nsdamscqzpuxqyz5vqsp5yzmznk5z7xszkgfk5xstuh8j5gg4srerelv58pph5wjan2kd8rqs9qyyssqe5l376x893374kqsr5lc8tesudg4jryaqlzmx44mfr87nds83margfa09ggd92sy0rudl6r79sat4rxqml5yfdhmm7yk9jc0ugzw7hgpdfxfzk",
                      "paymentHash": "298be57216d8dfda8e2e88e2cb6c6a2f85ba461b71e55ca72c0da7c76cec8508",
                      "paymentSecret": "20b629da82f1a02b2136a1a0be5cf2a211580f23cfd8438437a3a5d9aacd38c1",
                      "satoshis": 12345
                  }
              }
          }
      }
      ```
      </br>

      ### `lnInvoiceFeeProbe`

      #### query
      ```bash
      export URI=https://api.testnet.galoy.io/graphql
      export PAYMENT_REQUEST='lntb123450n1pscxulepp59x872uskmr0a4r3wnr3vkmr297zm53smw8j4efevpknuwm8vs5yqdq5w35hqurfdenjq6nsdamscqzpuxqyz5vqsp5yzmznk5z7xszkgfk5xstuh8j5gg4srerelv58pph5wjan2kd8rqs9qyyssqe5l376x893374kqsr5lc8tesudg4jryaqlzmx44mfr87nds83margfa09ggd92sy0rudl6r79sat4rxqml5yfdhmm7yk9jc0ugzw7hgpdfxfzk'

      curl --location --request POST $URI --header "$AUTH_TOKEN" --header 'Content-Type: application/json' --data-raw '{"query":"mutation lnInvoiceFeeProbe ($input: LnInvoiceFeeProbeInput!) {\n    lnInvoiceFeeProbe (input: $input) {\n        errors {\n            message\n            path\n        }\n        amount\n    }\n}","variables":{"input":{"paymentRequest":"'"$PAYMENT_REQUEST"'"}}}'
      ```

      #### response
      ```json
      {
          "data": {
              "lnInvoiceFeeProbe": {
                  "errors": [],
                  "amount": 0
              }
          }
      }
      ```
      </br>

      ### `lnInvoicePaymentSend`

      #### query
      ```bash
      export URI=https://api.testnet.galoy.io/graphql
      PAYMENT_REQUEST='lntb50u1psc8xeppp5yryt4j8ve0pvyunrp3dr0l5tj0ss4hnkuxz52hldc9nz2njpe2fqdqqxqrrss9qy9qsqsp5xduj0a8u2c7mn959045wnu8xrv63vqye2d2zw3kllahdv47np6qsrzjqwfn3p9278ttzzpe0e00uhyxhned3j5d9acqak5emwfpflp8z2cng85uzyqqqdsqqqqqqqlgqqqqqeqqjqjwcuu47akd6qggafxy403zk9f67xh86huv6r0fkngvkuwrxuadv8dd3u5gfeurshh3q6jr5jvu05z7f63xz5ac8v4pk3tjfv46jt5dcprr9d4z'

      curl --location --request POST $URI --header "$AUTH_TOKEN" --header 'Content-Type: application/json' --data-raw '{"query":"mutation lnInvoicePaymentSend ($input: LnInvoicePaymentInput!) {\n    lnInvoicePaymentSend (input: $input) {\n        errors {\n            message\n            path\n        }\n        status\n    }\n}","variables":{"input":{"paymentRequest":"'"$PAYMENT_REQUEST"'","memo":"tipping jpow"}}}'
      ```

      #### response
      ```json
      {
          "data": {
              "lnInvoicePaymentSend": {
                  "errors": [],
                  "status": "ALREADY_PAID"
              }
          }
      }
      ```

      ## Extra Resources

      </br>

      If you use Postman, we have a collection you can import to test the API. 

      Download it here: [Lightning Integration.postman_collection.json](https://github.com/GaloyMoney/galoy/tree/main/src/graphql/main/docs/Lightning-Integration.postman_collection.json)


servers:
  - url: https://api.staging.galoy.io/graphql
    description: Testnet
    production: false

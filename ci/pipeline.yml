#@ load("@ytt:data", "data")

#@ load("pipeline-fragments.lib.yml",
#@   "nodejs_task_image_config",
#@   "rust_task_image_config",
#@   "nodejs_concourse_image",
#@   "slack_failure_notification",
#@   "nodejs_check_code",
#@   "nodejs_audit",
#@   "test_on_docker_host",
#@   "docker_host_pool",
#@   "repo_resource",
#@   "pipeline_tasks_resource",
#@   "slack_resource",
#@   "gcr_resource_type",
#@   "slack_resource_type")

#@ def galoy_image():
#@   return data.values.docker_registry + "/galoy-api"
#@ end

#@ def debug_galoy_image():
#@   return data.values.docker_registry + "/galoy-app-debug"
#@ end

#@ def migrate_galoy_image():
#@   return data.values.docker_registry + "/galoy-app-migrate"
#@ end

#@ def websocket_galoy_image():
#@   return data.values.docker_registry + "/galoy-api-ws-server"
#@ end

#@ def exporter_galoy_image():
#@   return data.values.docker_registry + "/galoy-api-exporter"
#@ end

#@ def trigger_galoy_image():
#@   return data.values.docker_registry + "/galoy-api-trigger"
#@ end

#@ def cron_galoy_image():
#@   return data.values.docker_registry + "/galoy-api-cron"
#@ end

#@ def api_keys_galoy_image():
#@   return data.values.docker_registry + "/galoy-api-keys"
#@ end

#@ def release_pipeline_image():
#@   return data.values.docker_registry + "/release-pipeline"
#@ end

#@ def release_task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ release_pipeline_image()
#@ end

#@ def galoy_dev_image():
#@   return data.values.docker_registry + "/galoy-dev"
#@ end

#@ def galoy_dev_image_config():
type: registry-image
source:
  username: ((docker-creds.username))
  password: ((docker-creds.password))
  repository: #@ galoy_dev_image()
#@ end

groups:
  - name: galoy
    jobs:
      - integration-tests
      - bats-tests
      - test-unit
      - check-code
      - audit
      - build-edge-image
      - build-debug-edge-image
      - build-migrate-edge-image
      - build-websocket-edge-image
      - build-exporter-edge-image
      - build-trigger-edge-image
      - build-cron-edge-image
      - build-api-keys-edge-image
      - bump-image-in-chart
      - quickstart
      - release
  - name: sync-proto
    jobs:
      - sync-stablesats-proto
      - sync-price-history-proto
      - sync-price-realtime-proto
      - sync-bria-api-proto

jobs:
  - name: check-code
    serial: true
    plan:
    - in_parallel:
      - { get: repo, trigger: true }
      - { get: pipeline-tasks }
    - task: check-code
      config:
        platform: linux
        image_resource: #@ galoy_dev_image_config()
        inputs:
        - name: pipeline-tasks
        - name: repo
        run:
          path: pipeline-tasks/ci/tasks/check-code.sh
    on_failure: #@ slack_failure_notification()
  - name: audit
    serial: true
    plan:
    - in_parallel:
      - { get: repo, trigger: true }
      - { get: pipeline-tasks }
    - task: audit
      config:
        platform: linux
        image_resource: #@ nodejs_task_image_config()
        inputs:
        - name: pipeline-tasks
        - name: repo
        params:
          LEVEL: high
          REPO_ROOT: repo/core/api
        run:
          path: pipeline-tasks/ci/vendor/tasks/nodejs-audit.sh
    on_failure: #@ slack_failure_notification()

  - name: integration-tests
    #@ container = "integration-tests"
    #@ params = {}
    #@ params["REPO_PATH"] = data.values.gh_repository + "-" + container
    #@ params["GOOGLE_CREDENTIALS"] = "((staging-gcp-creds.creds_json))"
    #@ params["SSH_PRIVATE_KEY"] = "((staging-ssh.ssh_private_key))"
    #@ params["SSH_PUB_KEY"] = "((staging-ssh.ssh_public_key))"
    #@ params["JEST_TIMEOUT"] = 90000
    #@ params["PACKAGE_DIR"] = "core/api"
    #@ params["CMD"] = "make integration-in-ci"
    serial: true
    plan:
    - { put: docker-host, params: { acquire: true } }
    - in_parallel:
      - { get: repo, trigger: true }
      - { get: pipeline-tasks }
    - task: #@ container
      attempts: 2
      timeout: 18m
      tags: ["galoy-staging"]
      config:
        platform: linux
        image_resource: #@ rust_task_image_config()
        inputs:
        - name: pipeline-tasks
        - name: docker-host
          path: nix-host
        - name: repo
          path: #@ data.values.gh_repository + "-" + container
        params: #@ params
        run:
          path: pipeline-tasks/ci/apps/tasks/run-on-nix-host.sh
      ensure:
        put: docker-host
        params:
          release: docker-host
    on_failure: #@ slack_failure_notification()

  - name: bats-tests
    #@ container = "bats-tests"
    #@ params = {}
    #@ params["REPO_PATH"] = data.values.gh_repository + "-" + container
    #@ params["GOOGLE_CREDENTIALS"] = "((staging-gcp-creds.creds_json))"
    #@ params["SSH_PRIVATE_KEY"] = "((staging-ssh.ssh_private_key))"
    #@ params["SSH_PUB_KEY"] = "((staging-ssh.ssh_public_key))"
    #@ params["JEST_TIMEOUT"] = 90000
    #@ params["PACKAGE_DIR"] = "core/api"
    #@ params["CMD"] = "make bats-in-ci"
    serial: true
    plan:
    - { put: docker-host, params: { acquire: true } }
    - in_parallel:
      - { get: repo, trigger: true }
      - { get: pipeline-tasks }
    - task: #@ container
      attempts: 2
      timeout: 18m
      tags: ["galoy-staging"]
      config:
        platform: linux
        image_resource: #@ rust_task_image_config()
        inputs:
        - name: pipeline-tasks
        - name: docker-host
          path: nix-host
        - name: repo
          path: #@ data.values.gh_repository + "-" + container
        params: #@ params
        run:
          path: pipeline-tasks/ci/apps/tasks/run-on-nix-host.sh
      ensure:
        put: docker-host
        params:
          release: docker-host
    on_failure: #@ slack_failure_notification()

  - name: test-unit
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: test-unit
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/test-unit.sh
    on_failure: #@ slack_failure_notification()

  - name: build-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            DOCKERFILE: "repo/core/api/Dockerfile"
            BUILD_ARGS_FILE: repo/.build-args
          run:
            path: build
      - put: edge-image
        params:
          image: image/image.tar

  - name: build-debug-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.build-args
            DOCKERFILE: "repo/core/api/Dockerfile-debug"
          run:
            path: build
      - put: debug-edge-image
        params:
          image: image/image.tar

  - name: build-migrate-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.build-args
            DOCKERFILE: "repo/core/api/Dockerfile-migrate"
          run:
            path: build
      - put: migrate-edge-image
        params:
          image: image/image.tar

  - name: build-websocket-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.build-args
            DOCKERFILE: "repo/core/api-ws-server/Dockerfile"
          run:
            path: build
      - put: websocket-edge-image
        params:
          image: image/image.tar

  - name: build-exporter-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.build-args
            DOCKERFILE: "repo/core/api-exporter/Dockerfile"
          run:
            path: build
      - put: exporter-edge-image
        params:
          image: image/image.tar

  - name: build-cron-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.build-args
            DOCKERFILE: "repo/core/api-cron/Dockerfile"
          run:
            path: build
      - put: cron-edge-image
        params:
          image: image/image.tar

  - name: build-trigger-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.build-args
            DOCKERFILE: "repo/core/api-trigger/Dockerfile"
          run:
            path: build
      - put: trigger-edge-image
        params:
          image: image/image.tar

  - name: build-api-keys-edge-image
    serial: true
    plan:
      - in_parallel:
          - { get: repo, trigger: true }
          - { get: pipeline-tasks }
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ galoy_dev_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
      - task: build
        attempts: 2
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.build-args
            DOCKERFILE: "repo/core/api-keys/Dockerfile"
          run:
            path: build
      - put: api-keys-edge-image
        params:
          image: image/image.tar

  - name: quickstart
    serial: true
    plan:
      - in_parallel:
        - get: repo
          trigger: true
          passed:
            - build-debug-edge-image
            - build-migrate-edge-image
            - build-edge-image
            - build-websocket-edge-image
            - build-trigger-edge-image
        - get: pipeline-tasks
        - get: edge-image
          passed: [build-edge-image]
          params:
            format: oci
        - get: migrate-edge-image
          passed: [build-migrate-edge-image]
          params:
            format: oci
        - get: websocket-edge-image
          passed: [build-websocket-edge-image]
          params:
            format: oci
        - get: trigger-edge-image
          passed: [build-trigger-edge-image]
          params:
            format: oci
        - get: version
      - task: prep-quickstart
        config:
          platform: linux
          image_resource: #@ release_task_image_config()
          inputs:
            - name: repo
            - name: edge-image
            - name: migrate-edge-image
            - name: trigger-edge-image
            - name: pipeline-tasks
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/prep-quickstart.sh
      - { put: docker-host, params: { acquire: true } }
      - task: test-on-docker-host
        attempts: 2
        timeout: 18m
        tags: ["galoy-staging"]
        config:
          platform: linux
          image_resource: #@ release_task_image_config()
          inputs:
          - name: pipeline-tasks
          - name: docker-host
          - name: repo
            path: galoy-quickstart
          caches:
          - path: cargo-home
          - path: cargo-target-dir
          params:
            REPO_PATH: galoy-quickstart/quickstart
            GOOGLE_CREDENTIALS: ((staging-gcp-creds.creds_json))
            SSH_PRIVATE_KEY: ((staging-ssh.ssh_private_key))
            SSH_PUB_KEY: ((staging-ssh.ssh_public_key))
            TEST_CONTAINER: quickstart-test
          run:
            path: pipeline-tasks/ci/vendor/tasks/test-on-docker-host.sh
        ensure:
          put: docker-host
          params:
            release: docker-host
      - put: repo-out
        params:
          repository: repo
          rebase: true
  - name: release
    plan:
      - in_parallel:
          - get: repo
            trigger: true
            passed:
              - check-code
              - audit
              - test-unit
              - integration-tests
              - bats-tests
              - build-debug-edge-image
              - build-migrate-edge-image
              - build-edge-image
              - build-trigger-edge-image
              - build-cron-edge-image
              - build-exporter-edge-image
              - build-websocket-edge-image
              - build-api-keys-edge-image
          - get: pipeline-tasks
          - get: edge-image
            passed: [build-edge-image]
            params:
              format: oci
          - get: migrate-edge-image
            passed: [build-migrate-edge-image]
            params:
              format: oci
          - get: exporter-edge-image
            passed: [build-exporter-edge-image]
            params:
              format: oci
          - get: trigger-edge-image
            passed: [build-trigger-edge-image]
            params:
              format: oci
          - get: cron-edge-image
            passed: [build-cron-edge-image]
            params:
              format: oci
          - get: websocket-edge-image
            passed: [build-websocket-edge-image]
            params:
              format: oci
          - get: api-keys-edge-image
            passed: [build-api-keys-edge-image]
            params:
              format: oci
          - get: version
      - task: prep-release
        config:
          platform: linux
          image_resource: #@ release_task_image_config()
          inputs:
            - name: repo
            - name: edge-image
            - name: pipeline-tasks
            - name: version
          outputs:
            - name: version
            - name: artifacts
          params:
            CHART: galoy
          run:
            path: pipeline-tasks/ci/tasks/vendor/prep-release-src.sh
      - in_parallel:
          - put: versioned-image
            params:
              image: edge-image/image.tar
              additional_tags: artifacts/gh-release-tag
          - put: versioned-migrate-image
            params:
              image: migrate-edge-image/image.tar
              additional_tags: artifacts/gh-release-tag
          - put: gh-release
            params:
              name: artifacts/gh-release-name
              tag: artifacts/gh-release-tag
              body: artifacts/gh-release-notes.md
          - put: version
            params:
              file: version/version
    on_failure: #@ slack_failure_notification()

  - name: bump-image-in-chart
    plan:
      - in_parallel:
          - get: edge-image
            passed: [release]
            params: { skip_download: true }
          - get: migrate-edge-image
            passed: [release]
            params: { skip_download: true }
          - get: websocket-edge-image
            passed: [release]
            params: { skip_download: true }
          - get: trigger-edge-image
            passed: [release]
            params: { skip_download: true }
          - get: cron-edge-image
            passed: [release]
            params: { skip_download: true }
          - get: exporter-edge-image
            passed: [release]
            params: { skip_download: true }
          - get: api-keys-edge-image
            passed: [release]
            params: { skip_download: true }
          - get: repo
            trigger: true
            passed:
              - release
          - get: version
            passed: [release]
          - get: charts-repo
            params: { skip_download: true }
          - get: pipeline-tasks
      - task: bump-image-digest-in-values
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: repo
            - name: edge-image
            - name: migrate-edge-image
            - name: websocket-edge-image
            - name: trigger-edge-image
            - name: cron-edge-image
            - name: exporter-edge-image
            - name: api-keys-edge-image
            - name: pipeline-tasks
            - name: charts-repo
            - name: version
          outputs:
            - name: charts-repo
          params:
            BRANCH: #@ data.values.git_charts_branch
          run:
            path: pipeline-tasks/ci/tasks/bump-image-digest.sh
      - put: charts-repo-bot-branch
        params:
          repository: charts-repo
          force: true
      - task: open-charts-pr
        config:
          platform: linux
          image_resource: #@ release_task_image_config()
          inputs:
            - name: repo
            - name: pipeline-tasks
            - name: edge-image
            - name: trigger-edge-image
            - name: exporter-edge-image
            - name: cron-edge-image
            - name: migrate-edge-image
            - name: websocket-edge-image
            - name: api-keys-edge-image
            - name: charts-repo
          params:
            GH_APP_ID: #@ data.values.github_app_id
            GH_APP_PRIVATE_KEY: #@ data.values.github_app_private_key
            BRANCH: #@ data.values.git_charts_branch
            BOT_BRANCH: #@ data.values.git_charts_bot_branch
          run:
            path: pipeline-tasks/ci/tasks/open-charts-pr.sh

  - name: sync-stablesats-proto
    plan:
      - in_parallel:
          - get: repo
          - get: pipeline-tasks
          - get: stablesats-price-proto
            trigger: true
      - task: sync-proto
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: repo
            - name: pipeline-tasks
            - name: stablesats-price-proto
              path: src-repo
          outputs:
            - name: repo
          params:
            PROTO_FILES_SRC_PATH: proto/price
            PROTO_FILES_DEST_PATH: src/services/dealer-price/proto/services/price/v1
            BUF_CONFIG_PATH: src/services/dealer-price/proto
            BRANCH: #@ data.values.git_branch
            MODULE: stablesats
          run:
            path: pipeline-tasks/ci/tasks/sync-proto.sh
      - put: stablesats-proto-bot-branch
        params:
          repository: repo
          force: true
      - task: open-bump-proto-pr
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          params:
            BRANCH: #@ data.values.git_branch
            BOT_BRANCH: #@ data.values.git_stablesats_proto_bot_branch
            GH_TOKEN: #@ data.values.github_token
            MODULE: stablesats
          run:
            path: pipeline-tasks/ci/tasks/open-bump-proto-pr.sh

  - name: sync-price-history-proto
    plan:
      - in_parallel:
          - get: repo
          - get: pipeline-tasks
          - get: price-history-proto
            trigger: true
      - task: sync-proto
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: repo
            - name: pipeline-tasks
            - name: price-history-proto
              path: src-repo
          outputs:
            - name: repo
          params:
            PROTO_FILES_SRC_PATH: history/src/servers/protos
            PROTO_FILES_DEST_PATH: src/services/price/protos
            BRANCH: #@ data.values.git_branch
            MODULE: price-history
          run:
            path: pipeline-tasks/ci/tasks/sync-proto.sh
      - put: price-history-proto-bot-branch
        params:
          repository: repo
          force: true
      - task: open-bump-proto-pr
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          params:
            BRANCH: #@ data.values.git_branch
            BOT_BRANCH: #@ data.values.git_price_history_proto_bot_branch
            GH_TOKEN: #@ data.values.github_token
            MODULE: price-history
          run:
            path: pipeline-tasks/ci/tasks/open-bump-proto-pr.sh

  - name: sync-price-realtime-proto
    plan:
      - in_parallel:
          - get: repo
          - get: pipeline-tasks
          - get: price-realtime-proto
            trigger: true
      - task: sync-proto
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: repo
            - name: pipeline-tasks
            - name: price-realtime-proto
              path: src-repo
          outputs:
            - name: repo
          params:
            PROTO_FILES_SRC_PATH: realtime/src/servers/protos
            PROTO_FILES_DEST_PATH: src/services/price/protos
            BRANCH: #@ data.values.git_branch
            MODULE: price-realtime
          run:
            path: pipeline-tasks/ci/tasks/sync-proto.sh
      - put: price-realtime-proto-bot-branch
        params:
          repository: repo
          force: true
      - task: open-bump-proto-pr
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          params:
            BRANCH: #@ data.values.git_branch
            BOT_BRANCH: #@ data.values.git_price_realtime_proto_bot_branch
            GH_TOKEN: #@ data.values.github_token
            MODULE: price-realtime
          run:
            path: pipeline-tasks/ci/tasks/open-bump-proto-pr.sh

  - name: sync-bria-api-proto
    plan:
      - in_parallel:
          - get: repo
          - get: pipeline-tasks
          - get: bria-api-proto
            trigger: true
      - task: sync-proto
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: repo
            - name: pipeline-tasks
            - name: bria-api-proto
              path: src-repo
          outputs:
            - name: repo
          params:
            PROTO_FILES_SRC_PATH: proto/api
            PROTO_FILES_DEST_PATH: src/services/bria/proto
            BUF_CONFIG_PATH: src/services/bria/proto
            BRANCH: #@ data.values.git_branch
            MODULE: bria
          run:
            path: pipeline-tasks/ci/tasks/sync-proto.sh
      - put: bria-api-proto-bot-branch
        params:
          repository: repo
          force: true
      - task: open-bump-proto-pr
        config:
          platform: linux
          image_resource: #@ nodejs_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
          params:
            BRANCH: #@ data.values.git_branch
            BOT_BRANCH: #@ data.values.git_bria_api_proto_bot_branch
            GH_TOKEN: #@ data.values.github_token
            MODULE: bria-api
          run:
            path: pipeline-tasks/ci/tasks/open-bump-proto-pr.sh

resources:
  -  #@ repo_resource(True)
  - name: repo-out
    type: git
    source:
      fetch_tags: true
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key
  -  #@ pipeline_tasks_resource()

  -  #@ slack_resource()

  - name: charts-repo-bot-branch
    type: git
    source:
      uri: #@ data.values.git_charts_uri
      branch: #@ data.values.git_charts_bot_branch
      private_key: #@ data.values.github_private_key

  - name: stablesats-proto-bot-branch
    type: git
    source:
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_stablesats_proto_bot_branch
      private_key: #@ data.values.github_private_key

  - name: price-history-proto-bot-branch
    type: git
    source:
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_price_history_proto_bot_branch
      private_key: #@ data.values.github_private_key

  - name: price-realtime-proto-bot-branch
    type: git
    source:
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_price_realtime_proto_bot_branch
      private_key: #@ data.values.github_private_key

  - name: bria-api-proto-bot-branch
    type: git
    source:
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_bria_api_proto_bot_branch
      private_key: #@ data.values.github_private_key

  - name: charts-repo
    type: git
    source:
      uri: #@ data.values.git_charts_uri
      branch: #@ data.values.git_charts_branch
      private_key: #@ data.values.github_private_key

  - name: edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ galoy_image()

  - name: debug-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ debug_galoy_image()

  - name: migrate-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ migrate_galoy_image()

  - name: versioned-image
    type: registry-image
    source:
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ galoy_image()

  - name: versioned-migrate-image
    type: registry-image
    source:
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ migrate_galoy_image()

  - name: websocket-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ websocket_galoy_image()

  - name: trigger-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ trigger_galoy_image()

  - name: cron-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ cron_galoy_image()

  - name: exporter-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ exporter_galoy_image()

  - name: api-keys-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ api_keys_galoy_image()

  - name: version
    type: semver
    source:
      initial_version: 0.0.0
      driver: git
      file: version
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_version_branch
      private_key: #@ data.values.github_private_key

  - name: gh-release
    type: github-release
    source:
      owner: #@ data.values.gh_org
      repository: #@ data.values.gh_repository
      access_token: #@ data.values.github_token

  - name: stablesats-price-proto
    type: git
    source:
      paths: ["proto/*"]
      uri: #@ data.values.git_stablesats_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key
      tag_regex: .+

  - name: price-history-proto
    type: git
    source:
      paths: ["history/src/servers/protos/*"]
      uri: #@ data.values.git_price_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key

  - name: price-realtime-proto
    type: git
    source:
      paths: ["realtime/src/servers/protos/*"]
      uri: #@ data.values.git_price_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key

  - name: bria-api-proto
    type: git
    source:
      paths: ["proto/api/*"]
      uri: #@ data.values.git_bria_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key
      tag_regex: .+
  - #@ docker_host_pool()

resource_types:
  -  #@ gcr_resource_type()
  -  #@ slack_resource_type()

#@ load("@ytt:data", "data")

#@ load("pipeline-fragments.lib.yml",
#@   "release_task_image_config")

#@ def galoy_dev_image():
#@   return data.values.docker_registry + "/galoy-dev"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: ((docker-creds.username))
  password: ((docker-creds.password))
  repository: #@ galoy_dev_image()
#@ end

#@ def buck_test_name(app):
#@   return "buck-test-" + app
#@ end

#@ def buck_test(app):
name: #@ buck_test_name(app)
serial: true
plan:
  - in_parallel:
      - get: #@ app_src_resource_name(app)
        trigger: true
      - { get: pipeline-tasks }
  - task: buck-test
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
        - name: pipeline-tasks
        - name: #@ app_src_resource_name(app)
          path: repo
      params:
        BUCK_TARGET: #@ "//apps/" + app + ":test"
        BUCK_CMD: test
      run:
        path: pipeline-tasks/ci/apps/tasks/buck-task.sh
#@ end

#@ def build_edge_image_name(app):
#@   return "build-" + app + "-edge-image"
#@ end

#@ def build_edge_image(app):
name: #@ build_edge_image_name(app)
serial: true
plan:
  - in_parallel:
      - get: #@ app_src_resource_name(app)
        trigger: true
      - { get: pipeline-tasks }
  - task: prepare-docker-build
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
        - name: pipeline-tasks
        - name: #@ app_src_resource_name(app)
          path: repo
      outputs:
        - name: repo
      run:
        path: pipeline-tasks/ci/apps/tasks/prepare-docker-build.sh
  - task: build
    attempts: 2
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
        - name: repo
      outputs:
        - name: image
      params:
        CONTEXT: repo
        DOCKERFILE: #@ "repo/apps/" + app + "/Dockerfile"
        BUILD_ARGS_FILE: repo/.build-args
      run:
        path: build
  - put: #@ edge_image_resource_name(app)
    params:
      image: image/image.tar
#@ end

#@ def tilt_integration_test_name(app):
#@  return "tilt-" + app
#@ end

#@ def tilt_integration_test(app):
#@ params = {}
#@ params["REPO_PATH"] = data.values.gh_repository + "-" + app
#@ params["GOOGLE_CREDENTIALS"] = "((staging-gcp-creds.creds_json))"
#@ params["SSH_PRIVATE_KEY"] = "((staging-ssh.ssh_private_key))"
#@ params["SSH_PUB_KEY"] = "((staging-ssh.ssh_public_key))"
#@ params["CMD"] = "./dev/bin/tilt-ci.sh " + app
name: #@ tilt_integration_test_name(app)
serial: true
plan:
- { put: nix-host, params: { acquire: true } }
- in_parallel:
  - get: #@ app_src_resource_name(app)
    trigger: true
  - { get: pipeline-tasks }
- task: #@ tilt_integration_test_name(app)
  attempts: 2
  timeout: 18m
  tags: ["galoy-staging"]
  config:
    platform: linux
    image_resource: #@ task_image_config()
    inputs:
    - name: pipeline-tasks
    - name: nix-host
    - name: #@ app_src_resource_name(app)
      path: #@ data.values.gh_repository + "-" + app
    params: #@ params
    run:
      path: pipeline-tasks/ci/apps/tasks/run-on-nix-host.sh
  ensure:
    put: nix-host
    params:
      release: nix-host
#@ end

#@ def build_edge_image(app):
name: #@ build_edge_image_name(app)
serial: true
plan:
  - in_parallel:
      - get: #@ app_src_resource_name(app)
        trigger: true
      - { get: pipeline-tasks }
  - task: prepare-docker-build
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
        - name: pipeline-tasks
        - name: #@ app_src_resource_name(app)
          path: repo
      outputs:
        - name: repo
      run:
        path: pipeline-tasks/ci/apps/tasks/prepare-docker-build.sh
  - task: build
    attempts: 2
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
        - name: repo
      outputs:
        - name: image
      params:
        CONTEXT: repo
        DOCKERFILE: #@ "repo/apps/" + app + "/Dockerfile"
        BUILD_ARGS_FILE: repo/.build-args
      run:
        path: build
  - put: #@ edge_image_resource_name(app)
    params:
      image: image/image.tar
#@ end

#@ def bump_image_in_chart_name(app):
#@   return "bump-" + app + "-in-chart"
#@ end

#@ def bump_image_in_chart(app):
#@ app_lookup = {
#@   "consent": {
#@     "YAML_PATH": ".galoy.images.consent.digest",
#@     "CHART": "galoy"
#@   },
#@   "dashboard": {
#@     "YAML_PATH": ".image.digest",
#@     "CHART": "api-dashboard"
#@   },
#@   "pay": {
#@     "YAML_PATH": ".image.digest",
#@     "CHART": "galoy-pay"
#@   },
#@   "admin-panel": {
#@     "YAML_PATH": ".image.digest",
#@     "CHART": "admin-panel"
#@   },
#@   "map": {
#@     "YAML_PATH": ".image.digest",
#@     "CHART": "map"
#@   }
#@ }
name: #@ bump_image_in_chart_name(app)
serial: true
plan:
  - in_parallel:
      - get: #@ app_src_resource_name(app)
        trigger: true
        passed:
          - #@ build_edge_image_name(app)
          - #@ buck_test_name(app)
          - #@ tilt_integration_test_name(app)
      - get: #@ edge_image_resource_name(app)
        passed:
          - #@ build_edge_image_name(app)
        params: { skip_download: true }
      - get: charts-repo
        params:
          branch: #@ data.values.git_charts_branch
      - get: pipeline-tasks
  - task: bump-image-digest-in-values
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
        - name: #@ app_src_resource_name(app)
          path: repo
        - name: #@ edge_image_resource_name(app)
          path: edge-image
        - name: charts-repo
        - name: pipeline-tasks
      outputs:
        - name: charts-repo
      params:
        BRANCH: #@ data.values.git_charts_branch
        APP: #@ app
        YAML_PATH: #@ app_lookup[app]["YAML_PATH"]
        CHART: #@ app_lookup[app]["CHART"]
      run:
        path: pipeline-tasks/ci/apps/tasks/bump-image-digest.sh
  - put: charts-repo-out
    params:
      repository: charts-repo
      force: true
      branch: #@ "bump-" + app + "-app"
  - task: open-charts-pr
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
        - name: #@ app_src_resource_name(app)
          path: repo
        - name: #@ edge_image_resource_name(app)
          path: edge-image
        - name: charts-repo
        - name: pipeline-tasks
      params:
        GH_APP_ID: #@ data.values.github_app_id
        GH_APP_PRIVATE_KEY: #@ data.values.github_app_private_key
        APP: #@ app
        BRANCH: #@ data.values.git_charts_branch
        BOT_BRANCH: #@ "bump-" + app + "-app"
        YAML_PATH: #@ app_lookup[app]["YAML_PATH"]
        CHART: #@ app_lookup[app]["CHART"]
      run:
        path: pipeline-tasks/ci/apps/tasks/open-charts-pr.sh
#@ end

#@ def app_src_resource_name(app):
#@   return app + "-src"
#@ end

#@ def app_src_resource(app):
name: #@ app_src_resource_name(app)
type: git
source:
  paths:
  - #@ "apps/" + app
  - #@ "apps/" + app + "/*"
  - #@ "apps/" + app + "/**/*"
  - flake.nix
  - flake.lock
  - toolchains/
  - toolchains/*
  - toolchains/**/*
  - pnpm-lock.yaml
  fetch_tags: true
  uri: #@ data.values.git_uri
  branch: #@ data.values.git_branch
  private_key: #@ data.values.github_private_key
#@ end

#@ def edge_image_resource_name(app):
#@   return app + "-edge-image"
#@ end

#@ def app_edge_image(app):
name: #@ edge_image_resource_name(app)
type: registry-image
source:
  tag: edge
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ data.values.docker_registry + "/galoy-" + app
#@ end

syntax = "proto3";

package services.notifications.v1;

service NotificationsService {
  rpc ShouldSendNotification (ShouldSendNotificationRequest) returns (ShouldSendNotificationResponse) {}
  rpc UserEnableNotificationChannel (UserEnableNotificationChannelRequest) returns (UserEnableNotificationChannelResponse) {}
  rpc UserDisableNotificationChannel (UserDisableNotificationChannelRequest) returns (UserDisableNotificationChannelResponse) {}
  rpc UserEnableNotificationCategory (UserEnableNotificationCategoryRequest) returns (UserEnableNotificationCategoryResponse) {}
  rpc UserDisableNotificationCategory (UserDisableNotificationCategoryRequest) returns (UserDisableNotificationCategoryResponse) {}
  rpc UserNotificationSettings (UserNotificationSettingsRequest) returns (UserNotificationSettingsResponse) {}
  rpc NotifyUserOfCirclesEvent (NotifyUserOfCirclesEventRequest) returns (NotifyUserOfCirclesEventResponse) {}
}

enum NotificationChannel {
  PUSH = 0;
}

enum NotificationCategory {
  CIRCLES = 0;
  PAYMENTS = 1;
  BALANCE = 2;
  ADMIN_NOTIFICATION = 3;
}

message ShouldSendNotificationRequest {
  string user_id = 1;
  NotificationChannel channel = 2;
  NotificationCategory category = 3;
}

message ShouldSendNotificationResponse {
  string user_id = 1;
  bool should_send = 2;
}

message UserEnableNotificationChannelRequest {
  string user_id = 1;
  NotificationChannel channel = 2;
}

message UserEnableNotificationChannelResponse {
  UserNotificationSettings notification_settings = 1;
}

message UserNotificationSettings {
  ChannelNotificationSettings push = 1;
}

message ChannelNotificationSettings {
  bool enabled = 1;
  repeated NotificationCategory disabled_categories = 2;
}

message UserDisableNotificationChannelRequest {
  string user_id = 1;
  NotificationChannel channel = 2;
}

message UserDisableNotificationChannelResponse {
  UserNotificationSettings notification_settings = 1;
}

message UserDisableNotificationCategoryRequest {
  string user_id = 1;
  NotificationChannel channel = 2;
  NotificationCategory category = 3;
}

message UserDisableNotificationCategoryResponse {
  UserNotificationSettings notification_settings = 1;
}

message UserEnableNotificationCategoryRequest {
  string user_id = 1;
  NotificationChannel channel = 2;
  NotificationCategory category = 3;
}

message UserEnableNotificationCategoryResponse {
  UserNotificationSettings notification_settings = 1;
}

message UserNotificationSettingsRequest {
  string user_id = 1;
}

message UserNotificationSettingsResponse {
  UserNotificationSettings notification_settings = 1;
}

message NotifyUserOfCirclesEventRequest {
  string user_id = 1;
  oneof circles_event {
    CircleGrew circle_grew = 2;
    CircleThresholdReached circle_threshold_reached = 3;
  }
}

enum CircleType {
  INNER = 0;
  OUTER = 1;
}

message CircleGrew {
  CircleType circle_type = 1;
  uint32 this_month_circle_size = 2;
  uint32 all_time_circle_size = 3;
}

enum CircleThresholdType {
  THIS_MONTH = 0;
  ALL_TIME = 1;
}

message CircleThresholdReached {
  CircleType circle_type = 1;
  CircleThresholdType threshold_type = 2;
  uint32 threshold = 3;
}

message NotifyUserOfCirclesEventResponse {
  bool success = 1;
}

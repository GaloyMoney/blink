type Mutation {
	statefulNotificationAcknowledge(input: StatefulNotificationAcknowledgeInput!): StatefulNotificationAcknowledgePayload!
}

"""
Information about pagination in a connection
"""
type PageInfo @shareable {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}


type StatefulNotification {
	id: ID!
	title: String!
	body: String!
	deepLink: String
	createdAt: Timestamp!
	acknowledgedAt: Timestamp
}

input StatefulNotificationAcknowledgeInput {
	notificationId: ID!
}

type StatefulNotificationAcknowledgePayload {
	notification: StatefulNotification!
}

type StatefulNotificationConnection @shareable {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [StatefulNotificationEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [StatefulNotification!]!
}

"""
An edge in a connection.
"""
type StatefulNotificationEdge @shareable {
	"""
	The item at the end of the edge
	"""
	node: StatefulNotification!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}


scalar Timestamp

extend type User @key(fields: "id") {
	id: ID! @external
	statefulNotifications(first: Int!, after: String): StatefulNotificationConnection!
	unacknowledgedStatefulNotificationsCount: Int!
}

extend schema @link(
	url: "https://specs.apollo.dev/federation/v2.3",
	import: ["@key", "@tag", "@shareable", "@inaccessible", "@override", "@external", "@provides", "@requires", "@composeDirective", "@interfaceObject"]
)
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

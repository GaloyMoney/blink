input AccountDisableNotificationCategoryInputAlt {
	channel: NotificationChannelAlt!
	category: NotificationCategoryAlt!
}

input AccountDisableNotificationChannelInputAlt {
	channel: NotificationChannelAlt!
}

input AccountEnableNotificationCategoryInputAlt {
	channel: NotificationChannelAlt!
	category: NotificationCategoryAlt!
}

input AccountEnableNotificationChannelInputAlt {
	channel: NotificationChannelAlt!
}

type AccountUpdateNotificationSettingsPayloadAlt {
	notificationSettings: NotificationSettingsAlt!
}


extend type ConsumerAccount @key(fields: "id") {
	id: ID! @external
	notificationSettingsAlt: NotificationSettingsAlt!
}




type Mutation {
	accountDisableNotificationChannelAlt(input: AccountDisableNotificationChannelInputAlt!): AccountUpdateNotificationSettingsPayloadAlt!
	accountEnableNotificationChannelAlt(input: AccountEnableNotificationChannelInputAlt!): AccountUpdateNotificationSettingsPayloadAlt!
	accountDisableNotificationCategoryAlt(input: AccountDisableNotificationCategoryInputAlt!): AccountUpdateNotificationSettingsPayloadAlt!
	accountEnableNotificationCategoryAlt(input: AccountEnableNotificationCategoryInputAlt!): AccountUpdateNotificationSettingsPayloadAlt!
}

enum NotificationCategoryAlt {
	CIRCLES
	PAYMENTS
}

enum NotificationChannelAlt {
	PUSH
}

type NotificationChannelSettingsAlt {
	enabled: Boolean!
	disabledCategories: [NotificationCategoryAlt!]!
}

type NotificationSettingsAlt {
	push: NotificationChannelSettingsAlt!
}



extend schema @link(
	url: "https://specs.apollo.dev/federation/v2.3",
	import: ["@key", "@tag", "@shareable", "@inaccessible", "@override", "@external", "@provides", "@requires", "@composeDirective", "@interfaceObject"]
)
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

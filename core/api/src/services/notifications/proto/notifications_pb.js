// source: notifications.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.services.notifications.v1.ChannelNotificationSettings', null, global);
goog.exportSymbol('proto.services.notifications.v1.DisableNotificationCategoryRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.DisableNotificationCategoryResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.DisableNotificationChannelRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.DisableNotificationChannelResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.EnableNotificationCategoryRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.EnableNotificationCategoryResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.EnableNotificationChannelRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.EnableNotificationChannelResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.GetNotificationSettingsRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.GetNotificationSettingsResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.NotificationCategory', null, global);
goog.exportSymbol('proto.services.notifications.v1.NotificationChannel', null, global);
goog.exportSymbol('proto.services.notifications.v1.NotificationSettings', null, global);
goog.exportSymbol('proto.services.notifications.v1.ShouldSendNotificationRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.ShouldSendNotificationResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.UpdateUserLocaleRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.UpdateUserLocaleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.ShouldSendNotificationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.ShouldSendNotificationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.ShouldSendNotificationRequest.displayName = 'proto.services.notifications.v1.ShouldSendNotificationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.ShouldSendNotificationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.ShouldSendNotificationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.ShouldSendNotificationResponse.displayName = 'proto.services.notifications.v1.ShouldSendNotificationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.EnableNotificationChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.EnableNotificationChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.EnableNotificationChannelRequest.displayName = 'proto.services.notifications.v1.EnableNotificationChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.EnableNotificationChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.EnableNotificationChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.EnableNotificationChannelResponse.displayName = 'proto.services.notifications.v1.EnableNotificationChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.NotificationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.NotificationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.NotificationSettings.displayName = 'proto.services.notifications.v1.NotificationSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.ChannelNotificationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.notifications.v1.ChannelNotificationSettings.repeatedFields_, null);
};
goog.inherits(proto.services.notifications.v1.ChannelNotificationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.ChannelNotificationSettings.displayName = 'proto.services.notifications.v1.ChannelNotificationSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.DisableNotificationChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.DisableNotificationChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.DisableNotificationChannelRequest.displayName = 'proto.services.notifications.v1.DisableNotificationChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.DisableNotificationChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.DisableNotificationChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.DisableNotificationChannelResponse.displayName = 'proto.services.notifications.v1.DisableNotificationChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.DisableNotificationCategoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.DisableNotificationCategoryRequest.displayName = 'proto.services.notifications.v1.DisableNotificationCategoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.DisableNotificationCategoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.DisableNotificationCategoryResponse.displayName = 'proto.services.notifications.v1.DisableNotificationCategoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.EnableNotificationCategoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.EnableNotificationCategoryRequest.displayName = 'proto.services.notifications.v1.EnableNotificationCategoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.EnableNotificationCategoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.EnableNotificationCategoryResponse.displayName = 'proto.services.notifications.v1.EnableNotificationCategoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.GetNotificationSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.GetNotificationSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.GetNotificationSettingsRequest.displayName = 'proto.services.notifications.v1.GetNotificationSettingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.GetNotificationSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.GetNotificationSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.GetNotificationSettingsResponse.displayName = 'proto.services.notifications.v1.GetNotificationSettingsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UpdateUserLocaleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UpdateUserLocaleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UpdateUserLocaleRequest.displayName = 'proto.services.notifications.v1.UpdateUserLocaleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UpdateUserLocaleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UpdateUserLocaleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UpdateUserLocaleResponse.displayName = 'proto.services.notifications.v1.UpdateUserLocaleResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.ShouldSendNotificationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.ShouldSendNotificationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.ShouldSendNotificationRequest;
  return proto.services.notifications.v1.ShouldSendNotificationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.services.notifications.v1.NotificationCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.ShouldSendNotificationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NotificationCategory category = 3;
 * @return {!proto.services.notifications.v1.NotificationCategory}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.getCategory = function() {
  return /** @type {!proto.services.notifications.v1.NotificationCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.ShouldSendNotificationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.ShouldSendNotificationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shouldSend: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.ShouldSendNotificationResponse;
  return proto.services.notifications.v1.ShouldSendNotificationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldSend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.ShouldSendNotificationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShouldSend();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool should_send = 2;
 * @return {boolean}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.getShouldSend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.setShouldSend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.EnableNotificationChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.EnableNotificationChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.EnableNotificationChannelRequest}
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.EnableNotificationChannelRequest;
  return proto.services.notifications.v1.EnableNotificationChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.EnableNotificationChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.EnableNotificationChannelRequest}
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.EnableNotificationChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.EnableNotificationChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.EnableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.EnableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.EnableNotificationChannelRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.EnableNotificationChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.EnableNotificationChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.NotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.EnableNotificationChannelResponse}
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.EnableNotificationChannelResponse;
  return proto.services.notifications.v1.EnableNotificationChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.EnableNotificationChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.EnableNotificationChannelResponse}
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.NotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.EnableNotificationChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.EnableNotificationChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional NotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.NotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.NotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.NotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.EnableNotificationChannelResponse} returns this
*/
proto.services.notifications.v1.EnableNotificationChannelResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.EnableNotificationChannelResponse} returns this
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.EnableNotificationChannelResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.NotificationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.NotificationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.NotificationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.NotificationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    push: (f = msg.getPush()) && proto.services.notifications.v1.ChannelNotificationSettings.toObject(includeInstance, f),
    locale: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.NotificationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.NotificationSettings;
  return proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.NotificationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.ChannelNotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinaryFromReader);
      msg.setPush(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.NotificationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.NotificationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPush();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.ChannelNotificationSettings.serializeBinaryToWriter
    );
  }
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ChannelNotificationSettings push = 1;
 * @return {?proto.services.notifications.v1.ChannelNotificationSettings}
 */
proto.services.notifications.v1.NotificationSettings.prototype.getPush = function() {
  return /** @type{?proto.services.notifications.v1.ChannelNotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.ChannelNotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.ChannelNotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.NotificationSettings} returns this
*/
proto.services.notifications.v1.NotificationSettings.prototype.setPush = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.NotificationSettings} returns this
 */
proto.services.notifications.v1.NotificationSettings.prototype.clearPush = function() {
  return this.setPush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.NotificationSettings.prototype.hasPush = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string locale = 2;
 * @return {string}
 */
proto.services.notifications.v1.NotificationSettings.prototype.getLocale = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.NotificationSettings} returns this
 */
proto.services.notifications.v1.NotificationSettings.prototype.setLocale = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.notifications.v1.ChannelNotificationSettings.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.ChannelNotificationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.ChannelNotificationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ChannelNotificationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    disabledCategoriesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings}
 */
proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.ChannelNotificationSettings;
  return proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.ChannelNotificationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings}
 */
proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.services.notifications.v1.NotificationCategory>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDisabledCategories(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.ChannelNotificationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.ChannelNotificationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ChannelNotificationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDisabledCategoriesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated NotificationCategory disabled_categories = 2;
 * @return {!Array<!proto.services.notifications.v1.NotificationCategory>}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.getDisabledCategoriesList = function() {
  return /** @type {!Array<!proto.services.notifications.v1.NotificationCategory>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.services.notifications.v1.NotificationCategory>} value
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.setDisabledCategoriesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @param {number=} opt_index
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.addDisabledCategories = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.clearDisabledCategoriesList = function() {
  return this.setDisabledCategoriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.DisableNotificationChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.DisableNotificationChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.DisableNotificationChannelRequest}
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.DisableNotificationChannelRequest;
  return proto.services.notifications.v1.DisableNotificationChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.DisableNotificationChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.DisableNotificationChannelRequest}
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.DisableNotificationChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.DisableNotificationChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.DisableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.DisableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.DisableNotificationChannelRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.DisableNotificationChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.DisableNotificationChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.NotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.DisableNotificationChannelResponse}
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.DisableNotificationChannelResponse;
  return proto.services.notifications.v1.DisableNotificationChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.DisableNotificationChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.DisableNotificationChannelResponse}
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.NotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.DisableNotificationChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.DisableNotificationChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional NotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.NotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.NotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.NotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.DisableNotificationChannelResponse} returns this
*/
proto.services.notifications.v1.DisableNotificationChannelResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.DisableNotificationChannelResponse} returns this
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.DisableNotificationChannelResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.DisableNotificationCategoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.DisableNotificationCategoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryRequest}
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.DisableNotificationCategoryRequest;
  return proto.services.notifications.v1.DisableNotificationCategoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.DisableNotificationCategoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryRequest}
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.services.notifications.v1.NotificationCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.DisableNotificationCategoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.DisableNotificationCategoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NotificationCategory category = 3;
 * @return {!proto.services.notifications.v1.NotificationCategory}
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.getCategory = function() {
  return /** @type {!proto.services.notifications.v1.NotificationCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.DisableNotificationCategoryRequest.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.DisableNotificationCategoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.DisableNotificationCategoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.NotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryResponse}
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.DisableNotificationCategoryResponse;
  return proto.services.notifications.v1.DisableNotificationCategoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.DisableNotificationCategoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryResponse}
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.NotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.DisableNotificationCategoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.DisableNotificationCategoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional NotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.NotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.NotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.NotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryResponse} returns this
*/
proto.services.notifications.v1.DisableNotificationCategoryResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.DisableNotificationCategoryResponse} returns this
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.DisableNotificationCategoryResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.EnableNotificationCategoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.EnableNotificationCategoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryRequest}
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.EnableNotificationCategoryRequest;
  return proto.services.notifications.v1.EnableNotificationCategoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.EnableNotificationCategoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryRequest}
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.services.notifications.v1.NotificationCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.EnableNotificationCategoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.EnableNotificationCategoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NotificationCategory category = 3;
 * @return {!proto.services.notifications.v1.NotificationCategory}
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.getCategory = function() {
  return /** @type {!proto.services.notifications.v1.NotificationCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.EnableNotificationCategoryRequest.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.EnableNotificationCategoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.EnableNotificationCategoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.NotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryResponse}
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.EnableNotificationCategoryResponse;
  return proto.services.notifications.v1.EnableNotificationCategoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.EnableNotificationCategoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryResponse}
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.NotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.EnableNotificationCategoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.EnableNotificationCategoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional NotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.NotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.NotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.NotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryResponse} returns this
*/
proto.services.notifications.v1.EnableNotificationCategoryResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.EnableNotificationCategoryResponse} returns this
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.EnableNotificationCategoryResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.GetNotificationSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.GetNotificationSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.GetNotificationSettingsRequest}
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.GetNotificationSettingsRequest;
  return proto.services.notifications.v1.GetNotificationSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.GetNotificationSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.GetNotificationSettingsRequest}
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.GetNotificationSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.GetNotificationSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.GetNotificationSettingsRequest} returns this
 */
proto.services.notifications.v1.GetNotificationSettingsRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.GetNotificationSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.GetNotificationSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.NotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.GetNotificationSettingsResponse}
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.GetNotificationSettingsResponse;
  return proto.services.notifications.v1.GetNotificationSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.GetNotificationSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.GetNotificationSettingsResponse}
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.NotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.GetNotificationSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.GetNotificationSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional NotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.NotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.NotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.NotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.GetNotificationSettingsResponse} returns this
*/
proto.services.notifications.v1.GetNotificationSettingsResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.GetNotificationSettingsResponse} returns this
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.GetNotificationSettingsResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UpdateUserLocaleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UpdateUserLocaleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    locale: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UpdateUserLocaleRequest}
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UpdateUserLocaleRequest;
  return proto.services.notifications.v1.UpdateUserLocaleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UpdateUserLocaleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UpdateUserLocaleRequest}
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UpdateUserLocaleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UpdateUserLocaleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.UpdateUserLocaleRequest} returns this
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string locale = 2;
 * @return {string}
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.prototype.getLocale = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.UpdateUserLocaleRequest} returns this
 */
proto.services.notifications.v1.UpdateUserLocaleRequest.prototype.setLocale = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UpdateUserLocaleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UpdateUserLocaleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.NotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UpdateUserLocaleResponse}
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UpdateUserLocaleResponse;
  return proto.services.notifications.v1.UpdateUserLocaleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UpdateUserLocaleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UpdateUserLocaleResponse}
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.NotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.NotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UpdateUserLocaleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UpdateUserLocaleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.NotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional NotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.NotificationSettings}
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.NotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.NotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.NotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.UpdateUserLocaleResponse} returns this
*/
proto.services.notifications.v1.UpdateUserLocaleResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.UpdateUserLocaleResponse} returns this
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.UpdateUserLocaleResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.services.notifications.v1.NotificationChannel = {
  PUSH: 0
};

/**
 * @enum {number}
 */
proto.services.notifications.v1.NotificationCategory = {
  CIRCLES: 0,
  PAYMENTS: 1,
  BALANCE: 2,
  ADMIN_NOTIFICATION: 3
};

goog.object.extend(exports, proto.services.notifications.v1);

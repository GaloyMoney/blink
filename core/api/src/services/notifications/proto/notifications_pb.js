// source: notifications.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.services.notifications.v1.ChannelNotificationSettings', null, global);
goog.exportSymbol('proto.services.notifications.v1.NotificationCategory', null, global);
goog.exportSymbol('proto.services.notifications.v1.NotificationChannel', null, global);
goog.exportSymbol('proto.services.notifications.v1.ShouldSendNotificationRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.ShouldSendNotificationResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserDisableNotificationCategoryRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserDisableNotificationCategoryResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserDisableNotificationChannelRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserDisableNotificationChannelResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserEnableNotificationCategoryRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserEnableNotificationCategoryResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserEnableNotificationChannelRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserEnableNotificationChannelResponse', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserNotificationSettings', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserNotificationSettingsRequest', null, global);
goog.exportSymbol('proto.services.notifications.v1.UserNotificationSettingsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.ShouldSendNotificationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.ShouldSendNotificationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.ShouldSendNotificationRequest.displayName = 'proto.services.notifications.v1.ShouldSendNotificationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.ShouldSendNotificationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.ShouldSendNotificationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.ShouldSendNotificationResponse.displayName = 'proto.services.notifications.v1.ShouldSendNotificationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserEnableNotificationChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserEnableNotificationChannelRequest.displayName = 'proto.services.notifications.v1.UserEnableNotificationChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserEnableNotificationChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserEnableNotificationChannelResponse.displayName = 'proto.services.notifications.v1.UserEnableNotificationChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserNotificationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserNotificationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserNotificationSettings.displayName = 'proto.services.notifications.v1.UserNotificationSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.ChannelNotificationSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.notifications.v1.ChannelNotificationSettings.repeatedFields_, null);
};
goog.inherits(proto.services.notifications.v1.ChannelNotificationSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.ChannelNotificationSettings.displayName = 'proto.services.notifications.v1.ChannelNotificationSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserDisableNotificationChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserDisableNotificationChannelRequest.displayName = 'proto.services.notifications.v1.UserDisableNotificationChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserDisableNotificationChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserDisableNotificationChannelResponse.displayName = 'proto.services.notifications.v1.UserDisableNotificationChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserDisableNotificationCategoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserDisableNotificationCategoryRequest.displayName = 'proto.services.notifications.v1.UserDisableNotificationCategoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserDisableNotificationCategoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserDisableNotificationCategoryResponse.displayName = 'proto.services.notifications.v1.UserDisableNotificationCategoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserEnableNotificationCategoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserEnableNotificationCategoryRequest.displayName = 'proto.services.notifications.v1.UserEnableNotificationCategoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserEnableNotificationCategoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserEnableNotificationCategoryResponse.displayName = 'proto.services.notifications.v1.UserEnableNotificationCategoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserNotificationSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserNotificationSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserNotificationSettingsRequest.displayName = 'proto.services.notifications.v1.UserNotificationSettingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.notifications.v1.UserNotificationSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.notifications.v1.UserNotificationSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.notifications.v1.UserNotificationSettingsResponse.displayName = 'proto.services.notifications.v1.UserNotificationSettingsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.ShouldSendNotificationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.ShouldSendNotificationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.ShouldSendNotificationRequest;
  return proto.services.notifications.v1.ShouldSendNotificationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.services.notifications.v1.NotificationCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.ShouldSendNotificationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NotificationCategory category = 3;
 * @return {!proto.services.notifications.v1.NotificationCategory}
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.getCategory = function() {
  return /** @type {!proto.services.notifications.v1.NotificationCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationRequest} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationRequest.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.ShouldSendNotificationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.ShouldSendNotificationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shouldSend: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.ShouldSendNotificationResponse;
  return proto.services.notifications.v1.ShouldSendNotificationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldSend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.ShouldSendNotificationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.ShouldSendNotificationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShouldSend();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool should_send = 2;
 * @return {boolean}
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.getShouldSend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.services.notifications.v1.ShouldSendNotificationResponse} returns this
 */
proto.services.notifications.v1.ShouldSendNotificationResponse.prototype.setShouldSend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserEnableNotificationChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserEnableNotificationChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelRequest}
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserEnableNotificationChannelRequest;
  return proto.services.notifications.v1.UserEnableNotificationChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserEnableNotificationChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelRequest}
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserEnableNotificationChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserEnableNotificationChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.UserEnableNotificationChannelRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserEnableNotificationChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserEnableNotificationChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.UserNotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelResponse}
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserEnableNotificationChannelResponse;
  return proto.services.notifications.v1.UserEnableNotificationChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserEnableNotificationChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelResponse}
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.UserNotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.UserNotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserEnableNotificationChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserEnableNotificationChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.UserNotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserNotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.UserNotificationSettings}
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.UserNotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.UserNotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.UserNotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelResponse} returns this
*/
proto.services.notifications.v1.UserEnableNotificationChannelResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.UserEnableNotificationChannelResponse} returns this
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.UserEnableNotificationChannelResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserNotificationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserNotificationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserNotificationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserNotificationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    push: (f = msg.getPush()) && proto.services.notifications.v1.ChannelNotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserNotificationSettings}
 */
proto.services.notifications.v1.UserNotificationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserNotificationSettings;
  return proto.services.notifications.v1.UserNotificationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserNotificationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserNotificationSettings}
 */
proto.services.notifications.v1.UserNotificationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.ChannelNotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinaryFromReader);
      msg.setPush(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserNotificationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserNotificationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserNotificationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserNotificationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPush();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.ChannelNotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChannelNotificationSettings push = 1;
 * @return {?proto.services.notifications.v1.ChannelNotificationSettings}
 */
proto.services.notifications.v1.UserNotificationSettings.prototype.getPush = function() {
  return /** @type{?proto.services.notifications.v1.ChannelNotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.ChannelNotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.ChannelNotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.UserNotificationSettings} returns this
*/
proto.services.notifications.v1.UserNotificationSettings.prototype.setPush = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.UserNotificationSettings} returns this
 */
proto.services.notifications.v1.UserNotificationSettings.prototype.clearPush = function() {
  return this.setPush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.UserNotificationSettings.prototype.hasPush = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.notifications.v1.ChannelNotificationSettings.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.ChannelNotificationSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.ChannelNotificationSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ChannelNotificationSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    disabledCategoriesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings}
 */
proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.ChannelNotificationSettings;
  return proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.ChannelNotificationSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings}
 */
proto.services.notifications.v1.ChannelNotificationSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.services.notifications.v1.NotificationCategory>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDisabledCategories(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.ChannelNotificationSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.ChannelNotificationSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.ChannelNotificationSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDisabledCategoriesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated NotificationCategory disabled_categories = 2;
 * @return {!Array<!proto.services.notifications.v1.NotificationCategory>}
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.getDisabledCategoriesList = function() {
  return /** @type {!Array<!proto.services.notifications.v1.NotificationCategory>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.services.notifications.v1.NotificationCategory>} value
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.setDisabledCategoriesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @param {number=} opt_index
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.addDisabledCategories = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.notifications.v1.ChannelNotificationSettings} returns this
 */
proto.services.notifications.v1.ChannelNotificationSettings.prototype.clearDisabledCategoriesList = function() {
  return this.setDisabledCategoriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserDisableNotificationChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserDisableNotificationChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelRequest}
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserDisableNotificationChannelRequest;
  return proto.services.notifications.v1.UserDisableNotificationChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserDisableNotificationChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelRequest}
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserDisableNotificationChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserDisableNotificationChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelRequest} returns this
 */
proto.services.notifications.v1.UserDisableNotificationChannelRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserDisableNotificationChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserDisableNotificationChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.UserNotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelResponse}
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserDisableNotificationChannelResponse;
  return proto.services.notifications.v1.UserDisableNotificationChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserDisableNotificationChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelResponse}
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.UserNotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.UserNotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserDisableNotificationChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserDisableNotificationChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.UserNotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserNotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.UserNotificationSettings}
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.UserNotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.UserNotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.UserNotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelResponse} returns this
*/
proto.services.notifications.v1.UserDisableNotificationChannelResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.UserDisableNotificationChannelResponse} returns this
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.UserDisableNotificationChannelResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserDisableNotificationCategoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserDisableNotificationCategoryRequest;
  return proto.services.notifications.v1.UserDisableNotificationCategoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.services.notifications.v1.NotificationCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserDisableNotificationCategoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NotificationCategory category = 3;
 * @return {!proto.services.notifications.v1.NotificationCategory}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.getCategory = function() {
  return /** @type {!proto.services.notifications.v1.NotificationCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.UserDisableNotificationCategoryRequest.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserDisableNotificationCategoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserDisableNotificationCategoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.UserNotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryResponse}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserDisableNotificationCategoryResponse;
  return proto.services.notifications.v1.UserDisableNotificationCategoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserDisableNotificationCategoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryResponse}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.UserNotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.UserNotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserDisableNotificationCategoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserDisableNotificationCategoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.UserNotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserNotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.UserNotificationSettings}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.UserNotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.UserNotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.UserNotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryResponse} returns this
*/
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.UserDisableNotificationCategoryResponse} returns this
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.UserDisableNotificationCategoryResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserEnableNotificationCategoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserEnableNotificationCategoryRequest;
  return proto.services.notifications.v1.UserEnableNotificationCategoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.services.notifications.v1.NotificationChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.services.notifications.v1.NotificationCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserEnableNotificationCategoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationChannel channel = 2;
 * @return {!proto.services.notifications.v1.NotificationChannel}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.getChannel = function() {
  return /** @type {!proto.services.notifications.v1.NotificationChannel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationChannel} value
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NotificationCategory category = 3;
 * @return {!proto.services.notifications.v1.NotificationCategory}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.getCategory = function() {
  return /** @type {!proto.services.notifications.v1.NotificationCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.notifications.v1.NotificationCategory} value
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryRequest} returns this
 */
proto.services.notifications.v1.UserEnableNotificationCategoryRequest.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserEnableNotificationCategoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserEnableNotificationCategoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.UserNotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryResponse}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserEnableNotificationCategoryResponse;
  return proto.services.notifications.v1.UserEnableNotificationCategoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserEnableNotificationCategoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryResponse}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.UserNotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.UserNotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserEnableNotificationCategoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserEnableNotificationCategoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.UserNotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserNotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.UserNotificationSettings}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.UserNotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.UserNotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.UserNotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryResponse} returns this
*/
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.UserEnableNotificationCategoryResponse} returns this
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.UserEnableNotificationCategoryResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserNotificationSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserNotificationSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserNotificationSettingsRequest}
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserNotificationSettingsRequest;
  return proto.services.notifications.v1.UserNotificationSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserNotificationSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserNotificationSettingsRequest}
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserNotificationSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserNotificationSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.notifications.v1.UserNotificationSettingsRequest} returns this
 */
proto.services.notifications.v1.UserNotificationSettingsRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.notifications.v1.UserNotificationSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.notifications.v1.UserNotificationSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationSettings: (f = msg.getNotificationSettings()) && proto.services.notifications.v1.UserNotificationSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.notifications.v1.UserNotificationSettingsResponse}
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.notifications.v1.UserNotificationSettingsResponse;
  return proto.services.notifications.v1.UserNotificationSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.notifications.v1.UserNotificationSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.notifications.v1.UserNotificationSettingsResponse}
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.notifications.v1.UserNotificationSettings;
      reader.readMessage(value,proto.services.notifications.v1.UserNotificationSettings.deserializeBinaryFromReader);
      msg.setNotificationSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.notifications.v1.UserNotificationSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.notifications.v1.UserNotificationSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.notifications.v1.UserNotificationSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserNotificationSettings notification_settings = 1;
 * @return {?proto.services.notifications.v1.UserNotificationSettings}
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.prototype.getNotificationSettings = function() {
  return /** @type{?proto.services.notifications.v1.UserNotificationSettings} */ (
    jspb.Message.getWrapperField(this, proto.services.notifications.v1.UserNotificationSettings, 1));
};


/**
 * @param {?proto.services.notifications.v1.UserNotificationSettings|undefined} value
 * @return {!proto.services.notifications.v1.UserNotificationSettingsResponse} returns this
*/
proto.services.notifications.v1.UserNotificationSettingsResponse.prototype.setNotificationSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.notifications.v1.UserNotificationSettingsResponse} returns this
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.prototype.clearNotificationSettings = function() {
  return this.setNotificationSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.notifications.v1.UserNotificationSettingsResponse.prototype.hasNotificationSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.services.notifications.v1.NotificationChannel = {
  PUSH: 0
};

/**
 * @enum {number}
 */
proto.services.notifications.v1.NotificationCategory = {
  CIRCLES: 0,
  PAYMENTS: 1,
  BALANCE: 2,
  ADMIN_NOTIFICATION: 3
};

goog.object.extend(exports, proto.services.notifications.v1);
